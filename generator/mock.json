{
  "openapi": "3.0.0",
  "info": {
    "title": "Auth",
    "description": "Auth API",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "TokenRequestDTO": {
        "type": "object",
        "properties": {
          "grantType": {
            "enum": [
              "code",
              "password-credentials",
              "client-credentials",
              "implicit",
              "refresh-token"
            ],
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "isOrgUser": {
            "type": "boolean",
            "default": false
          },
          "anonymousId": {
            "type": "string"
          }
        },
        "required": [
          "grantType"
        ]
      },
      "AccessTokenDTO": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "expires": {
            "type": "number"
          },
          "refreshToken": {
            "type": "string"
          },
          "refreshTokenExpires": {
            "type": "number"
          },
          "tokenType": {
            "type": "string",
            "default": "Bearer"
          }
        },
        "required": [
          "accessToken",
          "expires",
          "tokenType"
        ]
      },
      "PasswordGrantTokenRequestDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "isOrgUser": {
            "type": "boolean"
          }
        },
        "required": [
          "email",
          "password",
          "isOrgUser"
        ]
      },
      "FacebookTokenRequestDTO": {
        "type": "object",
        "properties": {
          "grantType": {
            "enum": [
              "code",
              "password-credentials",
              "client-credentials",
              "implicit",
              "refresh-token"
            ],
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "isOrgUser": {
            "type": "boolean",
            "default": false
          },
          "anonymousId": {
            "type": "string"
          },
          "facebookId": {
            "type": "string"
          },
          "facebookToken": {
            "type": "string"
          }
        },
        "required": [
          "grantType",
          "facebookId",
          "facebookToken"
        ]
      },
      "ApiClientDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "permissions"
        ]
      },
      "ApiClientDraftDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "permissions"
        ]
      },
      "Permission": {
        "type": "object",
        "properties": {}
      },
      "RoleDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "permissions"
        ]
      },
      "InternationalsDraftDTO": {
        "type": "object",
        "properties": {
          "currencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "currencies",
          "languages",
          "countries"
        ]
      },
      "InternationalsDTO": {
        "type": "object",
        "properties": {
          "currencies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "countries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "currencies",
          "languages",
          "countries",
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "SubRateDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "amount"
        ]
      },
      "TaxRateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "totalAmount": {
            "type": "number"
          },
          "countryCode": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "subRates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubRateDTO"
            }
          }
        },
        "required": [
          "totalAmount",
          "countryCode",
          "subRates"
        ]
      },
      "TaxCategoryDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 0
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxRateDTO"
            }
          }
        },
        "required": [
          "key",
          "rates"
        ]
      },
      "TaxCategoryDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 0
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxRateDTO"
            }
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "key",
          "rates",
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "LocalizedString": {
        "type": "object",
        "properties": {}
      },
      "IdReferenceDTO": {
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "enum": [
              "store",
              "address",
              "brand",
              "category",
              "collection",
              "view",
              "wallet",
              "wallet-type",
              "customer",
              "customer-group",
              "product-discount",
              "cart-discount",
              "discount-code",
              "item",
              "order",
              "payment",
              "merchant",
              "product",
              "shipping",
              "tax-category",
              "price-list",
              "shipping-method",
              "payment-method",
              "state",
              "cms-folder",
              "cms-type"
            ],
            "type": "string"
          },
          "resource": {
            "type": "object"
          }
        },
        "required": [
          "resourceId",
          "resourceType"
        ]
      },
      "MoneyDTO": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string"
          },
          "centAmount": {
            "type": "number"
          },
          "fractionDigits": {
            "type": "number"
          }
        },
        "required": [
          "currencyCode",
          "centAmount",
          "fractionDigits"
        ]
      },
      "ShippingFeeTableOrderTotalWeightInGramsDTO": {
        "type": "object",
        "properties": {
          "weightLessThan": {
            "type": "number"
          },
          "fee": {
            "$ref": "#/components/schemas/MoneyDTO"
          }
        },
        "required": [
          "weightLessThan",
          "fee"
        ]
      },
      "CodFeeTableOrderTotalAmountDTO": {
        "type": "object",
        "properties": {
          "amountLessThan": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "fee": {
            "$ref": "#/components/schemas/MoneyDTO"
          }
        },
        "required": [
          "amountLessThan",
          "fee"
        ]
      },
      "ShippingMethodDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 0
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "authority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "ShippingServiceProvider"
            ],
            "type": "string"
          },
          "providerType": {
            "enum": [
              "Speedy",
              "Econt",
              "Custom"
            ],
            "type": "string"
          },
          "option": {
            "type": "object"
          },
          "merchantKey": {
            "type": "string"
          },
          "taxCategory": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "countryCode": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "shippingFeeRateCalculationType": {
            "enum": [
              "OrderTotalWeightInGrams"
            ],
            "type": "string"
          },
          "shippingFeeTableOrderTotalWeightInGrams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingFeeTableOrderTotalWeightInGramsDTO"
            }
          },
          "isCOD": {
            "type": "boolean"
          },
          "codFeeRateCalculationType": {
            "enum": [
              "OrderTotalAmount"
            ],
            "type": "string"
          },
          "codFeeTableOrderTotalAmount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodFeeTableOrderTotalAmountDTO"
            }
          },
          "providerConfig": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "authority",
          "type",
          "providerType",
          "taxCategory",
          "countryCode",
          "currencyCode",
          "shippingFeeRateCalculationType",
          "shippingFeeTableOrderTotalWeightInGrams",
          "isCOD",
          "codFeeRateCalculationType",
          "codFeeTableOrderTotalAmount",
          "providerConfig"
        ]
      },
      "ShippingMethodDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 0
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "authority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "ShippingServiceProvider"
            ],
            "type": "string"
          },
          "providerType": {
            "enum": [
              "Speedy",
              "Econt",
              "Custom"
            ],
            "type": "string"
          },
          "option": {
            "type": "object"
          },
          "merchantKey": {
            "type": "string"
          },
          "taxCategory": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "countryCode": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "shippingFeeRateCalculationType": {
            "enum": [
              "OrderTotalWeightInGrams"
            ],
            "type": "string"
          },
          "shippingFeeTableOrderTotalWeightInGrams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingFeeTableOrderTotalWeightInGramsDTO"
            }
          },
          "isCOD": {
            "type": "boolean"
          },
          "codFeeRateCalculationType": {
            "enum": [
              "OrderTotalAmount"
            ],
            "type": "string"
          },
          "codFeeTableOrderTotalAmount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodFeeTableOrderTotalAmountDTO"
            }
          },
          "providerConfig": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "authority",
          "type",
          "providerType",
          "taxCategory",
          "countryCode",
          "currencyCode",
          "shippingFeeRateCalculationType",
          "shippingFeeTableOrderTotalWeightInGrams",
          "isCOD",
          "codFeeRateCalculationType",
          "codFeeTableOrderTotalAmount",
          "providerConfig",
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "StoreDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 0
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "key"
        ]
      },
      "StoreDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 0
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "key",
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "KeyReferenceDTO": {
        "type": "object",
        "properties": {
          "resourceKey": {
            "type": "string"
          },
          "resourceType": {
            "enum": [
              "store",
              "address",
              "brand",
              "category",
              "collection",
              "view",
              "wallet",
              "wallet-type",
              "customer",
              "customer-group",
              "product-discount",
              "cart-discount",
              "discount-code",
              "item",
              "order",
              "payment",
              "merchant",
              "product",
              "shipping",
              "tax-category",
              "price-list",
              "shipping-method",
              "payment-method",
              "state",
              "cms-folder",
              "cms-type"
            ],
            "type": "string"
          },
          "resource": {
            "type": "object"
          }
        },
        "required": [
          "resourceKey",
          "resourceType"
        ]
      },
      "StateDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 0
          },
          "key": {
            "type": "string"
          },
          "type": {
            "enum": [
              "OrderState",
              "LineItemState",
              "PaymentState",
              "WalletState"
            ],
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "color": {
            "type": "string"
          },
          "initial": {
            "type": "boolean"
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyReferenceDTO"
            }
          }
        },
        "required": [
          "key",
          "type",
          "initial",
          "transitions"
        ]
      },
      "StateDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 0
          },
          "key": {
            "type": "string"
          },
          "type": {
            "enum": [
              "OrderState",
              "LineItemState",
              "PaymentState",
              "WalletState"
            ],
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "color": {
            "type": "string"
          },
          "initial": {
            "type": "boolean"
          },
          "transitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyReferenceDTO"
            }
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "system": {
            "type": "boolean"
          }
        },
        "required": [
          "key",
          "type",
          "initial",
          "transitions",
          "id",
          "createdAt",
          "updatedAt",
          "system"
        ]
      },
      "GoogleCloudPubSubDestinationDTO": {
        "type": "object",
        "properties": {
          "topic": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          }
        },
        "required": [
          "topic",
          "projectId"
        ]
      },
      "MessageDTO": {
        "type": "object",
        "properties": {
          "resourceTypeId": {
            "type": "string"
          },
          "types": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "resourceTypeId",
          "types"
        ]
      },
      "SubscriptionDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "type": {
            "enum": [
              "GoogleCloudPubSub",
              "SQS",
              "SNS",
              "AzureServiceBus",
              "EventGrid"
            ],
            "type": "string"
          },
          "destination": {
            "$ref": "#/components/schemas/GoogleCloudPubSubDestinationDTO"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageDTO"
            }
          }
        },
        "required": [
          "key",
          "type",
          "destination",
          "messages"
        ]
      },
      "StoreViewDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "storeKey": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "themeKey": {
            "type": "string"
          },
          "themeVersion": {
            "type": "string"
          },
          "themeConfig": {
            "type": "object"
          },
          "themeConfigSchema": {
            "type": "object"
          }
        },
        "required": [
          "storeKey",
          "key",
          "languageCode",
          "themeKey",
          "themeVersion",
          "themeConfig",
          "themeConfigSchema"
        ]
      },
      "StoreViewDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "storeKey": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "themeKey": {
            "type": "string"
          },
          "themeVersion": {
            "type": "string"
          },
          "themeConfig": {
            "type": "object"
          },
          "themeConfigSchema": {
            "type": "object"
          },
          "_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "storeKey",
          "key",
          "languageCode",
          "themeKey",
          "themeVersion",
          "themeConfig",
          "themeConfigSchema",
          "_id",
          "createdAt",
          "updatedAt"
        ]
      },
      "StoreViewFilterResultDTO": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StoreViewDTO"
            }
          },
          "offset": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "count": {
            "type": "number"
          },
          "total": {
            "type": "number"
          }
        },
        "required": [
          "results",
          "offset",
          "limit",
          "count",
          "total"
        ]
      },
      "PaymentMethodDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 0
          },
          "authority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "PaymentServiceProvider",
              "CashOnDelivery"
            ],
            "type": "string"
          },
          "providerType": {
            "enum": [
              "Borica"
            ],
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "providerConfig": {
            "type": "object"
          }
        },
        "required": [
          "authority",
          "type",
          "providerType",
          "key",
          "countryCode",
          "currencyCode",
          "providerConfig"
        ]
      },
      "PaymentMethodDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 0
          },
          "authority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "PaymentServiceProvider",
              "CashOnDelivery"
            ],
            "type": "string"
          },
          "providerType": {
            "enum": [
              "Borica"
            ],
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "providerConfig": {
            "type": "object"
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "authority",
          "type",
          "providerType",
          "key",
          "countryCode",
          "currencyCode",
          "providerConfig",
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "SetCustomFieldDTO": {
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "type": "string",
            "enum": [
              "store",
              "address",
              "brand",
              "category",
              "collection",
              "view",
              "wallet",
              "wallet-type",
              "customer",
              "customer-group",
              "product-discount",
              "cart-discount",
              "discount-code",
              "item",
              "order",
              "payment",
              "merchant",
              "product",
              "shipping",
              "tax-category",
              "price-list",
              "shipping-method",
              "payment-method",
              "state",
              "cms-folder",
              "cms-type"
            ]
          },
          "fieldName": {
            "type": "string"
          },
          "fieldValue": {
            "type": "object"
          }
        },
        "required": [
          "resourceId",
          "resourceType",
          "fieldName",
          "fieldValue"
        ]
      },
      "Map": {
        "type": "object",
        "properties": {}
      },
      "CustomFieldValueDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/Map"
          }
        },
        "required": [
          "key",
          "label"
        ]
      },
      "CustomFieldDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "type": {
            "enum": [
              "string",
              "boolean",
              "number",
              "enum",
              "stringArray",
              "numberArray",
              "custom"
            ],
            "type": "string"
          },
          "resourceTypeId": {
            "enum": [
              "store",
              "address",
              "brand",
              "category",
              "collection",
              "view",
              "wallet",
              "wallet-type",
              "customer",
              "customer-group",
              "product-discount",
              "cart-discount",
              "discount-code",
              "item",
              "order",
              "payment",
              "merchant",
              "product",
              "shipping",
              "tax-category",
              "price-list",
              "shipping-method",
              "payment-method",
              "state",
              "cms-folder",
              "cms-type"
            ],
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "isRequired": {
            "type": "boolean"
          },
          "isSearchable": {
            "type": "boolean"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValueDTO"
            }
          },
          "defaultValue": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "type",
          "resourceTypeId",
          "name",
          "isRequired",
          "isSearchable"
        ]
      },
      "CustomFieldDraftDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string",
              "boolean",
              "number",
              "enum",
              "stringArray",
              "numberArray",
              "custom"
            ]
          },
          "resourceTypeId": {
            "type": "string",
            "enum": [
              "store",
              "address",
              "brand",
              "category",
              "collection",
              "view",
              "wallet",
              "wallet-type",
              "customer",
              "customer-group",
              "product-discount",
              "cart-discount",
              "discount-code",
              "item",
              "order",
              "payment",
              "merchant",
              "product",
              "shipping",
              "tax-category",
              "price-list",
              "shipping-method",
              "payment-method",
              "state",
              "cms-folder",
              "cms-type"
            ]
          },
          "name": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "isRequired": {
            "type": "boolean"
          },
          "isSearchable": {
            "type": "boolean"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValueDTO"
            }
          },
          "defaultValue": {
            "type": "object"
          }
        },
        "required": [
          "type",
          "resourceTypeId",
          "name",
          "isRequired",
          "isSearchable"
        ]
      },
      "CartDraftDTO": {
        "type": "object",
        "properties": {}
      },
      "AddressVerifiedDTO": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string"
          },
          "quarter": {
            "type": "string"
          },
          "streetName": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          }
        }
      },
      "AddressDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "quarter": {
            "type": "string"
          },
          "streetName": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "entrance": {
            "type": "string"
          },
          "floor": {
            "type": "string"
          },
          "apartment": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "companyId": {
            "type": "string"
          },
          "vatId": {
            "type": "string"
          },
          "additionalStreetInfo": {
            "type": "string"
          },
          "additionalAddressInfo": {
            "type": "string"
          },
          "isDefaultBillingAddress": {
            "type": "boolean"
          },
          "isDefaultShippingAddress": {
            "type": "boolean"
          },
          "verified": {
            "$ref": "#/components/schemas/AddressVerifiedDTO"
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "email",
          "phoneNumber",
          "countryCode",
          "city",
          "isDefaultBillingAddress",
          "isDefaultShippingAddress",
          "verified"
        ]
      },
      "LineItemStateForQuantityDTO": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number"
          },
          "state": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          }
        },
        "required": [
          "quantity",
          "state"
        ]
      },
      "OfferDTO": {
        "type": "object",
        "properties": {
          "isBest": {
            "type": "boolean"
          },
          "priceListKey": {
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "discountedPrice": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "unit": {
            "default": "item",
            "enum": [
              "g",
              "kg",
              "l",
              "ml",
              "item"
            ],
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "default": 1
          },
          "minQuantity": {
            "type": "number",
            "default": 1
          },
          "maxQuantity": {
            "type": "number",
            "default": 10
          },
          "step": {
            "type": "number",
            "default": 1
          },
          "sellUnit": {
            "default": "item",
            "enum": [
              "g",
              "kg",
              "l",
              "ml",
              "item"
            ],
            "type": "string"
          },
          "conversionRate": {
            "type": "number",
            "default": 1
          }
        },
        "required": [
          "isBest",
          "priceListKey",
          "merchantKey",
          "price",
          "unit",
          "quantity",
          "minQuantity",
          "maxQuantity",
          "step",
          "sellUnit",
          "conversionRate"
        ]
      },
      "InventoryDTO": {
        "type": "object",
        "properties": {
          "warehouseKey": {
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "quantityOnStock": {
            "type": "number"
          },
          "availableQuantity": {
            "type": "number"
          },
          "restockableInDays": {
            "type": "number"
          },
          "expectedNextDelivery": {
            "type": "number"
          }
        },
        "required": [
          "warehouseKey",
          "merchantKey",
          "quantityOnStock",
          "availableQuantity"
        ]
      },
      "ProductAttributeDTO": {
        "type": "object",
        "properties": {
          "attributeName": {
            "type": "string"
          },
          "value": {
            "type": "object"
          }
        },
        "required": [
          "attributeName",
          "value"
        ]
      },
      "ImageDTO": {
        "type": "object",
        "properties": {
          "width": {
            "type": "number"
          },
          "height": {
            "type": "number"
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "width",
          "height",
          "url"
        ]
      },
      "ImageSetDTO": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageDTO"
            }
          }
        },
        "required": [
          "images"
        ]
      },
      "ProductVariantDTO": {
        "type": "object",
        "properties": {
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferDTO"
            }
          },
          "id": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "masterBarcode": {
            "type": "string"
          },
          "barcodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "inventories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryDTO"
            }
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductAttributeDTO"
            }
          },
          "imageSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageSetDTO"
            }
          },
          "weight": {
            "type": "number",
            "default": 0
          },
          "unitOfWeight": {
            "default": "gr",
            "enum": [
              "gr",
              "oz"
            ],
            "type": "string"
          },
          "length": {
            "type": "number",
            "default": 0
          },
          "width": {
            "type": "number",
            "default": 0
          },
          "height": {
            "type": "number",
            "default": 0
          },
          "unitOfMetric": {
            "default": "cm",
            "enum": [
              "cm",
              "inch"
            ],
            "type": "string"
          }
        },
        "required": [
          "offers",
          "id",
          "sku",
          "barcodes",
          "inventories",
          "attributes",
          "imageSets"
        ]
      },
      "TaxedItemPriceDTO": {
        "type": "object",
        "properties": {
          "totalNet": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "totalGross": {
            "$ref": "#/components/schemas/MoneyDTO"
          }
        },
        "required": [
          "totalNet",
          "totalGross"
        ]
      },
      "DiscountedLineItemPortionDTO": {
        "type": "object",
        "properties": {
          "discount": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "discountedAmount": {
            "$ref": "#/components/schemas/MoneyDTO"
          }
        },
        "required": [
          "discount",
          "discountedAmount"
        ]
      },
      "DiscountedLineItemPriceDTO": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "includedDiscounts": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountedLineItemPortionDTO"
            }
          }
        },
        "required": [
          "value",
          "includedDiscounts"
        ]
      },
      "DiscountedLineItemPriceForQuantity": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number"
          },
          "discountedPrice": {
            "$ref": "#/components/schemas/DiscountedLineItemPriceDTO"
          }
        },
        "required": [
          "quantity",
          "discountedPrice"
        ]
      },
      "ItemShippingTargetDTO": {
        "type": "object",
        "properties": {
          "addressKey": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          }
        },
        "required": [
          "addressKey",
          "quantity"
        ]
      },
      "ItemShippingDetailsDTO": {
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean"
          },
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemShippingTargetDTO"
            }
          }
        },
        "required": [
          "valid",
          "targets"
        ]
      },
      "LineItemDTO": {
        "type": "object",
        "properties": {
          "updatedAt": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "states": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemStateForQuantityDTO"
            }
          },
          "productId": {
            "type": "string"
          },
          "productName": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "productSlug": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "productThumbnailUrl": {
            "type": "string"
          },
          "productCategories": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "productBrands": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "productCollections": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "productTaxCategory": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "variant": {
            "$ref": "#/components/schemas/ProductVariantDTO"
          },
          "offer": {
            "$ref": "#/components/schemas/OfferDTO"
          },
          "quantity": {
            "type": "number"
          },
          "taxedPrice": {
            "$ref": "#/components/schemas/TaxedItemPriceDTO"
          },
          "taxRate": {
            "$ref": "#/components/schemas/TaxRateDTO"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "discountedPricePerQuantity": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountedLineItemPriceForQuantity"
            }
          },
          "lineItemMode": {
            "enum": [
              "Standard",
              "Gift"
            ],
            "type": "string"
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/ItemShippingDetailsDTO"
          }
        },
        "required": [
          "updatedAt",
          "id",
          "states",
          "productId",
          "productName",
          "productSlug",
          "productThumbnailUrl",
          "productTaxCategory",
          "variant",
          "offer",
          "quantity",
          "lineItemMode"
        ]
      },
      "MerchantPriceDTO": {
        "type": "object",
        "properties": {
          "merchantKey": {
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/MoneyDTO"
          }
        },
        "required": [
          "merchantKey",
          "price"
        ]
      },
      "TaxPortionDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "rate": {
            "type": "number"
          },
          "amount": {
            "$ref": "#/components/schemas/MoneyDTO"
          }
        },
        "required": [
          "name",
          "rate",
          "amount"
        ]
      },
      "TaxedPriceDTO": {
        "type": "object",
        "properties": {
          "totalNet": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "totalGross": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "taxPortions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxPortionDTO"
            }
          }
        },
        "required": [
          "totalNet",
          "totalGross",
          "taxPortions"
        ]
      },
      "MerchantTaxedPriceDTO": {
        "type": "object",
        "properties": {
          "merchantKey": {
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/TaxedPriceDTO"
          }
        },
        "required": [
          "merchantKey",
          "price"
        ]
      },
      "MerchantWeightDTO": {
        "type": "object",
        "properties": {
          "merchantKey": {
            "type": "string"
          },
          "totalWeightInGrams": {
            "type": "number"
          }
        },
        "required": [
          "merchantKey",
          "totalWeightInGrams"
        ]
      },
      "DiscountCodeInfoDTO": {
        "type": "object",
        "properties": {
          "authority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "discountCode": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "status": {
            "enum": [
              "NotActive",
              "NotValid",
              "DoesNotMatchCart",
              "MatchesCart",
              "MaxApplicationReached",
              "ApplicationStoppedByPreviousDiscount"
            ],
            "type": "string"
          }
        },
        "required": [
          "authority",
          "discountCode",
          "status"
        ]
      },
      "DiscountPortionDTO": {
        "type": "object",
        "properties": {
          "discount": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "discountedAmount": {
            "$ref": "#/components/schemas/MoneyDTO"
          }
        },
        "required": [
          "discount",
          "discountedAmount"
        ]
      },
      "SubtotalDiscountDTO": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "includedDiscounts": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountPortionDTO"
            }
          }
        },
        "required": [
          "value",
          "includedDiscounts"
        ]
      },
      "OrderWalletDTO": {
        "type": "object",
        "properties": {
          "wallet": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "discount": {
            "$ref": "#/components/schemas/MoneyDTO"
          }
        },
        "required": [
          "wallet"
        ]
      },
      "MerchantMethodDTO": {
        "type": "object",
        "properties": {
          "merchant": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "method": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          }
        },
        "required": [
          "merchant",
          "method"
        ]
      },
      "ShippingDeliveryItemDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "quantity"
        ]
      },
      "ShippingParcelMeasurementDTO": {
        "type": "object",
        "properties": {
          "heightInMillimeter": {
            "type": "number",
            "default": null
          },
          "lengthInMillimeter": {
            "type": "number",
            "default": null
          },
          "widthInMillimeter": {
            "type": "number",
            "default": null
          },
          "weightInGram": {
            "type": "number"
          }
        },
        "required": [
          "weightInGram"
        ]
      },
      "ShippingParcelTrackingDataDTO": {
        "type": "object",
        "properties": {
          "checkId": {
            "type": "string"
          },
          "trackingId": {
            "type": "string"
          },
          "carrier": {
            "type": "string"
          },
          "provider": {
            "type": "string"
          },
          "providerTransaction": {
            "type": "string"
          },
          "isReturn": {
            "type": "boolean"
          }
        }
      },
      "ShippingDeliveryParcelDTO": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "status": {
            "enum": [
              "Initial",
              "Pending",
              "Delayed",
              "Partial",
              "Shipped",
              "BackOrder"
            ],
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDeliveryItemDTO"
            }
          },
          "measurements": {
            "$ref": "#/components/schemas/ShippingParcelMeasurementDTO"
          },
          "trackingData": {
            "$ref": "#/components/schemas/ShippingParcelTrackingDataDTO"
          },
          "providerPayload": {
            "type": "object"
          },
          "providerMeta": {
            "type": "object"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "id",
          "status",
          "items",
          "measurements",
          "trackingData"
        ]
      },
      "ShippingDeliveryDTO": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "parcels": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDeliveryParcelDTO"
            }
          },
          "status": {
            "enum": [
              "Initial",
              "Pending",
              "Delayed",
              "Partial",
              "Shipped",
              "BackOrder"
            ],
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDeliveryItemDTO"
            }
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "id",
          "status",
          "address",
          "items"
        ]
      },
      "ShippingInterfaceInteractionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "interactionPayload": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "createdAt",
          "interactionPayload"
        ]
      },
      "ShippingDTO": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "status": {
            "enum": [
              "Initial",
              "Pending",
              "Delayed",
              "Partial",
              "Shipped",
              "BackOrder"
            ],
            "type": "string"
          },
          "method": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "type": {
            "enum": [
              "ShippingServiceProvider"
            ],
            "type": "string"
          },
          "authority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "merchant": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "providerType": {
            "enum": [
              "Speedy",
              "Econt",
              "Custom"
            ],
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "taxedPrice": {
            "$ref": "#/components/schemas/TaxedPriceDTO"
          },
          "taxCategory": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "taxRate": {
            "$ref": "#/components/schemas/TaxRateDTO"
          },
          "discountedPrice": {
            "$ref": "#/components/schemas/DiscountedLineItemPriceDTO"
          },
          "isCOD": {
            "type": "boolean",
            "default": false
          },
          "codPrice": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "codNetPrice": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "codDiscount": {
            "$ref": "#/components/schemas/DiscountedLineItemPriceDTO"
          },
          "codTaxedPrice": {
            "$ref": "#/components/schemas/TaxedPriceDTO"
          },
          "paymentId": {
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDeliveryItemDTO"
            }
          },
          "deliveries": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDeliveryDTO"
            }
          },
          "interfaceInteractions": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingInterfaceInteractionDTO"
            }
          }
        },
        "required": [
          "status",
          "method",
          "type",
          "authority",
          "taxCategory",
          "taxRate",
          "items"
        ]
      },
      "OrderDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "version": {
            "type": "number"
          },
          "status": {
            "enum": [
              "Draft",
              "Open",
              "Confirmed",
              "Complete",
              "Cancelled"
            ],
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "note": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "taxIncluded": {
            "type": "boolean"
          },
          "languageCode": {
            "type": "string"
          },
          "priceList": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "orderNumber": {
            "type": "number"
          },
          "store": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "taxRoundingMode": {
            "default": "HalfEven",
            "enum": [
              "HalfEven",
              "HalfUp",
              "HalfDown"
            ],
            "type": "string"
          },
          "taxCalculationMode": {
            "default": "LineItemLevel",
            "enum": [
              "LineItemLevel",
              "UnitPriceLevel"
            ],
            "type": "string"
          },
          "inventoryMode": {
            "default": "None",
            "enum": [
              "TrackOnly",
              "ReserveOnOrder",
              "None"
            ],
            "type": "string"
          },
          "draftInventoryMode": {
            "default": "None",
            "enum": [
              "TrackOnly",
              "ReserveOnOrder",
              "None"
            ],
            "type": "string"
          },
          "deleteDaysAfterDraftLastModification": {
            "type": "number"
          },
          "customerId": {
            "type": "string"
          },
          "customerFirstName": {
            "type": "string"
          },
          "customerLastName": {
            "type": "string"
          },
          "customerFullName": {
            "type": "string"
          },
          "customerPhone": {
            "type": "string"
          },
          "customerEmail": {
            "type": "string"
          },
          "customerGroup": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "anonymousId": {
            "type": "string"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "itemShippingAddresses": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressDTO"
            }
          },
          "lineItems": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemDTO"
            }
          },
          "lineItemsCount": {
            "type": "number",
            "default": 0
          },
          "merchants": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyReferenceDTO"
            }
          },
          "merchantsTotalPrices": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantPriceDTO"
            }
          },
          "grandTotalPrice": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "merchantsTaxedPrices": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantTaxedPriceDTO"
            }
          },
          "grandTaxedPrice": {
            "$ref": "#/components/schemas/TaxedPriceDTO"
          },
          "merchantTotalWeights": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantWeightDTO"
            }
          },
          "totalWeightInGrams": {
            "type": "number",
            "default": 0
          },
          "discountCodes": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountCodeInfoDTO"
            }
          },
          "subtotal": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "discountedSubtotal": {
            "$ref": "#/components/schemas/SubtotalDiscountDTO"
          },
          "wallet": {
            "$ref": "#/components/schemas/OrderWalletDTO"
          },
          "payments": {
            "default": [],
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "paymentsAuthority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "merchantPaymentMethods": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantMethodDTO"
            }
          },
          "platformPaymentMethod": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "shippings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDTO"
            }
          },
          "shippingsAuthority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "merchantShippingMethods": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantMethodDTO"
            }
          },
          "platformShippingMethod": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "version",
          "status",
          "countryCode",
          "currencyCode",
          "taxIncluded",
          "priceList",
          "orderNumber",
          "store",
          "shippingAddress",
          "billingAddress",
          "lineItems",
          "lineItemsCount",
          "merchantsTotalPrices",
          "grandTotalPrice",
          "merchantsTaxedPrices",
          "merchantTotalWeights",
          "totalWeightInGrams",
          "discountCodes",
          "payments",
          "shippings"
        ]
      },
      "ItemShippingDetailsDraftDTO": {
        "type": "object",
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemShippingTargetDTO"
            }
          }
        },
        "required": [
          "targets"
        ]
      },
      "LineItemDraftDTO": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "variantId": {
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "default": 1
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/ItemShippingDetailsDraftDTO"
          }
        },
        "required": [
          "productId",
          "variantId",
          "merchantKey",
          "quantity"
        ]
      },
      "QuantityUpdateDTO": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number"
          }
        },
        "required": [
          "quantity"
        ]
      },
      "DiscountCodeUpdateDTO": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          }
        },
        "required": [
          "code"
        ]
      },
      "ShippingAddressDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "quarter": {
            "type": "string"
          },
          "streetName": {
            "type": "string"
          },
          "streetNumber": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "building": {
            "type": "string"
          },
          "entrance": {
            "type": "string"
          },
          "floor": {
            "type": "string"
          },
          "apartment": {
            "type": "string"
          },
          "companyName": {
            "type": "string"
          },
          "companyId": {
            "type": "string"
          },
          "vatId": {
            "type": "string"
          },
          "additionalStreetInfo": {
            "type": "string"
          },
          "additionalAddressInfo": {
            "type": "string"
          },
          "isDefaultBillingAddress": {
            "type": "boolean"
          },
          "isDefaultShippingAddress": {
            "type": "boolean"
          },
          "verified": {
            "$ref": "#/components/schemas/AddressVerifiedDTO"
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "email",
          "phoneNumber",
          "countryCode",
          "city",
          "isDefaultBillingAddress",
          "isDefaultShippingAddress",
          "verified"
        ]
      },
      "MerchantShippingMethodsInfoDTO": {
        "type": "object",
        "properties": {
          "merchant": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingMethodDTO"
            }
          }
        },
        "required": [
          "merchant",
          "methods"
        ]
      },
      "ShippingMethodsInfo": {
        "type": "object",
        "properties": {
          "platformShippingMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingMethodDTO"
            }
          },
          "merchantsShippingMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantShippingMethodsInfoDTO"
            }
          }
        },
        "required": [
          "platformShippingMethods",
          "merchantsShippingMethods"
        ]
      },
      "MerchantPaymentMethodsInfoDTO": {
        "type": "object",
        "properties": {
          "merchant": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodDTO"
            }
          }
        },
        "required": [
          "merchant",
          "methods"
        ]
      },
      "PaymentMethodsInfo": {
        "type": "object",
        "properties": {
          "platformPaymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodDTO"
            }
          },
          "merchantsPaymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantPaymentMethodsInfoDTO"
            }
          }
        },
        "required": [
          "platformPaymentMethods",
          "merchantsPaymentMethods"
        ]
      },
      "PlatformMethodUpdateDTO": {
        "type": "object",
        "properties": {
          "method": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          }
        },
        "required": [
          "method"
        ]
      },
      "MerchantsMethodsUpdateDTO": {
        "type": "object",
        "properties": {
          "methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantMethodDTO"
            }
          }
        },
        "required": [
          "methods"
        ]
      },
      "MakePaymentResponse": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string"
          },
          "providerPayload": {
            "type": "object"
          }
        },
        "required": [
          "orderId",
          "providerPayload"
        ]
      },
      "MakePaymentInteractionDTO": {
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "GenerateUrl",
              "VerifyResult",
              "Return"
            ],
            "type": "string"
          },
          "payload": {
            "type": "object"
          }
        },
        "required": [
          "type",
          "payload"
        ]
      },
      "VerifyPaymentResultRequest": {
        "type": "object",
        "properties": {
          "authority": {
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "providerType": {
            "type": "string"
          },
          "responseMessage": {
            "type": "string"
          },
          "interaction": {
            "$ref": "#/components/schemas/MakePaymentInteractionDTO"
          }
        },
        "required": [
          "authority",
          "providerType",
          "responseMessage",
          "interaction"
        ]
      },
      "LineItemImportDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemStateForQuantityDTO"
            }
          },
          "productId": {
            "type": "string"
          },
          "productName": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "productSlug": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "productThumbnailUrl": {
            "type": "string"
          },
          "productCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "productBrands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "productCollections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "productTaxCategory": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "variant": {
            "$ref": "#/components/schemas/ProductVariantDTO"
          },
          "offer": {
            "$ref": "#/components/schemas/OfferDTO"
          },
          "quantity": {
            "type": "number"
          },
          "taxedPrice": {
            "$ref": "#/components/schemas/TaxedItemPriceDTO"
          },
          "taxRate": {
            "$ref": "#/components/schemas/TaxRateDTO"
          },
          "totalPrice": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "discountedPricePerQuantity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountedLineItemPriceForQuantity"
            }
          },
          "lineItemMode": {
            "type": "string",
            "enum": [
              "Standard",
              "Gift"
            ]
          },
          "shippingDetails": {
            "$ref": "#/components/schemas/ItemShippingDetailsDTO"
          }
        },
        "required": [
          "states",
          "productId",
          "offer",
          "quantity",
          "lineItemMode"
        ]
      },
      "OrderImportDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "version": {
            "type": "number"
          },
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Open",
              "Confirmed",
              "Complete",
              "Cancelled"
            ]
          },
          "state": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "countryCode": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "taxIncluded": {
            "type": "boolean"
          },
          "languageCode": {
            "type": "string"
          },
          "priceList": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "orderNumber": {
            "type": "number"
          },
          "store": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "taxRoundingMode": {
            "type": "string",
            "default": "HalfEven",
            "enum": [
              "HalfEven",
              "HalfUp",
              "HalfDown"
            ]
          },
          "taxCalculationMode": {
            "type": "string",
            "default": "LineItemLevel",
            "enum": [
              "LineItemLevel",
              "UnitPriceLevel"
            ]
          },
          "inventoryMode": {
            "type": "string",
            "default": "None",
            "enum": [
              "TrackOnly",
              "ReserveOnOrder",
              "None"
            ]
          },
          "draftInventoryMode": {
            "type": "string",
            "default": "None",
            "enum": [
              "TrackOnly",
              "ReserveOnOrder",
              "None"
            ]
          },
          "customerId": {
            "type": "string"
          },
          "customerFirstName": {
            "type": "string"
          },
          "customerLastName": {
            "type": "string"
          },
          "customerFullName": {
            "type": "string"
          },
          "customerPhone": {
            "type": "string"
          },
          "customerEmail": {
            "type": "string"
          },
          "customerGroup": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "anonymousId": {
            "type": "string"
          },
          "shippingAddress": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "lineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineItemImportDTO"
            }
          },
          "merchants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyReferenceDTO"
            }
          },
          "merchantsTotalPrices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantPriceDTO"
            }
          },
          "grandTotalPrice": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "merchantsTaxedPrices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantTaxedPriceDTO"
            }
          },
          "grandTaxedPrice": {
            "$ref": "#/components/schemas/TaxedPriceDTO"
          },
          "discountCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountCodeInfoDTO"
            }
          },
          "wallet": {
            "$ref": "#/components/schemas/OrderWalletDTO"
          },
          "payments": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "paymentsAuthority": {
            "type": "string",
            "enum": [
              "Platform",
              "Merchant"
            ]
          },
          "merchantPaymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantMethodDTO"
            }
          },
          "platformPaymentMethod": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "shippings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDTO"
            }
          },
          "shippingsAuthority": {
            "type": "string",
            "enum": [
              "Platform",
              "Merchant"
            ]
          },
          "merchantShippingMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MerchantMethodDTO"
            }
          },
          "platformShippingMethod": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          }
        },
        "required": [
          "createdAt",
          "updatedAt",
          "version",
          "status",
          "countryCode",
          "currencyCode",
          "taxIncluded",
          "priceList",
          "orderNumber",
          "store",
          "shippingAddress",
          "billingAddress",
          "lineItems",
          "merchants",
          "merchantsTotalPrices",
          "grandTotalPrice",
          "merchantsTaxedPrices",
          "discountCodes",
          "payments",
          "shippings"
        ]
      },
      "TransitionOrderStateDTO": {
        "type": "object",
        "properties": {
          "toState": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          }
        },
        "required": [
          "toState"
        ]
      },
      "OrderNoteUpdateDTO": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string"
          }
        },
        "required": [
          "note"
        ]
      },
      "OrderStatusUpdateDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Draft",
              "Open",
              "Confirmed",
              "Complete",
              "Cancelled"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "TransitionLineItemQuantityState": {
        "type": "object",
        "properties": {
          "quantity": {
            "type": "number"
          },
          "lineItemId": {
            "type": "string"
          },
          "fromState": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "toState": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          }
        },
        "required": [
          "quantity",
          "lineItemId",
          "fromState",
          "toState"
        ]
      },
      "ShippingStatusUpdateDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Initial",
              "Pending",
              "Delayed",
              "Partial",
              "Shipped",
              "BackOrder"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "ShippingDeliveryDraftDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Initial",
              "Pending",
              "Delayed",
              "Partial",
              "Shipped",
              "BackOrder"
            ]
          },
          "address": {
            "$ref": "#/components/schemas/AddressDTO"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDeliveryItemDTO"
            }
          }
        },
        "required": [
          "status",
          "address",
          "items"
        ]
      },
      "ShippingDeliveryParcelDraftDTO": {
        "type": "object",
        "properties": {
          "status": {
            "enum": [
              "Initial",
              "Pending",
              "Delayed",
              "Partial",
              "Shipped",
              "BackOrder"
            ],
            "type": "string"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShippingDeliveryItemDTO"
            }
          },
          "measurements": {
            "$ref": "#/components/schemas/ShippingParcelMeasurementDTO"
          },
          "trackingData": {
            "$ref": "#/components/schemas/ShippingParcelTrackingDataDTO"
          },
          "providerPayload": {
            "type": "object"
          },
          "providerMeta": {
            "type": "object"
          }
        },
        "required": [
          "status",
          "items",
          "measurements",
          "trackingData"
        ]
      },
      "ShippingInterfaceInteractionDraftDTO": {
        "type": "object",
        "properties": {
          "interactionPayload": {
            "type": "object"
          }
        },
        "required": [
          "interactionPayload"
        ]
      },
      "MakeShippingInteractionDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "CreateShipping",
              "CheckShipping",
              "SendShipping",
              "TrackShipping"
            ]
          },
          "payload": {
            "type": "object"
          }
        },
        "required": [
          "type",
          "payload"
        ]
      },
      "PaymentStatusUpdateDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Initial",
              "Pending",
              "Success",
              "Failure"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "PaymentTransactionDraftDTO": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "object"
          },
          "status": {
            "type": "string",
            "enum": [
              "Initial",
              "Pending",
              "Success",
              "Failure"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "Authorization",
              "CancelAuthorization",
              "Charge",
              "Refund",
              "ChargeBack"
            ]
          },
          "amount": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "transactionNumber": {
            "type": "string"
          },
          "providerPayload": {
            "type": "object"
          }
        },
        "required": [
          "type",
          "amount",
          "transactionNumber"
        ]
      },
      "PaymentInterfaceInteractionDraftDTO": {
        "type": "object",
        "properties": {
          "interactionPayload": {
            "type": "object"
          }
        },
        "required": [
          "interactionPayload"
        ]
      },
      "WishListDraftDTO": {
        "type": "object",
        "properties": {
          "priceList": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "store": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "customerId": {
            "type": "string"
          },
          "anonymousId": {
            "type": "string"
          }
        },
        "required": [
          "priceList",
          "store"
        ]
      },
      "ContentDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "type": {
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/LocalizedString"
          }
        },
        "required": [
          "key",
          "type"
        ]
      },
      "AssetSourceDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "width": {
            "type": "number"
          },
          "height": {
            "type": "number"
          },
          "contentType": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "AssetDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "link": {
            "type": "string"
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetSourceDTO"
            }
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "sources"
        ]
      },
      "ProductDataDTO": {
        "type": "object",
        "properties": {
          "taxCategory": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "weight": {
            "type": "number"
          },
          "contents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentDTO"
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "masterCategoriesPath": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "brands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDTO"
            }
          },
          "slug": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaTitle": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaDescription": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaKeywords": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "masterVariantId": {
            "type": "string"
          },
          "variants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDTO"
            }
          },
          "metadata": {
            "type": "object"
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "taxCategory",
          "name",
          "description",
          "weight",
          "contents",
          "slug"
        ]
      },
      "ReviewRatingStatisticsDTO": {
        "type": "object",
        "properties": {
          "averageRating": {
            "type": "number"
          },
          "highestRating": {
            "type": "number"
          },
          "lowestRating": {
            "type": "number"
          },
          "count": {
            "type": "number"
          },
          "ratingsDistribution": {
            "type": "string"
          }
        },
        "required": [
          "averageRating",
          "highestRating",
          "lowestRating",
          "count",
          "ratingsDistribution"
        ]
      },
      "ProductDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number"
          },
          "id": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "status": {
            "enum": [
              "published",
              "unpublished",
              "delisted"
            ],
            "type": "string"
          },
          "liveData": {
            "$ref": "#/components/schemas/ProductDataDTO"
          },
          "reviewRatingStatistics": {
            "$ref": "#/components/schemas/ReviewRatingStatisticsDTO"
          }
        },
        "required": [
          "version",
          "id",
          "externalId",
          "createdAt",
          "updatedAt",
          "status",
          "liveData"
        ]
      },
      "WishListDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "priceList": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "store": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "customerId": {
            "type": "string"
          },
          "anonymousId": {
            "type": "string"
          },
          "products": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductDTO"
            }
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "priceList",
          "store",
          "products"
        ]
      },
      "ProductDiscountValueDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "permyriad": {
            "type": "number"
          },
          "money": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoneyDTO"
            }
          }
        },
        "required": [
          "type",
          "permyriad",
          "money"
        ]
      },
      "ProductDiscountDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "authority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "value": {
            "$ref": "#/components/schemas/ProductDiscountValueDTO"
          },
          "predicate": {
            "type": "string"
          },
          "sortOrder": {
            "type": "number"
          },
          "isActive": {
            "type": "boolean"
          },
          "validFrom": {
            "type": "number"
          },
          "validTo": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "authority",
          "name",
          "value",
          "predicate",
          "sortOrder",
          "isActive"
        ]
      },
      "ProductDiscountDraftDTO": {
        "type": "object",
        "properties": {
          "authority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "value": {
            "$ref": "#/components/schemas/ProductDiscountValueDTO"
          },
          "predicate": {
            "type": "string"
          },
          "sortOrder": {
            "type": "number"
          },
          "isActive": {
            "type": "boolean"
          },
          "validFrom": {
            "type": "number"
          },
          "validTo": {
            "type": "number"
          }
        },
        "required": [
          "authority",
          "name",
          "value",
          "predicate",
          "sortOrder",
          "isActive"
        ]
      },
      "CartDiscountValueDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "permyriad": {
            "type": "number"
          },
          "money": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoneyDTO"
            }
          },
          "product": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "variantId": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          }
        },
        "required": [
          "type"
        ]
      },
      "CartDiscountTargetDTO": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "predicate": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "predicate"
        ]
      },
      "CartDiscountDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "authority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "value": {
            "$ref": "#/components/schemas/CartDiscountValueDTO"
          },
          "cartPredicate": {
            "type": "string"
          },
          "target": {
            "$ref": "#/components/schemas/CartDiscountTargetDTO"
          },
          "sortOrder": {
            "type": "number"
          },
          "isActive": {
            "type": "boolean"
          },
          "validFrom": {
            "type": "number"
          },
          "validTo": {
            "type": "number"
          },
          "requiresDiscountCode": {
            "type": "boolean"
          },
          "stackingMode": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "authority",
          "name",
          "value",
          "cartPredicate",
          "sortOrder",
          "isActive",
          "requiresDiscountCode",
          "stackingMode"
        ]
      },
      "CartDiscountDraftDTO": {
        "type": "object",
        "properties": {
          "authority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "value": {
            "$ref": "#/components/schemas/CartDiscountValueDTO"
          },
          "cartPredicate": {
            "type": "string"
          },
          "target": {
            "$ref": "#/components/schemas/CartDiscountTargetDTO"
          },
          "sortOrder": {
            "type": "number"
          },
          "isActive": {
            "type": "boolean"
          },
          "validFrom": {
            "type": "number"
          },
          "validTo": {
            "type": "number"
          },
          "requiresDiscountCode": {
            "type": "boolean"
          },
          "stackingMode": {
            "type": "string"
          }
        },
        "required": [
          "authority",
          "name",
          "value",
          "cartPredicate",
          "sortOrder",
          "isActive",
          "requiresDiscountCode",
          "stackingMode"
        ]
      },
      "DiscountCodeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "authority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "code": {
            "type": "string"
          },
          "cartDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "cartPredicate": {
            "type": "string"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean"
          },
          "validFrom": {
            "type": "number"
          },
          "validTo": {
            "type": "number"
          },
          "maxApplications": {
            "type": "number"
          },
          "maxApplicationsPerCustomer": {
            "type": "number"
          },
          "totalApplications": {
            "type": "number",
            "default": 0
          },
          "applicationsPerCustomer": {
            "default": {},
            "type": "object"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "authority",
          "name",
          "code",
          "cartDiscounts",
          "cartPredicate",
          "groups",
          "isActive",
          "totalApplications",
          "applicationsPerCustomer"
        ]
      },
      "DiscountCodeDraftDTO": {
        "type": "object",
        "properties": {
          "authority": {
            "enum": [
              "Platform",
              "Merchant"
            ],
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "code": {
            "type": "string"
          },
          "cartDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "cartPredicate": {
            "type": "string"
          },
          "groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "isActive": {
            "type": "boolean"
          },
          "validFrom": {
            "type": "number"
          },
          "validTo": {
            "type": "number"
          },
          "maxApplications": {
            "type": "number"
          },
          "maxApplicationsPerCustomer": {
            "type": "number"
          },
          "totalApplications": {
            "type": "number",
            "default": 0
          },
          "applicationsPerCustomer": {
            "default": {},
            "type": "object"
          }
        },
        "required": [
          "authority",
          "name",
          "code",
          "cartDiscounts",
          "cartPredicate",
          "groups",
          "isActive",
          "totalApplications",
          "applicationsPerCustomer"
        ]
      },
      "AttributeValueDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/LocalizedString"
          }
        },
        "required": [
          "key",
          "label"
        ]
      },
      "AttributeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "isSearchable": {
            "type": "boolean",
            "default": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeValueDTO"
            }
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "label"
        ]
      },
      "AttributeDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "type": "string"
          },
          "label": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "isSearchable": {
            "type": "boolean",
            "default": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeValueDTO"
            }
          }
        },
        "required": [
          "name",
          "label"
        ]
      },
      "CategoryDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "parent": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "alias": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "weight": {
            "type": "number"
          },
          "status": {
            "enum": [
              "published",
              "unpublished",
              "delisted"
            ],
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDTO"
            }
          },
          "slug": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaTitle": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaDescription": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaKeywords": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "custom": {
            "type": "object"
          },
          "externalId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "weight",
          "status",
          "slug"
        ]
      },
      "CategoryDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "weight": {
            "type": "number"
          },
          "parent": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "alias": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "status": {
            "enum": [
              "published",
              "unpublished",
              "delisted"
            ],
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDTO"
            }
          },
          "slug": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaTitle": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaDescription": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaKeywords": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "custom": {
            "type": "object"
          },
          "externalId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "weight",
          "status",
          "slug"
        ]
      },
      "BrandDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "parent": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "weight": {
            "type": "number"
          },
          "status": {
            "enum": [
              "published",
              "unpublished",
              "delisted"
            ],
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDTO"
            }
          },
          "slug": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaTitle": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaDescription": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaKeywords": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "externalId": {
            "type": "string"
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "weight",
          "status",
          "slug"
        ]
      },
      "BrandDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "weight": {
            "type": "number"
          },
          "parent": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "ancestors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "status": {
            "enum": [
              "published",
              "unpublished",
              "delisted"
            ],
            "type": "string"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDTO"
            }
          },
          "slug": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaTitle": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaDescription": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaKeywords": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "externalId": {
            "type": "string"
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "weight",
          "status",
          "slug"
        ]
      },
      "BrandStatusUpdateDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "published",
              "unpublished",
              "delisted"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "SynonymDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "tokens": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "tokens"
        ]
      },
      "SynonymDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "tokens": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "_id": {
            "type": "object"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "tokens",
          "_id",
          "createdAt",
          "updatedAt"
        ]
      },
      "CollectionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "validFrom": {
            "type": "number"
          },
          "validTo": {
            "type": "number"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDTO"
            }
          },
          "slug": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaTitle": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaDescription": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaKeywords": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "custom": {
            "type": "object"
          },
          "externalId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "slug"
        ]
      },
      "CollectionDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "validFrom": {
            "type": "number"
          },
          "validTo": {
            "type": "number"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDTO"
            }
          },
          "slug": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaTitle": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaDescription": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaKeywords": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "custom": {
            "type": "object"
          },
          "externalId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "slug"
        ]
      },
      "FilterStateDTO": {
        "type": "object",
        "properties": {
          "operator": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "field": {
            "type": "string"
          },
          "componentId": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "operator",
          "label",
          "field",
          "componentId",
          "values"
        ]
      },
      "ViewDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterStateDTO"
            }
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDTO"
            }
          },
          "slug": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaTitle": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaDescription": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaKeywords": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "name",
          "filters",
          "slug"
        ]
      },
      "ViewDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterStateDTO"
            }
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDTO"
            }
          },
          "slug": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaTitle": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaDescription": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaKeywords": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "filters",
          "slug"
        ]
      },
      "MerchantDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "version": {
            "type": "number",
            "default": 0
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "key"
        ]
      },
      "MerchantDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 0
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ]
      },
      "PriceListDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "taxIncluded": {
            "type": "boolean"
          }
        },
        "required": [
          "key",
          "countryCode",
          "currencyCode",
          "taxIncluded"
        ]
      },
      "PriceListDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "taxIncluded": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "key",
          "countryCode",
          "currencyCode",
          "taxIncluded",
          "id",
          "createdAt",
          "updatedAt"
        ]
      },
      "BulkLinkUpdateDTO": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "linkType": {
            "enum": [
              "store",
              "address",
              "brand",
              "category",
              "collection",
              "view",
              "wallet",
              "wallet-type",
              "customer",
              "customer-group",
              "product-discount",
              "cart-discount",
              "discount-code",
              "item",
              "order",
              "payment",
              "merchant",
              "product",
              "shipping",
              "tax-category",
              "price-list",
              "shipping-method",
              "payment-method",
              "state",
              "cms-folder",
              "cms-type"
            ],
            "type": "string"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          }
        },
        "required": [
          "filters",
          "linkType",
          "links"
        ]
      },
      "BulkDeleteDTO": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "ids"
        ]
      },
      "BulkStatusChangeDTO": {
        "type": "object",
        "properties": {
          "filters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "published",
              "unpublished",
              "delisted"
            ]
          }
        },
        "required": [
          "filters",
          "status"
        ]
      },
      "OfferDraftDTO": {
        "type": "object",
        "properties": {
          "priceListKey": {
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "discountedPrice": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "unit": {
            "default": "item",
            "enum": [
              "g",
              "kg",
              "l",
              "ml",
              "item"
            ],
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "default": 1
          },
          "minQuantity": {
            "type": "number",
            "default": 1
          },
          "maxQuantity": {
            "type": "number",
            "default": 10
          },
          "step": {
            "type": "number",
            "default": 1
          },
          "sellUnit": {
            "default": "item",
            "enum": [
              "g",
              "kg",
              "l",
              "ml",
              "item"
            ],
            "type": "string"
          },
          "conversionRate": {
            "type": "number",
            "default": 1
          }
        },
        "required": [
          "priceListKey",
          "merchantKey",
          "price",
          "unit",
          "quantity",
          "minQuantity",
          "maxQuantity",
          "step",
          "sellUnit",
          "conversionRate"
        ]
      },
      "ProductVariantDraftDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sku": {
            "type": "string"
          },
          "masterBarcode": {
            "type": "string"
          },
          "barcodes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferDraftDTO"
            }
          },
          "inventories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InventoryDTO"
            }
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductAttributeDTO"
            }
          },
          "imageSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageSetDTO"
            }
          },
          "weight": {
            "type": "number",
            "default": 0
          },
          "unitOfWeight": {
            "default": "gr",
            "enum": [
              "gr",
              "oz"
            ],
            "type": "string"
          },
          "length": {
            "type": "number",
            "default": 0
          },
          "width": {
            "type": "number",
            "default": 0
          },
          "height": {
            "type": "number",
            "default": 0
          },
          "unitOfMetric": {
            "default": "cm",
            "enum": [
              "cm",
              "inch"
            ],
            "type": "string"
          }
        },
        "required": [
          "id",
          "sku",
          "barcodes",
          "offers",
          "inventories",
          "attributes",
          "imageSets"
        ]
      },
      "ProductDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "taxCategory": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "name": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "description": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "weight": {
            "type": "number"
          },
          "contents": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentDTO"
            }
          },
          "categories": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "masterCategoriesPath": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "brands": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "collections": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "status": {
            "enum": [
              "published",
              "unpublished",
              "delisted"
            ],
            "type": "string"
          },
          "reviewRatingStatistics": {
            "$ref": "#/components/schemas/ReviewRatingStatisticsDTO"
          },
          "assets": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetDTO"
            }
          },
          "slug": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaTitle": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaDescription": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "metaKeywords": {
            "$ref": "#/components/schemas/LocalizedString"
          },
          "masterVariantId": {
            "type": "string"
          },
          "variants": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantDraftDTO"
            }
          },
          "metadata": {
            "type": "object"
          },
          "custom": {
            "type": "object"
          },
          "externalId": {
            "type": "string"
          }
        },
        "required": [
          "taxCategory",
          "name",
          "description",
          "weight",
          "contents",
          "status",
          "slug"
        ]
      },
      "OfferUpdateDTO": {
        "type": "object",
        "properties": {
          "priceListKey": {
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "priceCentAmount": {
            "type": "number"
          },
          "discountedPriceCentAmount": {
            "type": "number"
          }
        },
        "required": [
          "priceListKey",
          "merchantKey",
          "priceCentAmount",
          "discountedPriceCentAmount"
        ]
      },
      "ProductStatusUpdateDTO": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "published",
              "unpublished",
              "delisted"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "ProductWeightUpdateDTO": {
        "type": "object",
        "properties": {
          "weight": {
            "type": "number"
          }
        },
        "required": [
          "weight"
        ]
      },
      "InventoryUpdateDTO": {
        "type": "object",
        "properties": {
          "warehouseKey": {
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          }
        },
        "required": [
          "warehouseKey",
          "merchantKey",
          "quantity"
        ]
      },
      "WarehouseDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "version": {
            "type": "number",
            "default": 0
          },
          "key": {
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "priority": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "key",
          "merchantKey"
        ]
      },
      "WarehouseDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 0
          },
          "key": {
            "type": "string"
          },
          "merchantKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "priority": {
            "type": "number"
          }
        },
        "required": [
          "key",
          "merchantKey"
        ]
      },
      "CustomerDTO": {
        "type": "object",
        "properties": {
          "customerNumber": {
            "type": "number"
          },
          "store": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "email": {
            "type": "string"
          },
          "salutation": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "type": "number",
            "default": 0
          },
          "dayOfBirth": {
            "type": "number"
          },
          "monthOfBirth": {
            "type": "number"
          },
          "yearOfBirth": {
            "type": "number"
          },
          "companyName": {
            "type": "string"
          },
          "vatId": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "customerGroup": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "status": {
            "default": "active",
            "enum": [
              "active",
              "disabled",
              "awaiting-approval",
              "rejected"
            ],
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "anonymousId": {
            "type": "string"
          },
          "defaultBillingAddress": {
            "type": "string"
          },
          "defaultShippingAddress": {
            "type": "string"
          },
          "customerAddresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressDTO"
            }
          },
          "passwordResetToken": {
            "type": "string"
          },
          "passwordResetTokenExpirationDate": {
            "type": "number"
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "customerNumber",
          "email",
          "status",
          "anonymousId",
          "defaultBillingAddress",
          "defaultShippingAddress",
          "customerAddresses",
          "passwordResetToken",
          "passwordResetTokenExpirationDate",
          "custom"
        ]
      },
      "CustomerUpdateDTO": {
        "type": "object",
        "properties": {
          "store": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "email": {
            "type": "string"
          },
          "salutation": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "type": "number",
            "default": 0
          },
          "dayOfBirth": {
            "type": "number"
          },
          "monthOfBirth": {
            "type": "number"
          },
          "yearOfBirth": {
            "type": "number"
          },
          "companyName": {
            "type": "string"
          },
          "vatId": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "customerGroup": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "status": {
            "default": "active",
            "enum": [
              "active",
              "disabled",
              "awaiting-approval",
              "rejected"
            ],
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "email",
          "gender",
          "status"
        ]
      },
      "PasswordChangeDTO": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        },
        "required": [
          "currentPassword",
          "newPassword"
        ]
      },
      "CustomerCreateDTO": {
        "type": "object",
        "properties": {
          "store": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "salutation": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "gender": {
            "type": "number",
            "default": 0
          },
          "dayOfBirth": {
            "type": "number"
          },
          "monthOfBirth": {
            "type": "number"
          },
          "yearOfBirth": {
            "type": "number"
          },
          "companyName": {
            "type": "string"
          },
          "vatId": {
            "type": "string"
          },
          "externalId": {
            "type": "string"
          },
          "customerGroup": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "status": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "disabled",
              "awaiting-approval",
              "rejected"
            ]
          },
          "locale": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "customerNumber": {
            "type": "number"
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "email",
          "password",
          "gender",
          "status",
          "locale"
        ]
      },
      "CustomerRegisterDTO": {
        "type": "object",
        "properties": {
          "store": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "customerNumber": {
            "type": "number"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "CustomerRegisterFacebookDTO": {
        "type": "object",
        "properties": {
          "store": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "customerNumber": {
            "type": "number"
          },
          "facebookId": {
            "type": "string"
          },
          "facebookToken": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "facebookId"
        ]
      },
      "PasswordTokenDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "ttlMinutes": {
            "type": "number",
            "default": 1440
          }
        },
        "required": [
          "email",
          "ttlMinutes"
        ]
      },
      "PasswordResetDTO": {
        "type": "object",
        "properties": {
          "tokenValue": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        },
        "required": [
          "tokenValue",
          "newPassword"
        ]
      },
      "CustomerGroupDTO": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "label": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "label"
        ]
      },
      "CustomerSubscriptionTypeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "key": {
            "type": "string"
          },
          "label": {
            "type": "object"
          },
          "description": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "key"
        ]
      },
      "CustomerSubscriptionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "customerId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "anonymousId": {
            "type": "string"
          },
          "subscriptions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "email",
          "subscriptions"
        ]
      },
      "CustomerSubscribeDTO": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "subscription": {
            "type": "string"
          }
        },
        "required": [
          "subscription"
        ]
      },
      "WalletDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "version": {
            "type": "number",
            "default": 1
          },
          "type": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "key": {
            "type": "string"
          },
          "status": {
            "enum": [
              "requested",
              "inactive",
              "active",
              "locked",
              "cancelled",
              "lost",
              "stolen",
              "suspended"
            ],
            "type": "string"
          },
          "availableAmount": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "lastKnownAvailableAmount": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "lastSyncAt": {
            "type": "number",
            "default": 0
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "owners",
          "type",
          "key",
          "status"
        ]
      },
      "WalletDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "type": {
            "$ref": "#/components/schemas/KeyReferenceDTO"
          },
          "key": {
            "type": "string"
          },
          "status": {
            "enum": [
              "requested",
              "inactive",
              "active",
              "locked",
              "cancelled",
              "lost",
              "stolen",
              "suspended"
            ],
            "type": "string"
          },
          "owners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdReferenceDTO"
            }
          },
          "availableAmount": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "lastKnownAvailableAmount": {
            "$ref": "#/components/schemas/MoneyDTO"
          },
          "lastSyncAt": {
            "type": "number",
            "default": 0
          },
          "custom": {
            "type": "object"
          }
        },
        "required": [
          "type",
          "key",
          "status",
          "owners"
        ]
      },
      "WalletTypeDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          },
          "version": {
            "type": "number",
            "default": 1
          },
          "key": {
            "type": "string"
          },
          "currencyType": {
            "enum": [
              "virtual",
              "fiat",
              "crypto"
            ],
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "manageType": {
            "enum": [
              "internal",
              "external"
            ],
            "type": "string"
          },
          "externalApiUrl": {
            "type": "string"
          },
          "externalApiUsername": {
            "type": "string"
          },
          "externalApiPassword": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "createdAt",
          "updatedAt",
          "key",
          "currencyType",
          "manageType"
        ]
      },
      "WalletTypeDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "key": {
            "type": "string"
          },
          "currencyType": {
            "enum": [
              "virtual",
              "fiat",
              "crypto"
            ],
            "type": "string"
          },
          "currencyCode": {
            "type": "string"
          },
          "manageType": {
            "enum": [
              "internal",
              "external"
            ],
            "type": "string"
          },
          "externalApiUrl": {
            "type": "string"
          },
          "externalApiUsername": {
            "type": "string"
          },
          "externalApiPassword": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "currencyType",
          "manageType"
        ]
      },
      "UserDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "role": {
            "type": "object"
          },
          "passwordResetToken": {
            "type": "string"
          },
          "passwordResetTokenExpirationDate": {
            "type": "number"
          },
          "isSystem": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "email",
          "password",
          "role",
          "passwordResetToken",
          "passwordResetTokenExpirationDate",
          "isSystem"
        ]
      },
      "UserProfileUpdateDTO": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "email"
        ]
      },
      "UserCreateDTO": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "email",
          "password",
          "role"
        ]
      },
      "UserUpdateDTO": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        },
        "required": [
          "firstName",
          "email",
          "role"
        ]
      },
      "ContentDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "typeName": {
            "type": "string"
          },
          "languageCode": {
            "type": "string"
          },
          "tags": {
            "default": [],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "data": {
            "type": "string"
          }
        },
        "required": [
          "typeName",
          "languageCode",
          "tags",
          "data"
        ]
      },
      "ContentTypeDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "type": "string"
          },
          "dataSchema": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "dataSchema"
        ]
      },
      "ContentTypeDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "type": "string"
          },
          "dataSchema": {
            "type": "object"
          },
          "_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "dataSchema",
          "_id",
          "createdAt",
          "updatedAt"
        ]
      },
      "FolderDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "parent": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "name": {
            "type": "string"
          },
          "weight": {
            "type": "number"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "weight"
        ]
      },
      "FolderDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "parent": {
            "$ref": "#/components/schemas/IdReferenceDTO"
          },
          "name": {
            "type": "string"
          },
          "weight": {
            "type": "number"
          },
          "description": {
            "type": "string"
          },
          "_id": {
            "type": "object"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "weight",
          "_id",
          "createdAt",
          "updatedAt"
        ]
      },
      "FlipFoldersDTO": {
        "type": "object",
        "properties": {
          "fromId": {
            "type": "string"
          },
          "toId": {
            "type": "string"
          }
        },
        "required": [
          "fromId",
          "toId"
        ]
      },
      "PageDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "themeKey": {
            "type": "string"
          },
          "viewKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "data": {
            "default": [],
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "name",
          "data"
        ]
      },
      "PageDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "themeKey": {
            "type": "string"
          },
          "viewKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "data": {
            "default": [],
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "data",
          "_id",
          "createdAt",
          "updatedAt"
        ]
      },
      "TagDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "TagDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "type": "string"
          },
          "_id": {
            "type": "object"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "_id",
          "createdAt",
          "updatedAt"
        ]
      },
      "ValueTypeDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "type": "string"
          },
          "dataSchema": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "dataSchema"
        ]
      },
      "ValueTypeDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "name": {
            "type": "string"
          },
          "dataSchema": {
            "type": "object"
          },
          "_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "dataSchema",
          "_id",
          "createdAt",
          "updatedAt"
        ]
      },
      "WidgetDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "themeKey": {
            "type": "string"
          },
          "viewKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "default": "/"
          },
          "acceptsChildren": {
            "type": "boolean",
            "default": false
          },
          "dataSchema": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "path",
          "acceptsChildren",
          "dataSchema"
        ]
      },
      "WidgetDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "themeKey": {
            "type": "string"
          },
          "viewKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string",
            "default": "/"
          },
          "acceptsChildren": {
            "type": "boolean",
            "default": false
          },
          "dataSchema": {
            "type": "object"
          },
          "_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "path",
          "acceptsChildren",
          "dataSchema",
          "_id",
          "createdAt",
          "updatedAt"
        ]
      },
      "WidgetTemplateDraftDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "themeKey": {
            "type": "string"
          },
          "viewKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "widgetName": {
            "type": "string"
          },
          "data": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "widgetName",
          "data"
        ]
      },
      "WidgetTemplateDTO": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "default": 1
          },
          "themeKey": {
            "type": "string"
          },
          "viewKey": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "widgetName": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "widgetName",
          "data",
          "_id",
          "createdAt",
          "updatedAt"
        ]
      },
      "ThemeDraftDTO": {
        "type": "object",
        "properties": {
          "viewKey": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "widgets": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetDraftDTO"
            }
          },
          "configSchema": {
            "type": "object"
          },
          "defaultConfig": {
            "type": "object"
          },
          "defaultTemplates": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetTemplateDraftDTO"
            }
          },
          "defaultPages": {
            "default": [],
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        },
        "required": [
          "viewKey",
          "key",
          "version",
          "widgets",
          "configSchema",
          "defaultConfig",
          "defaultTemplates",
          "defaultPages"
        ]
      },
      "ThemeDTO": {
        "type": "object",
        "properties": {
          "viewKey": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "widgets": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetDraftDTO"
            }
          },
          "configSchema": {
            "type": "object"
          },
          "defaultConfig": {
            "type": "object"
          },
          "defaultTemplates": {
            "default": [],
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WidgetTemplateDraftDTO"
            }
          },
          "defaultPages": {
            "default": [],
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "number"
          },
          "updatedAt": {
            "type": "number"
          }
        },
        "required": [
          "viewKey",
          "key",
          "version",
          "widgets",
          "configSchema",
          "defaultConfig",
          "defaultTemplates",
          "defaultPages",
          "_id",
          "createdAt",
          "updatedAt"
        ]
      }
    }
  },
  "paths": {
    "/auth/probes/ready": {
      "get": {
        "operationId": "authReady",
        "summary": "Internal cluster health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/probes/healthy": {
      "get": {
        "operationId": "authHealthy",
        "summary": "Internal cluster health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/token": {
      "post": {
        "operationId": "getToken",
        "summary": "Returns an access token and optionally a refresh token for different grant types. Grant type 'client-credentials' authorizes api clients based on client id and client secret. Grant type 'password-credentials' authorizes users based on email and password along with api client's id and secret. Grant type 'refresh-token' returns new access and refresh tokens if the provided current refresh token is valid.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenDTO"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/password": {
      "post": {
        "operationId": "getPasswordGrantToken",
        "summary": "Returns an access token using password grant",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordGrantTokenRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenDTO"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/facebook/token": {
      "post": {
        "operationId": "getFacebookToken",
        "summary": "Returns an access token and a refresh token based on user's facebook id and facebook token.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FacebookTokenRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenDTO"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/anonymous/token": {
      "post": {
        "operationId": "getAnonymousToken",
        "summary": "Returns an anonymous access token based on api client's id and secret. Anonymous token permissions match the api client permissions.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequestDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenDTO"
                }
              }
            }
          }
        },
        "tags": [
          "auth"
        ]
      }
    },
    "/auth/api-clients": {
      "get": {
        "operationId": "filterApiClients",
        "summary": "Lists all API clients.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "api-clients"
        ]
      },
      "post": {
        "operationId": "createApiClient",
        "summary": "Creates a new API client.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiClientDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiClientDTO"
                }
              }
            }
          }
        },
        "tags": [
          "api-clients"
        ]
      }
    },
    "/auth/api-clients/{id}": {
      "get": {
        "operationId": "findApiClientById",
        "summary": "Returns an API client by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiClientDTO"
                }
              }
            }
          }
        },
        "tags": [
          "api-clients"
        ]
      },
      "put": {
        "operationId": "updateApiClientById",
        "summary": "Updates an API client by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApiClientDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiClientDTO"
                }
              }
            }
          }
        },
        "tags": [
          "api-clients"
        ]
      },
      "delete": {
        "operationId": "deleteApiClientById",
        "summary": "Deletes an API client by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiClientDTO"
                }
              }
            }
          }
        },
        "tags": [
          "api-clients"
        ]
      }
    },
    "/auth/roles/permissions": {
      "get": {
        "operationId": "getPermissions",
        "summary": "Lists all permissions.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Permission"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ]
      }
    },
    "/auth/roles": {
      "get": {
        "operationId": "filterRoles",
        "summary": "Lists all roles.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "roles"
        ]
      },
      "post": {
        "operationId": "createRole",
        "summary": "Creates a new role.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ]
      }
    },
    "/auth/roles/{id}": {
      "get": {
        "operationId": "findRoleById",
        "summary": "Returns a role by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "put": {
        "operationId": "updateRoleById",
        "summary": "Updates a role by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ]
      },
      "delete": {
        "operationId": "deleteRoleById",
        "summary": "Deletes a role by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "roles"
        ]
      }
    },
    "/config/probes/ready": {
      "get": {
        "operationId": "configReady",
        "summary": "Internal cluster health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/config/probes/healthy": {
      "get": {
        "operationId": "configHealthy",
        "summary": "Internal cluster health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/config/internationals": {
      "get": {
        "operationId": "filterInternationals",
        "summary": "Lists all internationals.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InternationalsDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "internationals"
        ]
      },
      "put": {
        "operationId": "createInternationals",
        "summary": "Creates a new internationals record.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InternationalsDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "internationals"
        ]
      }
    },
    "/config/fulfillment/shipping-types": {
      "get": {
        "operationId": "getShippingsInfo",
        "summary": "Returns shipping type options",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "fulfillment"
        ]
      }
    },
    "/config/fulfillment/payment-types": {
      "get": {
        "operationId": "getPaymentsInfo",
        "summary": "Returns payment type options",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "fulfillment"
        ]
      }
    },
    "/config/tax-categories": {
      "post": {
        "operationId": "createTaxCategory",
        "summary": "Creates a new tax category.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxCategoryDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "tax-categories"
        ]
      },
      "get": {
        "operationId": "filterTaxCategories",
        "summary": "Lists all tax categories.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "tax-categories"
        ]
      }
    },
    "/config/tax-categories/{id}": {
      "get": {
        "operationId": "findTaxCategoryById",
        "summary": "Returns a tax category by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "tax-categories"
        ]
      },
      "put": {
        "operationId": "updateTaxCategoryById",
        "summary": "Updates a tax category by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaxCategoryDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "tax-categories"
        ]
      },
      "delete": {
        "operationId": "deleteTaxCategoryById",
        "summary": "Deletes a tax category by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "tax-categories"
        ]
      }
    },
    "/config/tax-categories/key/{key}": {
      "get": {
        "operationId": "findTaxCategoryByKey",
        "summary": "Returns a tax category by key.",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaxCategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "tax-categories"
        ]
      }
    },
    "/config/shipping-methods": {
      "post": {
        "operationId": "createShippingMethod",
        "summary": "Creates a new shipping method.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingMethodDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethodDTO"
                }
              }
            }
          }
        },
        "tags": [
          "shipping-methods"
        ]
      },
      "get": {
        "operationId": "filterShippingMethods",
        "summary": "Lists all shipping methods.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "shipping-methods"
        ]
      }
    },
    "/config/shipping-methods/{id}": {
      "get": {
        "operationId": "findShippingMethodById",
        "summary": "Returns a shipping method by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethodDTO"
                }
              }
            }
          }
        },
        "tags": [
          "shipping-methods"
        ]
      },
      "put": {
        "operationId": "updateShippingMethodById",
        "summary": "Updates a shipping method by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingMethodDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethodDTO"
                }
              }
            }
          }
        },
        "tags": [
          "shipping-methods"
        ]
      },
      "delete": {
        "operationId": "deleteShippingMethodById",
        "summary": "Deletes a shipping method by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethodDTO"
                }
              }
            }
          }
        },
        "tags": [
          "shipping-methods"
        ]
      }
    },
    "/config/stores": {
      "post": {
        "operationId": "createStore",
        "summary": "Creates a new store.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreDTO"
                }
              }
            }
          }
        },
        "tags": [
          "stores"
        ]
      },
      "get": {
        "operationId": "filterStores",
        "summary": "Lists all stores.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "stores"
        ]
      }
    },
    "/config/stores/{id}": {
      "get": {
        "operationId": "findStoreById",
        "summary": "Returns a store by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreDTO"
                }
              }
            }
          }
        },
        "tags": [
          "stores"
        ]
      },
      "put": {
        "operationId": "updateStoreById",
        "summary": "Updates a store by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreDTO"
                }
              }
            }
          }
        },
        "tags": [
          "stores"
        ]
      },
      "delete": {
        "operationId": "deleteStoreById",
        "summary": "Deletes a store by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreDTO"
                }
              }
            }
          }
        },
        "tags": [
          "stores"
        ]
      }
    },
    "/config/stores/key/{key}": {
      "get": {
        "operationId": "findStoreByKey",
        "summary": "Returns a store by key.",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreDTO"
                }
              }
            }
          }
        },
        "tags": [
          "stores"
        ]
      }
    },
    "/config/states": {
      "post": {
        "operationId": "createState",
        "summary": "Creates a new state.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateDTO"
                }
              }
            }
          }
        },
        "tags": [
          "states"
        ]
      },
      "get": {
        "operationId": "filterStates",
        "summary": "Lists all states.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "states"
        ]
      }
    },
    "/config/states/{id}": {
      "get": {
        "operationId": "findStateById",
        "summary": "Returns a state by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateDTO"
                }
              }
            }
          }
        },
        "tags": [
          "states"
        ]
      },
      "put": {
        "operationId": "updateStateById",
        "summary": "Updates a state by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StateDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateDTO"
                }
              }
            }
          }
        },
        "tags": [
          "states"
        ]
      },
      "delete": {
        "operationId": "deleteStateById",
        "summary": "Deletes a state by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateDTO"
                }
              }
            }
          }
        },
        "tags": [
          "states"
        ]
      }
    },
    "/config/states/key/{key}": {
      "get": {
        "operationId": "findStateByKey",
        "summary": "Returns a state by key.",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateDTO"
                }
              }
            }
          }
        },
        "tags": [
          "states"
        ]
      }
    },
    "/config/subscriptions": {
      "post": {
        "operationId": "createSubscription",
        "summary": "Creates a new subscription.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "subscriptions"
        ]
      },
      "get": {
        "operationId": "filterSubscriptions",
        "summary": "Lists all subscriptions.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "subscriptions"
        ]
      }
    },
    "/config/subscriptions/key={key}": {
      "get": {
        "operationId": "findSubscriptionByKey",
        "summary": "Returns a subscription by key.",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "subscriptions"
        ]
      }
    },
    "/config/subscriptions/{id}": {
      "get": {
        "operationId": "findSubscriptionById",
        "summary": "Returns a subscription by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "subscriptions"
        ]
      },
      "put": {
        "operationId": "updateSubscriptionById",
        "summary": "Updates a subscription by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubscriptionDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "subscriptions"
        ]
      },
      "delete": {
        "operationId": "deleteSubscriptionById",
        "summary": "Deletes a subscription by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "subscriptions"
        ]
      }
    },
    "/config/store-views": {
      "post": {
        "operationId": "createStoreView",
        "summary": "Creates new store view record",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreViewDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "store-views"
        ]
      },
      "get": {
        "operationId": "filterStoreViews",
        "summary": "Filters the store views collection",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreViewFilterResultDTO"
                }
              }
            }
          }
        },
        "tags": [
          "store-views"
        ]
      }
    },
    "/config/store-views/{id}": {
      "get": {
        "operationId": "getStoreViewById",
        "summary": "Gets store view by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "store-views"
        ]
      },
      "put": {
        "operationId": "update",
        "summary": "Updates a store view",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StoreViewDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "store-views"
        ]
      },
      "delete": {
        "operationId": "deleteStoreViewById",
        "summary": "Deletes a store view by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "store-views"
        ]
      }
    },
    "/config/payment-methods": {
      "post": {
        "operationId": "createPaymentMethod",
        "summary": "Creates a new payment method.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodDTO"
                }
              }
            }
          }
        },
        "tags": [
          "payment-methods"
        ]
      },
      "get": {
        "operationId": "filterPaymentMethods",
        "summary": "Lists all payment methods.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "payment-methods"
        ]
      }
    },
    "/config/payment-methods/{id}": {
      "get": {
        "operationId": "findPaymentMethodById",
        "summary": "Returns a payment method by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodDTO"
                }
              }
            }
          }
        },
        "tags": [
          "payment-methods"
        ]
      },
      "put": {
        "operationId": "updatePaymentMethodById",
        "summary": "Updates a payment method by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodDTO"
                }
              }
            }
          }
        },
        "tags": [
          "payment-methods"
        ]
      },
      "delete": {
        "operationId": "deletePaymentMethodById",
        "summary": "Deletes a payment method by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodDTO"
                }
              }
            }
          }
        },
        "tags": [
          "payment-methods"
        ]
      }
    },
    "/config/custom-fields/set": {
      "put": {
        "operationId": "setCustomField",
        "summary": "Updates a custom field value for a particular record id and resource type.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "custom-fields"
        ]
      }
    },
    "/config/custom-fields/set-my": {
      "put": {
        "operationId": "setMyCustomField",
        "summary": "Updates a custom field value for the current customer.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetCustomFieldDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "custom-fields"
        ]
      }
    },
    "/config/custom-fields": {
      "post": {
        "operationId": "createCustomField",
        "summary": "Creates a new custom field.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDTO"
                }
              }
            }
          }
        },
        "tags": [
          "custom-fields"
        ]
      },
      "get": {
        "operationId": "filterCustomFields",
        "summary": "Lists all custom fields.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "custom-fields"
        ]
      }
    },
    "/config/custom-fields/{id}": {
      "get": {
        "operationId": "findCustomFieldById",
        "summary": "Returns a custom field by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDTO"
                }
              }
            }
          }
        },
        "tags": [
          "custom-fields"
        ]
      },
      "put": {
        "operationId": "updateCustomFieldById",
        "summary": "Updates a custom field by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomFieldDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDTO"
                }
              }
            }
          }
        },
        "tags": [
          "custom-fields"
        ]
      },
      "delete": {
        "operationId": "deleteCustomFieldById",
        "summary": "Deletes a custom field by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomFieldDTO"
                }
              }
            }
          }
        },
        "tags": [
          "custom-fields"
        ]
      }
    },
    "/fulfillment/probes/ready": {
      "get": {
        "operationId": "fulfillmentReady",
        "summary": "Internal cluster health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fulfillment/probes/healthy": {
      "get": {
        "operationId": "fulfillmentHealthy",
        "summary": "Internal cluster health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fulfillment/my/cart": {
      "post": {
        "operationId": "createMyCart",
        "summary": "Creates a cart for the current customer.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      },
      "get": {
        "operationId": "getMyCart",
        "summary": "Returns the cart for the current customer.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/check": {
      "post": {
        "operationId": "checkMyCart",
        "summary": "Validates current customer's cart line items availability.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/line-items": {
      "post": {
        "operationId": "addMyCartLineItem",
        "summary": "Adds a line item to current customer's cart.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LineItemDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/line-items/{lineItemId}": {
      "delete": {
        "operationId": "removeMyCartLineItem",
        "summary": "Removes a line item from current customer's cart.",
        "parameters": [
          {
            "name": "lineItemId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/line-items/{lineItemId}/quantity": {
      "patch": {
        "operationId": "setMyCartLineItemQuantity",
        "summary": "Updates line item quantity in current customer's cart.",
        "parameters": [
          {
            "name": "lineItemId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuantityUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/discount-code": {
      "patch": {
        "operationId": "setMyCartDiscountCode",
        "summary": "Applies a discount code to current customer's order.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountCodeUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      },
      "delete": {
        "operationId": "removeMyCartDiscountCode",
        "summary": "Removes a discount code from current customer's order.",
        "parameters": [
          {
            "name": "code",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/wallet/type={type}": {
      "post": {
        "operationId": "addMyCartWallet",
        "summary": "Associates wallet by type to current customer's order so order can be fully or partially paid by wallet.",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      },
      "delete": {
        "operationId": "removeMyCartWallet",
        "summary": "Removes wallet by type to current customer's order. Associated wallet payments are removed.",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/shipping-address": {
      "patch": {
        "operationId": "setMyShippingAddress",
        "summary": "Sets a shipping address for current customer's order.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingAddressDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/billing-address": {
      "patch": {
        "operationId": "setMyBillingAddress",
        "summary": "Sets a billing address for current customer's order.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/shipping-methods": {
      "get": {
        "operationId": "getMyShippingMethods",
        "summary": "Lists available shipping methods for current customer's order.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethodsInfo"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/payment-methods": {
      "get": {
        "operationId": "getMyPaymentMethods",
        "summary": "Lists available payment methods for current customer's order.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodsInfo"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/platform-shipping-method": {
      "patch": {
        "operationId": "setMyPlatformShippingMethod",
        "summary": "Associates a shipping method defined per platform to the current customer's order.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformMethodUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/merchants-shipping-methods": {
      "patch": {
        "operationId": "setMyMerchantsShippingMethods",
        "summary": "Associates a shipping method defined per merchant to the current customer's order.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantsMethodsUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/platform-payment-method": {
      "patch": {
        "operationId": "setMyPlatformPaymentMethod",
        "summary": "Associates a payment method defined per platform to the current customer's order.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformMethodUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/merchants-payment-methods": {
      "patch": {
        "operationId": "setMyMerchantsPaymentMethods",
        "summary": "Associates a payment method defined per merchant to the current customer's order.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantsMethodsUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/cart/custom-field": {
      "patch": {
        "operationId": "setMyCartCustomField",
        "summary": "Sets current customer's custom field value",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-cart"
        ]
      }
    },
    "/fulfillment/my/orders": {
      "get": {
        "operationId": "getMyOrders",
        "summary": "Lists all orders per current customer.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "my-orders"
        ]
      },
      "post": {
        "operationId": "createMyOrderFromCart",
        "summary": "Creates a new order from current customer's cart.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-orders"
        ]
      }
    },
    "/fulfillment/my/orders/{orderId}/payments/{paymentId}/pay": {
      "get": {
        "operationId": "payMyOrder",
        "summary": "Creates a new payment transaction per order id and payment id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MakePaymentResponse"
                }
              }
            }
          }
        },
        "tags": [
          "my-orders"
        ]
      }
    },
    "/fulfillment/my/orders/verify-payment-result": {
      "post": {
        "operationId": "verifyMyPaymentResult",
        "summary": "Verifies payment transaction result.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyPaymentResultRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MakePaymentResponse"
                }
              }
            }
          }
        },
        "tags": [
          "my-orders"
        ]
      }
    },
    "/fulfillment/orders/import": {
      "post": {
        "operationId": "importOrders",
        "summary": "Imports list of orders. Returns imported orders with their ids.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderImportDTO"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/sync-shippings": {
      "post": {
        "operationId": "syncShippings",
        "summary": "Syncs shipping statuses from shipping provider's API for all orders with shipping status Pending, Delayed, Partial.",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ShippingDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/cart": {
      "post": {
        "operationId": "createCart",
        "summary": "Creates a new cart.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/cart/{customerId}": {
      "get": {
        "operationId": "getCustomerCart",
        "summary": "Returns a cart per customer id.",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{id}": {
      "post": {
        "operationId": "createOrderFromCart",
        "summary": "Creates a new order.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      },
      "get": {
        "operationId": "findOrderById",
        "summary": "Returns an order by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders": {
      "get": {
        "operationId": "filterOrders",
        "summary": "Returns all orders per page.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/carts/{days}": {
      "delete": {
        "operationId": "deleteExpiredCarts",
        "summary": "Deletes all carts older than x days.",
        "parameters": [
          {
            "name": "days",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/state": {
      "patch": {
        "operationId": "transitionOrderState",
        "summary": "Updates order state per order id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransitionOrderStateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/note": {
      "patch": {
        "operationId": "updateOrderNote",
        "summary": "Updates order note per order id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderNoteUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/status": {
      "patch": {
        "operationId": "setOrderStatus",
        "summary": "Updates order status per order id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderStatusUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/line-items/state": {
      "patch": {
        "operationId": "transitionLineItemQuantityState",
        "summary": "Updates line items state for items in order.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransitionLineItemQuantityState"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/line-items": {
      "post": {
        "operationId": "addOrderLineItem",
        "summary": "Adds a line item to order by order id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LineItemDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/line-items/{lineItemId}": {
      "delete": {
        "operationId": "removeOrderLineItem",
        "summary": "Deletes an line item from order by order id and line item id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lineItemId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/line-items/{lineItemId}/quantity": {
      "patch": {
        "operationId": "setOrderLineItemQuantity",
        "summary": "Updates line item quantity by order id and line item id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lineItemId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuantityUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/discount-code": {
      "patch": {
        "operationId": "setOrderDiscountCode",
        "summary": "Applies a discount code to order.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountCodeUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      },
      "delete": {
        "operationId": "removeOrderDiscountCode",
        "summary": "Removes a discount code from order.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountCodeUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/shipping-address": {
      "patch": {
        "operationId": "setOrderShippingAddress",
        "summary": "Sets order shipping address.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingAddressDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/billing-address": {
      "patch": {
        "operationId": "setOrderBillingAddress",
        "summary": "Sets order billing address.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/shipping-methods": {
      "get": {
        "operationId": "getOrderShippingMethods",
        "summary": "Returns available order shipping methods.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingMethodsInfo"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/payment-methods": {
      "get": {
        "operationId": "getOrderPaymentMethods",
        "summary": "Returns available order payment methods.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodsInfo"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/platform-shipping-method": {
      "patch": {
        "operationId": "setOrderPlatformShippingMethod",
        "summary": "Sets order shipping method defined per platform.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformMethodUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/merchants-shipping-methods": {
      "patch": {
        "operationId": "setOrderMerchantsShippingMethods",
        "summary": "Sets order shipping methods defined per merchant.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantsMethodsUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/platform-payment-method": {
      "patch": {
        "operationId": "setOrderPlatformPaymentMethod",
        "summary": "Sets order payment method defined per platform.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlatformMethodUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/merchants-payment-methods": {
      "patch": {
        "operationId": "setOrderMerchantsPaymentMethods",
        "summary": "Sets order payment methods defined per merchant.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantsMethodsUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/shippings/{shippingId}/status": {
      "patch": {
        "operationId": "setShippingStatus",
        "summary": "Updates order shipping status by order id and status id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shippingId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingStatusUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/shippings/{shippingId}/deliveries": {
      "post": {
        "operationId": "createShippingDelivery",
        "summary": "Creates a new shipping delivery per order id and shipping id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shippingId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingDeliveryDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/shippings/{shippingId}/deliveries/{deliveryId}/parcels/{parcelId}": {
      "get": {
        "operationId": "getShippingDeliveryParcelById",
        "summary": "Returns a shipping delivery parcel by order id, shipping id and parcel id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shippingId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deliveryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parcelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingDeliveryParcelDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      },
      "put": {
        "operationId": "updateShippingDeliveryParcel",
        "summary": "Updates a shipping delivery parcel by order id, shipping id and parcel id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shippingId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deliveryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parcelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingDeliveryParcelDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingDeliveryParcelDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/shippings/{shippingId}/deliveries/{deliveryId}/parcels": {
      "post": {
        "operationId": "createShippingDeliveryParcel",
        "summary": "Creates a new shipping delivery parcel per order id and shipping id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shippingId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deliveryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingDeliveryParcelDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShippingDeliveryParcelDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/shippings/{shippingId}/interface-interactions": {
      "post": {
        "operationId": "createShippingInterfaceInteraction",
        "summary": "Creates a new shipping interface interaction, e.g. create shipping request, track shipping request, cancel shipping request, etc.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shippingId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShippingInterfaceInteractionDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/shippings/{shippingId}/deliveries/{deliveryId}/parcels/{parcelId}/interface-interactions": {
      "post": {
        "operationId": "makeShippingInterfaceInteraction",
        "summary": "Executes a shipping interface interaction per delivery and parcel id, e.g. create shipping request, track shipping request, cancel shipping request, etc.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shippingId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deliveryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parcelId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MakeShippingInteractionDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/payments/{paymentId}/status": {
      "patch": {
        "operationId": "setPaymentStatus",
        "summary": "Sets payment status per order id and payment id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentStatusUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/payments/{paymentId}/transactions": {
      "post": {
        "operationId": "createPaymentTransaction",
        "summary": "Creates a new payment transaction per order id and payment id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentTransactionDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/payments/{paymentId}/interface-interactions": {
      "post": {
        "operationId": "createPaymentInterfaceInteraction",
        "summary": "Creates a new payment interface interaction.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentInterfaceInteractionDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/{orderId}/payments/{paymentId}/transactions/{transactionId}/interface-interactions": {
      "post": {
        "operationId": "makePaymentInterfaceInteraction",
        "summary": "Executes a payment interface interaction per transaction id.",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "paymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transactionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MakePaymentInteractionDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/orders/new-orders": {
      "get": {
        "operationId": "getNewOrders",
        "summary": "Returns either or not has new orders.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "orders"
        ]
      }
    },
    "/fulfillment/my/wish-list": {
      "post": {
        "operationId": "createMyWishlist",
        "summary": "Creates a new wish list for the current user.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WishListDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishListDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-wish-lists"
        ]
      },
      "get": {
        "operationId": "getMyWishList",
        "summary": "Returns the wishlist for the current user.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishListDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-wish-lists"
        ]
      }
    },
    "/fulfillment/my/wish-list/products/{productId}": {
      "post": {
        "operationId": "addMyWishlistProduct",
        "summary": "Adds a product to the current user's wish list.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishListDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-wish-lists"
        ]
      },
      "delete": {
        "operationId": "removeMyWishlistProduct",
        "summary": "Removes a product from the current user's wish list.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishListDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-wish-lists"
        ]
      }
    },
    "/fulfillment/product-discounts/search": {
      "get": {
        "operationId": "searchProductDiscounts",
        "summary": "Searches product discounts by name.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "product-discounts"
        ]
      }
    },
    "/fulfillment/product-discounts": {
      "get": {
        "operationId": "filterProductDiscounts",
        "summary": "Lists all product discounts.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "product-discounts"
        ]
      },
      "post": {
        "operationId": "createProductDiscount",
        "summary": "Creates a new product discount.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductDiscountDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDiscountDTO"
                }
              }
            }
          }
        },
        "tags": [
          "product-discounts"
        ]
      }
    },
    "/fulfillment/product-discounts/{id}": {
      "get": {
        "operationId": "findProductDiscountById",
        "summary": "Returns a product discount by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDiscountDTO"
                }
              }
            }
          }
        },
        "tags": [
          "product-discounts"
        ]
      },
      "put": {
        "operationId": "updateProductDiscountById",
        "summary": "Updates a product discount by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductDiscountDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDiscountDTO"
                }
              }
            }
          }
        },
        "tags": [
          "product-discounts"
        ]
      },
      "delete": {
        "operationId": "deleteProductDiscountById",
        "summary": "Deletes a product discount by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDiscountDTO"
                }
              }
            }
          }
        },
        "tags": [
          "product-discounts"
        ]
      }
    },
    "/fulfillment/cart-discounts/import": {
      "post": {
        "operationId": "importCartDiscounts",
        "summary": "Imports multiple cart discounts. Returns imported cart discounts with their ids.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CartDiscountDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "cart-discounts"
        ]
      }
    },
    "/fulfillment/cart-discounts/search": {
      "get": {
        "operationId": "searchCartDiscounts",
        "summary": "Searches cart discounts by name.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "cart-discounts"
        ]
      }
    },
    "/fulfillment/cart-discounts": {
      "get": {
        "operationId": "filterCartDiscounts",
        "summary": "Lists all cart discounts.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "cart-discounts"
        ]
      },
      "post": {
        "operationId": "createCartDiscount",
        "summary": "Creates a new cart discount.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartDiscountDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartDiscountDTO"
                }
              }
            }
          }
        },
        "tags": [
          "cart-discounts"
        ]
      }
    },
    "/fulfillment/cart-discounts/{id}": {
      "get": {
        "operationId": "findCartDiscountById",
        "summary": "Returns a cart discount by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartDiscountDTO"
                }
              }
            }
          }
        },
        "tags": [
          "cart-discounts"
        ]
      },
      "put": {
        "operationId": "updateCartDiscountById",
        "summary": "Updates a cart discount by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CartDiscountDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartDiscountDTO"
                }
              }
            }
          }
        },
        "tags": [
          "cart-discounts"
        ]
      },
      "delete": {
        "operationId": "deleteCartDiscountById",
        "summary": "Deletes a cart discount by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartDiscountDTO"
                }
              }
            }
          }
        },
        "tags": [
          "cart-discounts"
        ]
      }
    },
    "/fulfillment/discount-codes/import": {
      "post": {
        "operationId": "importDiscountCodes",
        "summary": "Imports discount codes",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscountCodeDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "discount-codes"
        ]
      }
    },
    "/fulfillment/discount-codes/search": {
      "get": {
        "operationId": "searchDiscountCodes",
        "summary": "Searches discount codes by name.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "discount-codes"
        ]
      }
    },
    "/fulfillment/discount-codes": {
      "get": {
        "operationId": "filterDiscountCodes",
        "summary": "Lists all discount codes.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "discount-codes"
        ]
      },
      "post": {
        "operationId": "createDiscountCode",
        "summary": "Creates a new discount code.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountCodeDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountCodeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "discount-codes"
        ]
      }
    },
    "/fulfillment/discount-codes/{id}": {
      "get": {
        "operationId": "findDiscountCodeById",
        "summary": "Returns a discount code by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountCodeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "discount-codes"
        ]
      },
      "put": {
        "operationId": "updateDiscountCodeById",
        "summary": "Updates a discount code by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiscountCodeDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountCodeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "discount-codes"
        ]
      },
      "delete": {
        "operationId": "deleteDiscountCodeById",
        "summary": "Deletes a discount code by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscountCodeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "discount-codes"
        ]
      }
    },
    "/merchandise/probes/ready": {
      "get": {
        "operationId": "merchandiseReady",
        "summary": "Internal cluster health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/merchandise/probes/healthy": {
      "get": {
        "operationId": "merchandiseHealthy",
        "summary": "Internal cluster health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/merchandise/attributes/search": {
      "get": {
        "operationId": "searchAttributes",
        "summary": "Searches for attributes by name.",
        "parameters": [
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "attributes"
        ]
      }
    },
    "/merchandise/attributes": {
      "get": {
        "operationId": "filterAttributes",
        "summary": "Lists all attributes.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "attributes"
        ]
      },
      "post": {
        "operationId": "createAttribute",
        "summary": "Creates a new attribute.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "attributes"
        ]
      }
    },
    "/merchandise/attributes/{id}": {
      "get": {
        "operationId": "findAttributeById",
        "summary": "Returns an attribute by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "attributes"
        ]
      },
      "put": {
        "operationId": "updateAttributeById",
        "summary": "Updates an attribute by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "attributes"
        ]
      },
      "delete": {
        "operationId": "deleteAttributeById",
        "summary": "Deletes an attribute by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "attributes"
        ]
      }
    },
    "/merchandise/attributes/import": {
      "post": {
        "operationId": "importAttributes",
        "summary": "Imports multiple attributes.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttributeDraftDTO"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "attributes"
        ]
      }
    },
    "/merchandise/attributes/name/{name}": {
      "put": {
        "operationId": "updateAttributeByName",
        "summary": "Updates an attribute by name.",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttributeDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "attributes"
        ]
      },
      "delete": {
        "operationId": "deleteAttributeByName",
        "summary": "Deletes an attribute by name.",
        "parameters": [
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttributeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "attributes"
        ]
      }
    },
    "/merchandise/categories/{categoryId}/assets": {
      "post": {
        "operationId": "addCategoryAsset",
        "summary": "Creates a new asset per category id.",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/merchandise/categories/{categoryId}/assets/{assetIndex}": {
      "put": {
        "operationId": "updateCategoryAsset",
        "summary": "Updates an asset per category id and asset index.",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "categories"
        ]
      },
      "delete": {
        "operationId": "removeCategoryAsset",
        "summary": "Deletes an asset per category id and asset index.",
        "parameters": [
          {
            "name": "categoryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/merchandise/categories/search": {
      "get": {
        "operationId": "searchCategory",
        "summary": "Searches categories by name.",
        "parameters": [
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/merchandise/categories": {
      "get": {
        "operationId": "filterCategories",
        "summary": "Lists all categories.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "categories"
        ]
      },
      "post": {
        "operationId": "createCategory",
        "summary": "Creates a new category.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/merchandise/categories/slugs/{languageCode}": {
      "get": {
        "operationId": "getCategorySlugs",
        "summary": "Lists all category slugs per language code.",
        "parameters": [
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/merchandise/categories/{id}": {
      "get": {
        "operationId": "findCategoryById",
        "summary": "Returns a category by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "statuses",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "categories"
        ]
      },
      "put": {
        "operationId": "updateCategoryById",
        "summary": "Updates a category by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "categories"
        ]
      },
      "delete": {
        "operationId": "deleteCategoryById",
        "summary": "Deletes a category by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/merchandise/categories/external/{externalId}": {
      "get": {
        "operationId": "findCategoryByExternalId",
        "summary": "Returns a category by external id.",
        "parameters": [
          {
            "name": "externalId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "statuses",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/merchandise/categories/slug/{languageCode}/{slug}": {
      "get": {
        "operationId": "findCategoryBySlug",
        "summary": "Returns a category by slug and language code.",
        "parameters": [
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "statuses",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/merchandise/categories/import": {
      "post": {
        "operationId": "importCategories",
        "summary": "Imports multiple categories.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CategoryDraftDTO"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/merchandise/categories/external/{id}": {
      "put": {
        "operationId": "updateCategoryByExternalId",
        "summary": "Updates a category by external id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "categories"
        ]
      },
      "delete": {
        "operationId": "deleteCategoryByExternalId",
        "summary": "Deletes a category by external id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDTO"
                }
              }
            }
          }
        },
        "tags": [
          "categories"
        ]
      }
    },
    "/merchandise/brands/{brandId}/assets": {
      "post": {
        "operationId": "addBrandAsset",
        "summary": "Creates a new asset per brand id.",
        "parameters": [
          {
            "name": "brandId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandDTO"
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      }
    },
    "/merchandise/brands/{brandId}/assets/{assetIndex}": {
      "put": {
        "operationId": "updateBrandAsset",
        "summary": "Updates an asset per brand id and asset index.",
        "parameters": [
          {
            "name": "brandId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandDTO"
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      },
      "delete": {
        "operationId": "removeBrandAsset",
        "summary": "Deletes an asset per brand id and asset index.",
        "parameters": [
          {
            "name": "brandId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandDTO"
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      }
    },
    "/merchandise/brands/search": {
      "get": {
        "operationId": "searchBrands",
        "summary": "Searches brands by name.",
        "parameters": [
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "brands"
        ]
      }
    },
    "/merchandise/brands": {
      "get": {
        "operationId": "filterBrands",
        "summary": "Lists all brands.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "brands"
        ]
      },
      "post": {
        "operationId": "createBrand",
        "summary": "Creates a new brand.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandDTO"
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      }
    },
    "/merchandise/brands/slugs/{languageCode}": {
      "get": {
        "operationId": "getAllBrandSlugs",
        "summary": "Returns all brand slugs per language code.",
        "parameters": [
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      }
    },
    "/merchandise/brands/{id}": {
      "get": {
        "operationId": "findBrandById",
        "summary": "Returns a brand by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "statuses",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandDTO"
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      },
      "put": {
        "operationId": "updateBrandById",
        "summary": "Updates a brand by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandDTO"
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      },
      "delete": {
        "operationId": "deleteBrandById",
        "summary": "Deletes a brand by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandDTO"
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      }
    },
    "/merchandise/brands/external/{externalId}": {
      "get": {
        "operationId": "findBrandByExternalId",
        "summary": "Returns a brand by external id.",
        "parameters": [
          {
            "name": "externalId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "statuses",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandDTO"
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      }
    },
    "/merchandise/brands/slug/{languageCode}/{slug}": {
      "get": {
        "operationId": "findBrandBySlug",
        "summary": "Returns a brand by slug and language code.",
        "parameters": [
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "statuses",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandDTO"
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      }
    },
    "/merchandise/brands/{brandId}/status": {
      "patch": {
        "operationId": "setBrandStatus",
        "summary": "Updates brand status by id.",
        "parameters": [
          {
            "name": "brandId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandStatusUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandDTO"
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      }
    },
    "/merchandise/brands/import": {
      "post": {
        "operationId": "importBrands",
        "summary": "Imports multiple brands.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BrandDraftDTO"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BrandDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      }
    },
    "/merchandise/brands/externalId/{id}": {
      "put": {
        "operationId": "updateBrandByExternalId",
        "summary": "Updates a brand by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BrandDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandDTO"
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      },
      "delete": {
        "operationId": "deleteBrandByExternalId",
        "summary": "Deletes a brand by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandDTO"
                }
              }
            }
          }
        },
        "tags": [
          "brands"
        ]
      }
    },
    "/merchandise/catalog/search": {
      "get": {
        "operationId": "searchCatalog",
        "summary": "Searches in catalog by search term.",
        "parameters": [
          {
            "name": "priceRanges",
            "required": false,
            "in": "query",
            "schema": {
              "default": [
                "*-500",
                "500-2000",
                "2000-5000",
                "5000-10000",
                "10000-*"
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "discountRanges",
            "required": false,
            "in": "query",
            "schema": {
              "default": [
                "*-20",
                "20-50",
                "50-*"
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "preFilters",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "postFilters",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "showCount",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "skipSingleAttributes",
            "required": false,
            "in": "query",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          },
          {
            "name": "onlyResults",
            "required": false,
            "in": "query",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "language",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "priceList",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merchant",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": true,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "price-asc",
                  "price-desc",
                  "discount-asc",
                  "discount-desc",
                  "weight-asc",
                  "weight-desc",
                  "inventory-asc",
                  "inventory-desc",
                  "images-asc",
                  "images-desc",
                  "score-asc",
                  "score-desc"
                ]
              }
            }
          },
          {
            "name": "limit",
            "required": true,
            "in": "query",
            "schema": {
              "default": 100,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "categoriesParent",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "brandsParent",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fuzziness",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefixLength",
            "required": false,
            "in": "query",
            "schema": {
              "default": 3,
              "type": "number"
            }
          },
          {
            "name": "maxExpansions",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "catalog"
        ]
      }
    },
    "/merchandise/catalog/suggest": {
      "get": {
        "operationId": "suggest",
        "summary": "Returns suggestions by search term. Used for search autocompletion.",
        "parameters": [
          {
            "name": "language",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "priceList",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "text",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merchant",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fuzziness",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefixLength",
            "required": false,
            "in": "query",
            "schema": {
              "default": 3,
              "type": "number"
            }
          },
          {
            "name": "maxExpansions",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "maxProductResults",
            "required": false,
            "in": "query",
            "schema": {
              "default": 3,
              "type": "number"
            }
          },
          {
            "name": "maxCategoryResults",
            "required": false,
            "in": "query",
            "schema": {
              "default": 3,
              "type": "number"
            }
          },
          {
            "name": "maxBrandsResults",
            "required": false,
            "in": "query",
            "schema": {
              "default": 3,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "catalog"
        ]
      }
    },
    "/merchandise/catalog/sync": {
      "post": {
        "operationId": "sync",
        "summary": "Syncs catalog database and elastic search indexes.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "catalog"
        ]
      }
    },
    "/merchandise/catalog/sync/{from}": {
      "post": {
        "operationId": "syncCatalogFrom",
        "summary": "Syncs catalog changes since a particular date between database and elastic search indexes.",
        "parameters": [
          {
            "name": "from",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "catalog"
        ]
      }
    },
    "/merchandise/catalog/synonyms": {
      "post": {
        "operationId": "createSynonym",
        "summary": "Creates a new synonym.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SynonymDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDTO"
                }
              }
            }
          }
        },
        "tags": [
          "catalog"
        ]
      },
      "get": {
        "operationId": "filterSynonyms",
        "summary": "Filters synonyms collection",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "catalog"
        ]
      }
    },
    "/merchandise/catalog/synonyms/{synonymId}": {
      "put": {
        "operationId": "updateSynonym",
        "summary": "Update synonym by id",
        "parameters": [
          {
            "name": "synonymId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SynonymDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDTO"
                }
              }
            }
          }
        },
        "tags": [
          "catalog"
        ]
      }
    },
    "/merchandise/catalog/synonyms/{id}": {
      "delete": {
        "operationId": "deleteSynonym",
        "summary": "Deletes a synonym by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynonymDTO"
                }
              }
            }
          }
        },
        "tags": [
          "catalog"
        ]
      }
    },
    "/merchandise/catalog/synonyms/sync": {
      "post": {
        "operationId": "syncSynonyms",
        "summary": "Syncs catalog database and elastic search indexes.",
        "parameters": [],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "catalog"
        ]
      }
    },
    "/merchandise/collections/{collectionId}/assets": {
      "post": {
        "operationId": "addCollectionAsset",
        "summary": "Creates a new asset per collection id.",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ]
      }
    },
    "/merchandise/collections/{collectionId}/assets/{assetIndex}": {
      "put": {
        "operationId": "updateCollectionAsset",
        "summary": "Updates an asset per collection id and asset index.",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ]
      },
      "delete": {
        "operationId": "removeCollectionAsset",
        "summary": "Deletes an asset per collection id and asset index.",
        "parameters": [
          {
            "name": "collectionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ]
      }
    },
    "/merchandise/collections/search": {
      "get": {
        "operationId": "searchCollection",
        "summary": "Searches collections by name.",
        "parameters": [
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "collections"
        ]
      }
    },
    "/merchandise/collections": {
      "post": {
        "operationId": "createCollection",
        "summary": "Creates a new collection.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ]
      },
      "get": {
        "operationId": "filterCollections",
        "summary": "Lists all collections.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "collections"
        ]
      }
    },
    "/merchandise/collections/{id}": {
      "get": {
        "operationId": "findCollectionById",
        "summary": "Returns a collection by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ]
      },
      "put": {
        "operationId": "updateCollectionById",
        "summary": "Updates a collection by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectionDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ]
      },
      "delete": {
        "operationId": "deleteCollectionById",
        "summary": "Deletes a collection by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionDraftDTO"
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ]
      }
    },
    "/merchandise/collections/external/{externalId}": {
      "get": {
        "operationId": "findCollectionByExternalId",
        "summary": "Returns a collection by external id.",
        "parameters": [
          {
            "name": "externalId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ]
      }
    },
    "/merchandise/collections/slug/{lang}/{slug}": {
      "get": {
        "operationId": "findCollectionBySlug",
        "summary": "Returns a collection by slug and language code.",
        "parameters": [
          {
            "name": "lang",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "collections"
        ]
      }
    },
    "/merchandise/views/{viewId}/assets": {
      "post": {
        "operationId": "addViewAsset",
        "summary": "Creates a new asset per view id.",
        "parameters": [
          {
            "name": "viewId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "views"
        ]
      }
    },
    "/merchandise/views/{viewId}/assets/{assetIndex}": {
      "put": {
        "operationId": "updateViewAsset",
        "summary": "Updates an asset per view id and asset index.",
        "parameters": [
          {
            "name": "viewId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "views"
        ]
      },
      "delete": {
        "operationId": "removeViewAsset",
        "summary": "Deletes an asset per view id and asset index.",
        "parameters": [
          {
            "name": "viewId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "views"
        ]
      }
    },
    "/merchandise/views/search": {
      "get": {
        "operationId": "searchViews",
        "summary": "Searches views by name.",
        "parameters": [
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "views"
        ]
      }
    },
    "/merchandise/views": {
      "post": {
        "operationId": "createView",
        "summary": "Creates a new view.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "views"
        ]
      },
      "get": {
        "operationId": "filterViews",
        "summary": "Lists all views.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "views"
        ]
      }
    },
    "/merchandise/views/{id}": {
      "get": {
        "operationId": "findViewById",
        "summary": "Returns a view by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "views"
        ]
      },
      "put": {
        "operationId": "updateViewById",
        "summary": "Updates a view by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ViewDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "views"
        ]
      },
      "delete": {
        "operationId": "deleteViewById",
        "summary": "Deletes a view by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "views"
        ]
      }
    },
    "/merchandise/views/slug/{language}/{slug}": {
      "get": {
        "operationId": "findViewBySlug",
        "summary": "Returns a view by slug and language code.",
        "parameters": [
          {
            "name": "language",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ViewDTO"
                }
              }
            }
          }
        },
        "tags": [
          "views"
        ]
      }
    },
    "/merchandise/merchants": {
      "get": {
        "operationId": "filterMerchants",
        "summary": "Lists all merchants.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "merchants"
        ]
      },
      "post": {
        "operationId": "createMerchant",
        "summary": "Creates a new merchant.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantDTO"
                }
              }
            }
          }
        },
        "tags": [
          "merchants"
        ]
      }
    },
    "/merchandise/merchants/{id}": {
      "get": {
        "operationId": "findMerchantById",
        "summary": "Returns a merchant by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantDTO"
                }
              }
            }
          }
        },
        "tags": [
          "merchants"
        ]
      },
      "put": {
        "operationId": "updateMerchantById",
        "summary": "Updates a merchant by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MerchantDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantDTO"
                }
              }
            }
          }
        },
        "tags": [
          "merchants"
        ]
      },
      "delete": {
        "operationId": "deleteMerchantById",
        "summary": "Deletes a merchant by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantDTO"
                }
              }
            }
          }
        },
        "tags": [
          "merchants"
        ]
      }
    },
    "/merchandise/price-lists": {
      "post": {
        "operationId": "createPriceList",
        "summary": "Creates a new price list.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceListDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListDTO"
                }
              }
            }
          }
        },
        "tags": [
          "price-lists"
        ]
      },
      "get": {
        "operationId": "filterPriceLists",
        "summary": "Lists all price lists.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "price-lists"
        ]
      }
    },
    "/merchandise/price-lists/{id}": {
      "get": {
        "operationId": "findPriceListById",
        "summary": "Returns a price list by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListDTO"
                }
              }
            }
          }
        },
        "tags": [
          "price-lists"
        ]
      },
      "put": {
        "operationId": "updatePriceListById",
        "summary": "Updates a price list by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PriceListDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListDTO"
                }
              }
            }
          }
        },
        "tags": [
          "price-lists"
        ]
      },
      "delete": {
        "operationId": "deletePriceListById",
        "summary": "Deletes a price list by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListDTO"
                }
              }
            }
          }
        },
        "tags": [
          "price-lists"
        ]
      }
    },
    "/merchandise/price-lists/key/{key}": {
      "get": {
        "operationId": "findPriceListByKey",
        "summary": "Returns a price list by key.",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PriceListDTO"
                }
              }
            }
          }
        },
        "tags": [
          "price-lists"
        ]
      }
    },
    "/merchandise/products/bulk/link": {
      "post": {
        "operationId": "linkProducts",
        "summary": "Links multiple products to other records such as categories, brands and collections.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkLinkUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/bulk/unlink": {
      "post": {
        "operationId": "unlinkProducts",
        "summary": "Unlinks multiple products from other records such as categories, brands and collections.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkLinkUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/bulk/delete": {
      "post": {
        "operationId": "deleteProducts",
        "summary": "Deletes multiple products by id.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/bulk/status": {
      "post": {
        "operationId": "changeProductsStatus",
        "summary": "Changes status of multiple products by id.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkStatusChangeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/import": {
      "post": {
        "operationId": "importProducts",
        "summary": "Imports multiple products.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProductDraftDTO"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductDraftDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/{variantId}/offers": {
      "post": {
        "operationId": "addProductOffer",
        "summary": "Creates a new offer per product variant.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      },
      "put": {
        "operationId": "updateProductOffer",
        "summary": "Updates an offer per product variant.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/{variantId}/offers/{priceListKey}/{merchantKey}": {
      "delete": {
        "operationId": "removeProductOffer",
        "summary": "Deletes an offer per product variant, price list and merchant key.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "priceListKey",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "merchantKey",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/status": {
      "patch": {
        "operationId": "setProductStatus",
        "summary": "Updates product status by id.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductStatusUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/weight": {
      "patch": {
        "operationId": "setProductWeight",
        "summary": "Updates product weight by id.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductWeightUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/{variantId}/inventory/add-quantity": {
      "put": {
        "operationId": "addProductQuantity",
        "summary": "Increases inventory quantity per product variant.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/{variantId}/inventory/remove-quantity": {
      "put": {
        "operationId": "removeProductQuantity",
        "summary": "Decreases inventory quantity per product variant.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/{variantId}/inventory/change-quantity": {
      "put": {
        "operationId": "changeProductQuantity",
        "summary": "Updates inventory quantity per product variant.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InventoryUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/assets": {
      "post": {
        "operationId": "addProductAsset",
        "summary": "Creates a new asset per product id.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/assets/{assetIndex}": {
      "put": {
        "operationId": "updateProductAsset",
        "summary": "Updates an asset per product id and asset index.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      },
      "delete": {
        "operationId": "removeProductAsset",
        "summary": "Deletes an asset per product id and asset index.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assetIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/search": {
      "get": {
        "operationId": "searchProducts",
        "summary": "Performs a full text search in all products.",
        "parameters": [
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products": {
      "get": {
        "operationId": "filterProducts",
        "summary": "Lists all products per page.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "products"
        ]
      },
      "post": {
        "operationId": "createProduct",
        "summary": "Creates a new product.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/slugs/{languageCode}": {
      "get": {
        "operationId": "getAllProductSlugs",
        "summary": "Lists all product slugs per language code.",
        "parameters": [
          {
            "name": "languageCode",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{id}": {
      "get": {
        "operationId": "findProductById",
        "summary": "Returns a product by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "statuses",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      },
      "put": {
        "operationId": "updateProductById",
        "summary": "Updates a product by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      },
      "delete": {
        "operationId": "deleteProductById",
        "summary": "Deletes a product by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/slug/{language}/{slug}": {
      "get": {
        "operationId": "findProductBySlug",
        "summary": "Returns a product by slug and language code.",
        "parameters": [
          {
            "name": "language",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "statuses",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/externalId/{externalId}": {
      "get": {
        "operationId": "findProductByExternalId",
        "summary": "Returns a product by external id.",
        "parameters": [
          {
            "name": "externalId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "statuses",
            "required": false,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/externalId/{id}": {
      "put": {
        "operationId": "updateProductByExternalId",
        "summary": "Updates a product by external id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      },
      "delete": {
        "operationId": "deleteProductByExternalId",
        "summary": "Deletes a product by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/{variantId}/images": {
      "post": {
        "operationId": "uploadProductImage",
        "summary": "Creates an image per product variant.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/{variantId}/images/{imageId}": {
      "patch": {
        "operationId": "uploadProductImageById",
        "summary": "Creates an image per product variant and image id.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/{variantId}/images/{imageIndex}/{destinationIndex}": {
      "put": {
        "operationId": "changeProductImageIndex",
        "summary": "Updates an image per product variant and image index.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "destinationIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDTO"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/{variantId}/images/{imageIndex}": {
      "delete": {
        "operationId": "removeProductImage",
        "summary": "Deletes an image per product variant and image index.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageIndex",
            "required": true,
            "in": "path",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/products/{productId}/images": {
      "delete": {
        "operationId": "removeProductImages",
        "summary": "Deletes all product images per product id.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/merchandise/warehouses": {
      "get": {
        "operationId": "filterWarehouses",
        "summary": "Lists all warehouses.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "warehouses"
        ]
      },
      "post": {
        "operationId": "createWarehouse",
        "summary": "Creates a new warehouse.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseDTO"
                }
              }
            }
          }
        },
        "tags": [
          "warehouses"
        ]
      }
    },
    "/merchandise/warehouses/{id}": {
      "get": {
        "operationId": "findWarehouseById",
        "summary": "Returns a warehouse by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseDTO"
                }
              }
            }
          }
        },
        "tags": [
          "warehouses"
        ]
      },
      "put": {
        "operationId": "updateWarehouseById",
        "summary": "Updates a warehouse by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WarehouseDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseDTO"
                }
              }
            }
          }
        },
        "tags": [
          "warehouses"
        ]
      },
      "delete": {
        "operationId": "deleteWarehouseById",
        "summary": "Deletes a warehouse by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WarehouseDTO"
                }
              }
            }
          }
        },
        "tags": [
          "warehouses"
        ]
      }
    },
    "/users/probes/ready": {
      "get": {
        "operationId": "usersReady",
        "summary": "Internal cluster health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/probes/healthy": {
      "get": {
        "operationId": "usersHealthy",
        "summary": "Internal cluster health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/customers/profile": {
      "get": {
        "operationId": "getCustomerProfile",
        "summary": "Returns the current customer profile.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      },
      "put": {
        "operationId": "updateCustomerProfile",
        "summary": "Updates the current customer profile.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      },
      "delete": {
        "operationId": "deleteCustomerProfile",
        "summary": "Deletes the current customer profile.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers/password": {
      "post": {
        "operationId": "changeCustomerPassword",
        "summary": "Updates the current customer password if the provided current password matches.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers/my-addresses": {
      "get": {
        "operationId": "getMyAddresses",
        "summary": "Returns the current customer addresses.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      },
      "post": {
        "operationId": "createMyAddress",
        "summary": "Creates a new address for the current customer.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers/my-addresses/{addressId}": {
      "get": {
        "operationId": "findMyAddressById",
        "summary": "Returns a current customer's address by id.",
        "parameters": [
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      },
      "put": {
        "operationId": "updateMyAddressById",
        "summary": "Updates a current customer's address by id.",
        "parameters": [
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      },
      "delete": {
        "operationId": "deleteMyAddressById",
        "summary": "Deletes a current customer's address by id.",
        "parameters": [
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers": {
      "post": {
        "operationId": "createCustomer",
        "summary": "Creates a new customer.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreateDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      },
      "get": {
        "operationId": "filterCustomers",
        "summary": "Lists all customers.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers/search": {
      "get": {
        "operationId": "searchCustomers",
        "summary": "Searches customers by name, email, phone.",
        "parameters": [
          {
            "name": "expand",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "language",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers/{id}": {
      "get": {
        "operationId": "findCustomerById",
        "summary": "Returns a customer by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      },
      "put": {
        "operationId": "updateCustomerById",
        "summary": "Updates a customer by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      },
      "delete": {
        "operationId": "deleteCustomerById",
        "summary": "Deletes a customer by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers/register": {
      "post": {
        "operationId": "registerCustomer",
        "summary": "Registers a customer.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRegisterDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers/register/facebook": {
      "post": {
        "operationId": "registerCustomerViaFacebook",
        "summary": "Registers a customer via facebook.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRegisterFacebookDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers/password-token": {
      "post": {
        "operationId": "requestCustomerPasswordToken",
        "summary": "Generates a password reset token via which the customer can reset his password.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordTokenDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers/password/reset": {
      "post": {
        "operationId": "resetCustomerPassword",
        "summary": "Resets a customer's password if the reset token is valid.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers/{customerId}/addresses": {
      "get": {
        "operationId": "getCustomerAddresses",
        "summary": "Lists all customer addresses.",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AddressDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      },
      "post": {
        "operationId": "createCustomerAddress",
        "summary": "Creates a new customer address per customer id.",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers/{customerId}/addresses/{addressId}": {
      "get": {
        "operationId": "findCustomerAddressById",
        "summary": "Returns a customer address by customer id and address id.",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      },
      "put": {
        "operationId": "updateCustomerAddressById",
        "summary": "Updates a customer address by customer id and address id.",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      },
      "delete": {
        "operationId": "deleteCustomerAddressById",
        "summary": "Deletes a customer address by customer id and address id.",
        "parameters": [
          {
            "name": "customerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "addressId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers/import": {
      "post": {
        "operationId": "importCustomers",
        "summary": "Imports a list of customers. Returns imported customers with their ids.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomerDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customers/export/csv": {
      "get": {
        "operationId": "exportCustomersCSV",
        "summary": "Exports customers to a csv file.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "customers"
        ]
      }
    },
    "/users/customer-groups": {
      "post": {
        "operationId": "createCustomerGroup",
        "summary": "Creates a new customer group.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerGroupDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "customer-groups"
        ]
      },
      "get": {
        "operationId": "filterCustomerGroups",
        "summary": "Lists all customer groups.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "customer-groups"
        ]
      }
    },
    "/users/customer-groups/{id}": {
      "get": {
        "operationId": "findCustomerGroupById",
        "summary": "Returns a customer group by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerGroupDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customer-groups"
        ]
      },
      "put": {
        "operationId": "updateCustomerGroupById",
        "summary": "Updates a customer group by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerGroupDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "customer-groups"
        ]
      },
      "delete": {
        "operationId": "deleteCustomerGroupById",
        "summary": "Deletes a customer group by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "customer-groups"
        ]
      }
    },
    "/users/customer-subscription-types": {
      "post": {
        "operationId": "createCustomerSubscriptionType",
        "summary": "Creates a new customer subscription type, e.g. newsletter.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerSubscriptionTypeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSubscriptionTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customer-subscription-types"
        ]
      },
      "get": {
        "operationId": "filterCustomerSubscriptionTypes",
        "summary": "Lists all customer subscription types.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "customer-subscription-types"
        ]
      }
    },
    "/users/customer-subscription-types/{id}": {
      "get": {
        "operationId": "findCustomerSubscriptionTypeById",
        "summary": "Returns a customer subscription type by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSubscriptionTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customer-subscription-types"
        ]
      },
      "put": {
        "operationId": "updateCustomerSubscriptionTypeById",
        "summary": "Updates a customer subscription type by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerSubscriptionTypeDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSubscriptionTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customer-subscription-types"
        ]
      },
      "delete": {
        "operationId": "deleteCustomerSubscriptionTypeById",
        "summary": "Deletes a customer subscription type by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSubscriptionTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "customer-subscription-types"
        ]
      }
    },
    "/users/my-subscriptions": {
      "get": {
        "operationId": "getMySubscriptions",
        "summary": "Returns all current customer's subscriptions.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSubscriptionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-subscriptions"
        ]
      }
    },
    "/users/my-subscriptions/subscribe": {
      "post": {
        "operationId": "subscribe",
        "summary": "Current customer subscribes for a specific customer subscription type, e.g. newsletter",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerSubscribeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSubscriptionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-subscriptions"
        ]
      }
    },
    "/users/my-subscriptions/unsubscribe": {
      "post": {
        "operationId": "unsubscribe",
        "summary": "Current customer unsubscribes for a specific customer subscription type, e.g. newsletter",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerSubscribeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerSubscriptionDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-subscriptions"
        ]
      }
    },
    "/users/wallets": {
      "get": {
        "operationId": "filterWallets",
        "summary": "Lists all wallets.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "wallets"
        ]
      },
      "post": {
        "operationId": "createWallet",
        "summary": "Creates a new wallet.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDTO"
                }
              }
            }
          }
        },
        "tags": [
          "wallets"
        ]
      }
    },
    "/users/wallets/{id}": {
      "get": {
        "operationId": "findWalletById",
        "summary": "Returns a wallet by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDTO"
                }
              }
            }
          }
        },
        "tags": [
          "wallets"
        ]
      },
      "put": {
        "operationId": "updateWalletById",
        "summary": "Updates a wallet by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDTO"
                }
              }
            }
          }
        },
        "tags": [
          "wallets"
        ]
      },
      "delete": {
        "operationId": "deleteWalletById",
        "summary": "Deletes a wallet by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDTO"
                }
              }
            }
          }
        },
        "tags": [
          "wallets"
        ]
      }
    },
    "/users/wallets/search": {
      "get": {
        "operationId": "searchWallets",
        "summary": "Searches wallets by key or owner.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "wallets"
        ]
      }
    },
    "/users/wallets/import": {
      "post": {
        "operationId": "importWallets",
        "summary": "Imports a list of wallets. Returns imported wallets with their ids.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WalletDTO"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "wallets"
        ]
      }
    },
    "/users/wallet-types": {
      "get": {
        "operationId": "filterWalletTypes",
        "summary": "Lists all wallet types.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "wallet-types"
        ]
      },
      "post": {
        "operationId": "createWalletType",
        "summary": "Creates a new wallet type.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletTypeDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "wallet-types"
        ]
      }
    },
    "/users/wallet-types/{id}": {
      "get": {
        "operationId": "findWalletTypeById",
        "summary": "Returns a wallet type by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "wallet-types"
        ]
      },
      "put": {
        "operationId": "updateWalletTypeById",
        "summary": "Updates a wallet type by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletTypeDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "wallet-types"
        ]
      },
      "delete": {
        "operationId": "deleteWalletTypeById",
        "summary": "Deletes a wallet type by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "wallet-types"
        ]
      }
    },
    "/users/wallet-types/search": {
      "get": {
        "operationId": "searchWalletTypes",
        "summary": "Searches wallet types by name.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "wallet-types"
        ]
      }
    },
    "/users/my-wallet/type={type}": {
      "get": {
        "operationId": "getMyWalletByType",
        "summary": "Returns a current customers wallet by type.",
        "parameters": [
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-wallet"
        ]
      }
    },
    "/users/my-wallet/request": {
      "post": {
        "operationId": "requestMyWallet",
        "summary": "Current customer requests a new wallet.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-wallet"
        ]
      }
    },
    "/users/my-wallet/add": {
      "post": {
        "operationId": "addMyWallet",
        "summary": "Current customer associates an existing wallet to his account.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletDTO"
                }
              }
            }
          }
        },
        "tags": [
          "my-wallet"
        ]
      }
    },
    "/users/users/profile": {
      "get": {
        "operationId": "getUserProfile",
        "summary": "Returns the current user profile.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "put": {
        "operationId": "updateUserProfile",
        "summary": "Updates the current user profile.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserProfileUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/users/users/password": {
      "post": {
        "operationId": "changeUserPassword",
        "summary": "Updates the current user password if the provided current password matches.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordChangeDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/users/users/password-token": {
      "post": {
        "operationId": "requestUserPasswordToken",
        "summary": "Generates a password reset token via which the user can reset his password.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordTokenDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/users/users/password/reset": {
      "post": {
        "operationId": "resetUserPassword",
        "summary": "Resets a customer's password if the reset token is valid.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/users/users": {
      "get": {
        "operationId": "filterUsers",
        "summary": "Lists all users.",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "users"
        ]
      },
      "post": {
        "operationId": "createUser",
        "summary": "Creates a new user.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/users/users/{id}": {
      "get": {
        "operationId": "findUserById",
        "summary": "Returns a user by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "put": {
        "operationId": "updateUserById",
        "summary": "Updates a user by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      },
      "delete": {
        "operationId": "deleteUserById",
        "summary": "Deletes a user by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDTO"
                }
              }
            }
          }
        },
        "tags": [
          "users"
        ]
      }
    },
    "/cms/probes/ready": {
      "get": {
        "operationId": "ready",
        "summary": "Internal cluster health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cms/probes/healthy": {
      "get": {
        "operationId": "healthy",
        "summary": "Internal cluster health check.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The Health Check is successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {},
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "The Health Check is not successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "info": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "error": {
                      "type": "object",
                      "example": {
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      },
                      "nullable": true
                    },
                    "details": {
                      "type": "object",
                      "example": {
                        "database": {
                          "status": "up"
                        },
                        "redis": {
                          "status": "down",
                          "message": "Could not connect"
                        }
                      },
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "status": {
                            "type": "string"
                          }
                        },
                        "additionalProperties": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/cms/contents": {
      "post": {
        "operationId": "create",
        "summary": "Creates a new record",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDTO"
                }
              }
            }
          }
        },
        "tags": [
          "contents"
        ]
      },
      "get": {
        "operationId": "filter",
        "summary": "Filters the collection",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "contents"
        ]
      }
    },
    "/cms/contents/{id}": {
      "put": {
        "operationId": "update",
        "summary": "Updates a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDTO"
                }
              }
            }
          }
        },
        "tags": [
          "contents"
        ]
      },
      "delete": {
        "operationId": "delete",
        "summary": "Deletes a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDTO"
                }
              }
            }
          }
        },
        "tags": [
          "contents"
        ]
      }
    },
    "/cms/content-types": {
      "post": {
        "operationId": "create",
        "summary": "Creates a new record",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentTypeDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "content-types"
        ]
      },
      "get": {
        "operationId": "filter",
        "summary": "Filters the collection",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "content-types"
        ]
      }
    },
    "/cms/content-types/{id}": {
      "put": {
        "operationId": "update",
        "summary": "Updates a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentTypeDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "content-types"
        ]
      },
      "delete": {
        "operationId": "delete",
        "summary": "Deletes a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "content-types"
        ]
      }
    },
    "/cms/folders": {
      "post": {
        "operationId": "create",
        "summary": "Creates a new folder.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "folders"
        ]
      },
      "get": {
        "operationId": "filter",
        "summary": "Filter folders",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "folders"
        ]
      }
    },
    "/cms/folders/{id}": {
      "put": {
        "operationId": "update",
        "summary": "Update folder",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "folders"
        ]
      },
      "delete": {
        "operationId": "delete",
        "summary": "Deletes a folder by id.",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderDTO"
                }
              }
            }
          }
        },
        "tags": [
          "folders"
        ]
      }
    },
    "/cms/folders/flip": {
      "post": {
        "operationId": "flip",
        "summary": "Flip two folders weights",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlipFoldersDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "folders"
        ]
      }
    },
    "/cms/media/{folderId}": {
      "post": {
        "operationId": "uploadAssets",
        "summary": "Uploads an asset.",
        "parameters": [
          {
            "name": "folderId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "media"
        ]
      }
    },
    "/cms/media": {
      "get": {
        "operationId": "filter",
        "summary": "Filter media assets",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "media"
        ]
      },
      "delete": {
        "operationId": "deleteMedia",
        "summary": "Deletes media entries",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "media"
        ]
      }
    },
    "/cms/pages": {
      "post": {
        "operationId": "create",
        "summary": "Creates a new record",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PageDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageDTO"
                }
              }
            }
          }
        },
        "tags": [
          "pages"
        ]
      },
      "get": {
        "operationId": "filter",
        "summary": "Filters the collection",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "pages"
        ]
      }
    },
    "/cms/pages/{id}": {
      "put": {
        "operationId": "update",
        "summary": "Updates a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PageDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageDTO"
                }
              }
            }
          }
        },
        "tags": [
          "pages"
        ]
      },
      "delete": {
        "operationId": "delete",
        "summary": "Deletes a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageDTO"
                }
              }
            }
          }
        },
        "tags": [
          "pages"
        ]
      }
    },
    "/cms/tags": {
      "post": {
        "operationId": "create",
        "summary": "Creates a new record",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDTO"
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ]
      },
      "get": {
        "operationId": "filter",
        "summary": "Filters the collection",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "tags"
        ]
      }
    },
    "/cms/tags/{id}": {
      "put": {
        "operationId": "update",
        "summary": "Updates a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDTO"
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ]
      },
      "delete": {
        "operationId": "delete",
        "summary": "Deletes a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagDTO"
                }
              }
            }
          }
        },
        "tags": [
          "tags"
        ]
      }
    },
    "/cms/value-types": {
      "post": {
        "operationId": "create",
        "summary": "Creates a new record",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueTypeDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "value-types"
        ]
      },
      "get": {
        "operationId": "filter",
        "summary": "Filters the collection",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "value-types"
        ]
      }
    },
    "/cms/value-types/{id}": {
      "put": {
        "operationId": "update",
        "summary": "Updates a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValueTypeDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "value-types"
        ]
      },
      "delete": {
        "operationId": "delete",
        "summary": "Deletes a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValueTypeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "value-types"
        ]
      }
    },
    "/cms/widgets": {
      "post": {
        "operationId": "create",
        "summary": "Creates a new record",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WidgetDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetDTO"
                }
              }
            }
          }
        },
        "tags": [
          "widgets"
        ]
      },
      "get": {
        "operationId": "filter",
        "summary": "Filters the collection",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "widgets"
        ]
      }
    },
    "/cms/widgets/{id}": {
      "put": {
        "operationId": "update",
        "summary": "Updates a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WidgetDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetDTO"
                }
              }
            }
          }
        },
        "tags": [
          "widgets"
        ]
      },
      "delete": {
        "operationId": "delete",
        "summary": "Deletes a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetDTO"
                }
              }
            }
          }
        },
        "tags": [
          "widgets"
        ]
      }
    },
    "/cms/widget-templates": {
      "post": {
        "operationId": "create",
        "summary": "Creates a new record",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WidgetTemplateDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetTemplateDTO"
                }
              }
            }
          }
        },
        "tags": [
          "widget-templates"
        ]
      },
      "get": {
        "operationId": "filter",
        "summary": "Filters the collection",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "project",
            "required": false,
            "in": "query",
            "schema": {
              "default": [],
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "default": 10000,
              "type": "number"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "widget-templates"
        ]
      }
    },
    "/cms/widget-templates/{id}": {
      "put": {
        "operationId": "update",
        "summary": "Updates a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WidgetTemplateDraftDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetTemplateDTO"
                }
              }
            }
          }
        },
        "tags": [
          "widget-templates"
        ]
      },
      "delete": {
        "operationId": "delete",
        "summary": "Deletes a record by id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetTemplateDTO"
                }
              }
            }
          }
        },
        "tags": [
          "widget-templates"
        ]
      }
    },
    "/cms/themes/install": {
      "post": {
        "operationId": "install",
        "summary": "Install a theme",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThemeDraftDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "themes"
        ]
      }
    },
    "/cms/themes/themeKey={themeKey}/viewKey={viewKey}": {
      "delete": {
        "operationId": "deleteByKey",
        "summary": "Deletes theme resources",
        "parameters": [
          {
            "name": "themeKey",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "viewKey",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThemeDTO"
                }
              }
            }
          }
        },
        "tags": [
          "themes"
        ]
      }
    }
  }
}