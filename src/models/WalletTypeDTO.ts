/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface WalletTypeDTO
 */
export interface WalletTypeDTO {
    /**
     * 
     * @type {string}
     * @memberof WalletTypeDTO
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof WalletTypeDTO
     */
    createdAt: number;
    /**
     * 
     * @type {number}
     * @memberof WalletTypeDTO
     */
    updatedAt: number;
    /**
     * 
     * @type {number}
     * @memberof WalletTypeDTO
     */
    version?: number;
    /**
     * 
     * @type {string}
     * @memberof WalletTypeDTO
     */
    key: string;
    /**
     * 
     * @type {string}
     * @memberof WalletTypeDTO
     */
    currencyType: WalletTypeDTOCurrencyTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof WalletTypeDTO
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof WalletTypeDTO
     */
    manageType: WalletTypeDTOManageTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof WalletTypeDTO
     */
    externalApiUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof WalletTypeDTO
     */
    externalApiUsername?: string;
    /**
     * 
     * @type {string}
     * @memberof WalletTypeDTO
     */
    externalApiPassword?: string;
}

export function WalletTypeDTOFromJSON(json: any): WalletTypeDTO {
    return WalletTypeDTOFromJSONTyped(json, false);
}

export function WalletTypeDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): WalletTypeDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
        'version': !exists(json, 'version') ? undefined : json['version'],
        'key': json['key'],
        'currencyType': json['currencyType'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'manageType': json['manageType'],
        'externalApiUrl': !exists(json, 'externalApiUrl') ? undefined : json['externalApiUrl'],
        'externalApiUsername': !exists(json, 'externalApiUsername') ? undefined : json['externalApiUsername'],
        'externalApiPassword': !exists(json, 'externalApiPassword') ? undefined : json['externalApiPassword'],
    };
}

export function WalletTypeDTOToJSON(value?: WalletTypeDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'version': value.version,
        'key': value.key,
        'currencyType': value.currencyType,
        'currencyCode': value.currencyCode,
        'manageType': value.manageType,
        'externalApiUrl': value.externalApiUrl,
        'externalApiUsername': value.externalApiUsername,
        'externalApiPassword': value.externalApiPassword,
    };
}

/**
* @export
* @enum {string}
*/
export enum WalletTypeDTOCurrencyTypeEnum {
    Virtual = 'virtual',
    Fiat = 'fiat',
    Crypto = 'crypto'
}
/**
* @export
* @enum {string}
*/
export enum WalletTypeDTOManageTypeEnum {
    Internal = 'internal',
    External = 'external'
}


