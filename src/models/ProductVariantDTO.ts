/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ImageSetDTO,
    ImageSetDTOFromJSON,
    ImageSetDTOFromJSONTyped,
    ImageSetDTOToJSON,
    InventoryDTO,
    InventoryDTOFromJSON,
    InventoryDTOFromJSONTyped,
    InventoryDTOToJSON,
    OfferDTO,
    OfferDTOFromJSON,
    OfferDTOFromJSONTyped,
    OfferDTOToJSON,
    ProductAttributeDTO,
    ProductAttributeDTOFromJSON,
    ProductAttributeDTOFromJSONTyped,
    ProductAttributeDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface ProductVariantDTO
 */
export interface ProductVariantDTO {
    /**
     * 
     * @type {Array<OfferDTO>}
     * @memberof ProductVariantDTO
     */
    offers: Array<OfferDTO>;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantDTO
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantDTO
     */
    sku: string;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantDTO
     */
    masterBarcode?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductVariantDTO
     */
    barcodes: Array<string>;
    /**
     * 
     * @type {Array<InventoryDTO>}
     * @memberof ProductVariantDTO
     */
    inventories: Array<InventoryDTO>;
    /**
     * 
     * @type {Array<ProductAttributeDTO>}
     * @memberof ProductVariantDTO
     */
    attributes: Array<ProductAttributeDTO>;
    /**
     * 
     * @type {Array<ImageSetDTO>}
     * @memberof ProductVariantDTO
     */
    imageSets: Array<ImageSetDTO>;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantDTO
     */
    weight?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantDTO
     */
    unitOfWeight?: ProductVariantDTOUnitOfWeightEnum;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantDTO
     */
    length?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantDTO
     */
    width?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductVariantDTO
     */
    height?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductVariantDTO
     */
    unitOfMetric?: ProductVariantDTOUnitOfMetricEnum;
}

export function ProductVariantDTOFromJSON(json: any): ProductVariantDTO {
    return ProductVariantDTOFromJSONTyped(json, false);
}

export function ProductVariantDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductVariantDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'offers': ((json['offers'] as Array<any>).map(OfferDTOFromJSON)),
        'id': json['id'],
        'sku': json['sku'],
        'masterBarcode': !exists(json, 'masterBarcode') ? undefined : json['masterBarcode'],
        'barcodes': json['barcodes'],
        'inventories': ((json['inventories'] as Array<any>).map(InventoryDTOFromJSON)),
        'attributes': ((json['attributes'] as Array<any>).map(ProductAttributeDTOFromJSON)),
        'imageSets': ((json['imageSets'] as Array<any>).map(ImageSetDTOFromJSON)),
        'weight': !exists(json, 'weight') ? undefined : json['weight'],
        'unitOfWeight': !exists(json, 'unitOfWeight') ? undefined : json['unitOfWeight'],
        'length': !exists(json, 'length') ? undefined : json['length'],
        'width': !exists(json, 'width') ? undefined : json['width'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'unitOfMetric': !exists(json, 'unitOfMetric') ? undefined : json['unitOfMetric'],
    };
}

export function ProductVariantDTOToJSON(value?: ProductVariantDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'offers': ((value.offers as Array<any>).map(OfferDTOToJSON)),
        'id': value.id,
        'sku': value.sku,
        'masterBarcode': value.masterBarcode,
        'barcodes': value.barcodes,
        'inventories': ((value.inventories as Array<any>).map(InventoryDTOToJSON)),
        'attributes': ((value.attributes as Array<any>).map(ProductAttributeDTOToJSON)),
        'imageSets': ((value.imageSets as Array<any>).map(ImageSetDTOToJSON)),
        'weight': value.weight,
        'unitOfWeight': value.unitOfWeight,
        'length': value.length,
        'width': value.width,
        'height': value.height,
        'unitOfMetric': value.unitOfMetric,
    };
}

/**
* @export
* @enum {string}
*/
export enum ProductVariantDTOUnitOfWeightEnum {
    Gr = 'gr',
    Oz = 'oz'
}
/**
* @export
* @enum {string}
*/
export enum ProductVariantDTOUnitOfMetricEnum {
    Cm = 'cm',
    Inch = 'inch'
}


