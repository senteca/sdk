/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressDTO,
    AddressDTOFromJSON,
    AddressDTOFromJSONTyped,
    AddressDTOToJSON,
    DiscountCodeInfoDTO,
    DiscountCodeInfoDTOFromJSON,
    DiscountCodeInfoDTOFromJSONTyped,
    DiscountCodeInfoDTOToJSON,
    IdReferenceDTO,
    IdReferenceDTOFromJSON,
    IdReferenceDTOFromJSONTyped,
    IdReferenceDTOToJSON,
    KeyReferenceDTO,
    KeyReferenceDTOFromJSON,
    KeyReferenceDTOFromJSONTyped,
    KeyReferenceDTOToJSON,
    LineItemImportDTO,
    LineItemImportDTOFromJSON,
    LineItemImportDTOFromJSONTyped,
    LineItemImportDTOToJSON,
    MerchantMethodDTO,
    MerchantMethodDTOFromJSON,
    MerchantMethodDTOFromJSONTyped,
    MerchantMethodDTOToJSON,
    MerchantPriceDTO,
    MerchantPriceDTOFromJSON,
    MerchantPriceDTOFromJSONTyped,
    MerchantPriceDTOToJSON,
    MerchantTaxedPriceDTO,
    MerchantTaxedPriceDTOFromJSON,
    MerchantTaxedPriceDTOFromJSONTyped,
    MerchantTaxedPriceDTOToJSON,
    MoneyDTO,
    MoneyDTOFromJSON,
    MoneyDTOFromJSONTyped,
    MoneyDTOToJSON,
    OrderWalletDTO,
    OrderWalletDTOFromJSON,
    OrderWalletDTOFromJSONTyped,
    OrderWalletDTOToJSON,
    ShippingDTO,
    ShippingDTOFromJSON,
    ShippingDTOFromJSONTyped,
    ShippingDTOToJSON,
    TaxedPriceDTO,
    TaxedPriceDTOFromJSON,
    TaxedPriceDTOFromJSONTyped,
    TaxedPriceDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface OrderImportDTO
 */
export interface OrderImportDTO {
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof OrderImportDTO
     */
    createdAt: number;
    /**
     * 
     * @type {number}
     * @memberof OrderImportDTO
     */
    updatedAt: number;
    /**
     * 
     * @type {number}
     * @memberof OrderImportDTO
     */
    version: number;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    status: OrderImportDTOStatusEnum;
    /**
     * 
     * @type {KeyReferenceDTO}
     * @memberof OrderImportDTO
     */
    state?: KeyReferenceDTO;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    countryCode: string;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    currencyCode: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrderImportDTO
     */
    taxIncluded: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    languageCode?: string;
    /**
     * 
     * @type {KeyReferenceDTO}
     * @memberof OrderImportDTO
     */
    priceList: KeyReferenceDTO;
    /**
     * 
     * @type {number}
     * @memberof OrderImportDTO
     */
    orderNumber: number;
    /**
     * 
     * @type {KeyReferenceDTO}
     * @memberof OrderImportDTO
     */
    store: KeyReferenceDTO;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    taxRoundingMode?: OrderImportDTOTaxRoundingModeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    taxCalculationMode?: OrderImportDTOTaxCalculationModeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    inventoryMode?: OrderImportDTOInventoryModeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    draftInventoryMode?: OrderImportDTODraftInventoryModeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    customerId?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    customerFirstName?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    customerLastName?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    customerFullName?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    customerPhone?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    customerEmail?: string;
    /**
     * 
     * @type {KeyReferenceDTO}
     * @memberof OrderImportDTO
     */
    customerGroup?: KeyReferenceDTO;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    anonymousId?: string;
    /**
     * 
     * @type {AddressDTO}
     * @memberof OrderImportDTO
     */
    shippingAddress: AddressDTO;
    /**
     * 
     * @type {AddressDTO}
     * @memberof OrderImportDTO
     */
    billingAddress: AddressDTO;
    /**
     * 
     * @type {Array<LineItemImportDTO>}
     * @memberof OrderImportDTO
     */
    lineItems: Array<LineItemImportDTO>;
    /**
     * 
     * @type {Array<KeyReferenceDTO>}
     * @memberof OrderImportDTO
     */
    merchants: Array<KeyReferenceDTO>;
    /**
     * 
     * @type {Array<MerchantPriceDTO>}
     * @memberof OrderImportDTO
     */
    merchantsTotalPrices: Array<MerchantPriceDTO>;
    /**
     * 
     * @type {MoneyDTO}
     * @memberof OrderImportDTO
     */
    grandTotalPrice: MoneyDTO;
    /**
     * 
     * @type {Array<MerchantTaxedPriceDTO>}
     * @memberof OrderImportDTO
     */
    merchantsTaxedPrices: Array<MerchantTaxedPriceDTO>;
    /**
     * 
     * @type {TaxedPriceDTO}
     * @memberof OrderImportDTO
     */
    grandTaxedPrice?: TaxedPriceDTO;
    /**
     * 
     * @type {Array<DiscountCodeInfoDTO>}
     * @memberof OrderImportDTO
     */
    discountCodes: Array<DiscountCodeInfoDTO>;
    /**
     * 
     * @type {OrderWalletDTO}
     * @memberof OrderImportDTO
     */
    wallet?: OrderWalletDTO;
    /**
     * 
     * @type {Array<object>}
     * @memberof OrderImportDTO
     */
    payments: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    paymentsAuthority?: OrderImportDTOPaymentsAuthorityEnum;
    /**
     * 
     * @type {Array<MerchantMethodDTO>}
     * @memberof OrderImportDTO
     */
    merchantPaymentMethods?: Array<MerchantMethodDTO>;
    /**
     * 
     * @type {IdReferenceDTO}
     * @memberof OrderImportDTO
     */
    platformPaymentMethod?: IdReferenceDTO;
    /**
     * 
     * @type {Array<ShippingDTO>}
     * @memberof OrderImportDTO
     */
    shippings: Array<ShippingDTO>;
    /**
     * 
     * @type {string}
     * @memberof OrderImportDTO
     */
    shippingsAuthority?: OrderImportDTOShippingsAuthorityEnum;
    /**
     * 
     * @type {Array<MerchantMethodDTO>}
     * @memberof OrderImportDTO
     */
    merchantShippingMethods?: Array<MerchantMethodDTO>;
    /**
     * 
     * @type {IdReferenceDTO}
     * @memberof OrderImportDTO
     */
    platformShippingMethod?: IdReferenceDTO;
}

export function OrderImportDTOFromJSON(json: any): OrderImportDTO {
    return OrderImportDTOFromJSONTyped(json, false);
}

export function OrderImportDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrderImportDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'createdAt': json['createdAt'],
        'updatedAt': json['updatedAt'],
        'version': json['version'],
        'status': json['status'],
        'state': !exists(json, 'state') ? undefined : KeyReferenceDTOFromJSON(json['state']),
        'countryCode': json['countryCode'],
        'currencyCode': json['currencyCode'],
        'taxIncluded': json['taxIncluded'],
        'languageCode': !exists(json, 'languageCode') ? undefined : json['languageCode'],
        'priceList': KeyReferenceDTOFromJSON(json['priceList']),
        'orderNumber': json['orderNumber'],
        'store': KeyReferenceDTOFromJSON(json['store']),
        'taxRoundingMode': !exists(json, 'taxRoundingMode') ? undefined : json['taxRoundingMode'],
        'taxCalculationMode': !exists(json, 'taxCalculationMode') ? undefined : json['taxCalculationMode'],
        'inventoryMode': !exists(json, 'inventoryMode') ? undefined : json['inventoryMode'],
        'draftInventoryMode': !exists(json, 'draftInventoryMode') ? undefined : json['draftInventoryMode'],
        'customerId': !exists(json, 'customerId') ? undefined : json['customerId'],
        'customerFirstName': !exists(json, 'customerFirstName') ? undefined : json['customerFirstName'],
        'customerLastName': !exists(json, 'customerLastName') ? undefined : json['customerLastName'],
        'customerFullName': !exists(json, 'customerFullName') ? undefined : json['customerFullName'],
        'customerPhone': !exists(json, 'customerPhone') ? undefined : json['customerPhone'],
        'customerEmail': !exists(json, 'customerEmail') ? undefined : json['customerEmail'],
        'customerGroup': !exists(json, 'customerGroup') ? undefined : KeyReferenceDTOFromJSON(json['customerGroup']),
        'anonymousId': !exists(json, 'anonymousId') ? undefined : json['anonymousId'],
        'shippingAddress': AddressDTOFromJSON(json['shippingAddress']),
        'billingAddress': AddressDTOFromJSON(json['billingAddress']),
        'lineItems': ((json['lineItems'] as Array<any>).map(LineItemImportDTOFromJSON)),
        'merchants': ((json['merchants'] as Array<any>).map(KeyReferenceDTOFromJSON)),
        'merchantsTotalPrices': ((json['merchantsTotalPrices'] as Array<any>).map(MerchantPriceDTOFromJSON)),
        'grandTotalPrice': MoneyDTOFromJSON(json['grandTotalPrice']),
        'merchantsTaxedPrices': ((json['merchantsTaxedPrices'] as Array<any>).map(MerchantTaxedPriceDTOFromJSON)),
        'grandTaxedPrice': !exists(json, 'grandTaxedPrice') ? undefined : TaxedPriceDTOFromJSON(json['grandTaxedPrice']),
        'discountCodes': ((json['discountCodes'] as Array<any>).map(DiscountCodeInfoDTOFromJSON)),
        'wallet': !exists(json, 'wallet') ? undefined : OrderWalletDTOFromJSON(json['wallet']),
        'payments': json['payments'],
        'paymentsAuthority': !exists(json, 'paymentsAuthority') ? undefined : json['paymentsAuthority'],
        'merchantPaymentMethods': !exists(json, 'merchantPaymentMethods') ? undefined : ((json['merchantPaymentMethods'] as Array<any>).map(MerchantMethodDTOFromJSON)),
        'platformPaymentMethod': !exists(json, 'platformPaymentMethod') ? undefined : IdReferenceDTOFromJSON(json['platformPaymentMethod']),
        'shippings': ((json['shippings'] as Array<any>).map(ShippingDTOFromJSON)),
        'shippingsAuthority': !exists(json, 'shippingsAuthority') ? undefined : json['shippingsAuthority'],
        'merchantShippingMethods': !exists(json, 'merchantShippingMethods') ? undefined : ((json['merchantShippingMethods'] as Array<any>).map(MerchantMethodDTOFromJSON)),
        'platformShippingMethod': !exists(json, 'platformShippingMethod') ? undefined : IdReferenceDTOFromJSON(json['platformShippingMethod']),
    };
}

export function OrderImportDTOToJSON(value?: OrderImportDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'createdAt': value.createdAt,
        'updatedAt': value.updatedAt,
        'version': value.version,
        'status': value.status,
        'state': KeyReferenceDTOToJSON(value.state),
        'countryCode': value.countryCode,
        'currencyCode': value.currencyCode,
        'taxIncluded': value.taxIncluded,
        'languageCode': value.languageCode,
        'priceList': KeyReferenceDTOToJSON(value.priceList),
        'orderNumber': value.orderNumber,
        'store': KeyReferenceDTOToJSON(value.store),
        'taxRoundingMode': value.taxRoundingMode,
        'taxCalculationMode': value.taxCalculationMode,
        'inventoryMode': value.inventoryMode,
        'draftInventoryMode': value.draftInventoryMode,
        'customerId': value.customerId,
        'customerFirstName': value.customerFirstName,
        'customerLastName': value.customerLastName,
        'customerFullName': value.customerFullName,
        'customerPhone': value.customerPhone,
        'customerEmail': value.customerEmail,
        'customerGroup': KeyReferenceDTOToJSON(value.customerGroup),
        'anonymousId': value.anonymousId,
        'shippingAddress': AddressDTOToJSON(value.shippingAddress),
        'billingAddress': AddressDTOToJSON(value.billingAddress),
        'lineItems': ((value.lineItems as Array<any>).map(LineItemImportDTOToJSON)),
        'merchants': ((value.merchants as Array<any>).map(KeyReferenceDTOToJSON)),
        'merchantsTotalPrices': ((value.merchantsTotalPrices as Array<any>).map(MerchantPriceDTOToJSON)),
        'grandTotalPrice': MoneyDTOToJSON(value.grandTotalPrice),
        'merchantsTaxedPrices': ((value.merchantsTaxedPrices as Array<any>).map(MerchantTaxedPriceDTOToJSON)),
        'grandTaxedPrice': TaxedPriceDTOToJSON(value.grandTaxedPrice),
        'discountCodes': ((value.discountCodes as Array<any>).map(DiscountCodeInfoDTOToJSON)),
        'wallet': OrderWalletDTOToJSON(value.wallet),
        'payments': value.payments,
        'paymentsAuthority': value.paymentsAuthority,
        'merchantPaymentMethods': value.merchantPaymentMethods === undefined ? undefined : ((value.merchantPaymentMethods as Array<any>).map(MerchantMethodDTOToJSON)),
        'platformPaymentMethod': IdReferenceDTOToJSON(value.platformPaymentMethod),
        'shippings': ((value.shippings as Array<any>).map(ShippingDTOToJSON)),
        'shippingsAuthority': value.shippingsAuthority,
        'merchantShippingMethods': value.merchantShippingMethods === undefined ? undefined : ((value.merchantShippingMethods as Array<any>).map(MerchantMethodDTOToJSON)),
        'platformShippingMethod': IdReferenceDTOToJSON(value.platformShippingMethod),
    };
}

/**
* @export
* @enum {string}
*/
export enum OrderImportDTOStatusEnum {
    Draft = 'Draft',
    Open = 'Open',
    Confirmed = 'Confirmed',
    Complete = 'Complete',
    Cancelled = 'Cancelled'
}
/**
* @export
* @enum {string}
*/
export enum OrderImportDTOTaxRoundingModeEnum {
    HalfEven = 'HalfEven',
    HalfUp = 'HalfUp',
    HalfDown = 'HalfDown'
}
/**
* @export
* @enum {string}
*/
export enum OrderImportDTOTaxCalculationModeEnum {
    LineItemLevel = 'LineItemLevel',
    UnitPriceLevel = 'UnitPriceLevel'
}
/**
* @export
* @enum {string}
*/
export enum OrderImportDTOInventoryModeEnum {
    TrackOnly = 'TrackOnly',
    ReserveOnOrder = 'ReserveOnOrder',
    None = 'None'
}
/**
* @export
* @enum {string}
*/
export enum OrderImportDTODraftInventoryModeEnum {
    TrackOnly = 'TrackOnly',
    ReserveOnOrder = 'ReserveOnOrder',
    None = 'None'
}
/**
* @export
* @enum {string}
*/
export enum OrderImportDTOPaymentsAuthorityEnum {
    Platform = 'Platform',
    Merchant = 'Merchant'
}
/**
* @export
* @enum {string}
*/
export enum OrderImportDTOShippingsAuthorityEnum {
    Platform = 'Platform',
    Merchant = 'Merchant'
}


