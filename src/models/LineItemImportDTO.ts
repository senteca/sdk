/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DiscountedLineItemPriceForQuantity,
    DiscountedLineItemPriceForQuantityFromJSON,
    DiscountedLineItemPriceForQuantityFromJSONTyped,
    DiscountedLineItemPriceForQuantityToJSON,
    IdReferenceDTO,
    IdReferenceDTOFromJSON,
    IdReferenceDTOFromJSONTyped,
    IdReferenceDTOToJSON,
    ItemShippingDetailsDTO,
    ItemShippingDetailsDTOFromJSON,
    ItemShippingDetailsDTOFromJSONTyped,
    ItemShippingDetailsDTOToJSON,
    LineItemStateForQuantityDTO,
    LineItemStateForQuantityDTOFromJSON,
    LineItemStateForQuantityDTOFromJSONTyped,
    LineItemStateForQuantityDTOToJSON,
    MoneyDTO,
    MoneyDTOFromJSON,
    MoneyDTOFromJSONTyped,
    MoneyDTOToJSON,
    OfferDTO,
    OfferDTOFromJSON,
    OfferDTOFromJSONTyped,
    OfferDTOToJSON,
    ProductVariantDTO,
    ProductVariantDTOFromJSON,
    ProductVariantDTOFromJSONTyped,
    ProductVariantDTOToJSON,
    TaxRateDTO,
    TaxRateDTOFromJSON,
    TaxRateDTOFromJSONTyped,
    TaxRateDTOToJSON,
    TaxedItemPriceDTO,
    TaxedItemPriceDTOFromJSON,
    TaxedItemPriceDTOFromJSONTyped,
    TaxedItemPriceDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface LineItemImportDTO
 */
export interface LineItemImportDTO {
    /**
     * 
     * @type {string}
     * @memberof LineItemImportDTO
     */
    id?: string;
    /**
     * 
     * @type {Array<LineItemStateForQuantityDTO>}
     * @memberof LineItemImportDTO
     */
    states: Array<LineItemStateForQuantityDTO>;
    /**
     * 
     * @type {string}
     * @memberof LineItemImportDTO
     */
    productId: string;
    /**
     * 
     * @type {object}
     * @memberof LineItemImportDTO
     */
    productName?: object;
    /**
     * 
     * @type {object}
     * @memberof LineItemImportDTO
     */
    productSlug?: object;
    /**
     * 
     * @type {string}
     * @memberof LineItemImportDTO
     */
    productThumbnailUrl?: string;
    /**
     * 
     * @type {Array<IdReferenceDTO>}
     * @memberof LineItemImportDTO
     */
    productCategories?: Array<IdReferenceDTO>;
    /**
     * 
     * @type {Array<IdReferenceDTO>}
     * @memberof LineItemImportDTO
     */
    productBrands?: Array<IdReferenceDTO>;
    /**
     * 
     * @type {Array<IdReferenceDTO>}
     * @memberof LineItemImportDTO
     */
    productCollections?: Array<IdReferenceDTO>;
    /**
     * 
     * @type {IdReferenceDTO}
     * @memberof LineItemImportDTO
     */
    productTaxCategory?: IdReferenceDTO;
    /**
     * 
     * @type {ProductVariantDTO}
     * @memberof LineItemImportDTO
     */
    variant?: ProductVariantDTO;
    /**
     * 
     * @type {OfferDTO}
     * @memberof LineItemImportDTO
     */
    offer: OfferDTO;
    /**
     * 
     * @type {number}
     * @memberof LineItemImportDTO
     */
    quantity: number;
    /**
     * 
     * @type {TaxedItemPriceDTO}
     * @memberof LineItemImportDTO
     */
    taxedPrice?: TaxedItemPriceDTO;
    /**
     * 
     * @type {TaxRateDTO}
     * @memberof LineItemImportDTO
     */
    taxRate?: TaxRateDTO;
    /**
     * 
     * @type {MoneyDTO}
     * @memberof LineItemImportDTO
     */
    totalPrice?: MoneyDTO;
    /**
     * 
     * @type {Array<DiscountedLineItemPriceForQuantity>}
     * @memberof LineItemImportDTO
     */
    discountedPricePerQuantity?: Array<DiscountedLineItemPriceForQuantity>;
    /**
     * 
     * @type {string}
     * @memberof LineItemImportDTO
     */
    lineItemMode: LineItemImportDTOLineItemModeEnum;
    /**
     * 
     * @type {ItemShippingDetailsDTO}
     * @memberof LineItemImportDTO
     */
    shippingDetails?: ItemShippingDetailsDTO;
}

export function LineItemImportDTOFromJSON(json: any): LineItemImportDTO {
    return LineItemImportDTOFromJSONTyped(json, false);
}

export function LineItemImportDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): LineItemImportDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'states': ((json['states'] as Array<any>).map(LineItemStateForQuantityDTOFromJSON)),
        'productId': json['productId'],
        'productName': !exists(json, 'productName') ? undefined : json['productName'],
        'productSlug': !exists(json, 'productSlug') ? undefined : json['productSlug'],
        'productThumbnailUrl': !exists(json, 'productThumbnailUrl') ? undefined : json['productThumbnailUrl'],
        'productCategories': !exists(json, 'productCategories') ? undefined : ((json['productCategories'] as Array<any>).map(IdReferenceDTOFromJSON)),
        'productBrands': !exists(json, 'productBrands') ? undefined : ((json['productBrands'] as Array<any>).map(IdReferenceDTOFromJSON)),
        'productCollections': !exists(json, 'productCollections') ? undefined : ((json['productCollections'] as Array<any>).map(IdReferenceDTOFromJSON)),
        'productTaxCategory': !exists(json, 'productTaxCategory') ? undefined : IdReferenceDTOFromJSON(json['productTaxCategory']),
        'variant': !exists(json, 'variant') ? undefined : ProductVariantDTOFromJSON(json['variant']),
        'offer': OfferDTOFromJSON(json['offer']),
        'quantity': json['quantity'],
        'taxedPrice': !exists(json, 'taxedPrice') ? undefined : TaxedItemPriceDTOFromJSON(json['taxedPrice']),
        'taxRate': !exists(json, 'taxRate') ? undefined : TaxRateDTOFromJSON(json['taxRate']),
        'totalPrice': !exists(json, 'totalPrice') ? undefined : MoneyDTOFromJSON(json['totalPrice']),
        'discountedPricePerQuantity': !exists(json, 'discountedPricePerQuantity') ? undefined : ((json['discountedPricePerQuantity'] as Array<any>).map(DiscountedLineItemPriceForQuantityFromJSON)),
        'lineItemMode': json['lineItemMode'],
        'shippingDetails': !exists(json, 'shippingDetails') ? undefined : ItemShippingDetailsDTOFromJSON(json['shippingDetails']),
    };
}

export function LineItemImportDTOToJSON(value?: LineItemImportDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'states': ((value.states as Array<any>).map(LineItemStateForQuantityDTOToJSON)),
        'productId': value.productId,
        'productName': value.productName,
        'productSlug': value.productSlug,
        'productThumbnailUrl': value.productThumbnailUrl,
        'productCategories': value.productCategories === undefined ? undefined : ((value.productCategories as Array<any>).map(IdReferenceDTOToJSON)),
        'productBrands': value.productBrands === undefined ? undefined : ((value.productBrands as Array<any>).map(IdReferenceDTOToJSON)),
        'productCollections': value.productCollections === undefined ? undefined : ((value.productCollections as Array<any>).map(IdReferenceDTOToJSON)),
        'productTaxCategory': IdReferenceDTOToJSON(value.productTaxCategory),
        'variant': ProductVariantDTOToJSON(value.variant),
        'offer': OfferDTOToJSON(value.offer),
        'quantity': value.quantity,
        'taxedPrice': TaxedItemPriceDTOToJSON(value.taxedPrice),
        'taxRate': TaxRateDTOToJSON(value.taxRate),
        'totalPrice': MoneyDTOToJSON(value.totalPrice),
        'discountedPricePerQuantity': value.discountedPricePerQuantity === undefined ? undefined : ((value.discountedPricePerQuantity as Array<any>).map(DiscountedLineItemPriceForQuantityToJSON)),
        'lineItemMode': value.lineItemMode,
        'shippingDetails': ItemShippingDetailsDTOToJSON(value.shippingDetails),
    };
}

/**
* @export
* @enum {string}
*/
export enum LineItemImportDTOLineItemModeEnum {
    Standard = 'Standard',
    Gift = 'Gift'
}


