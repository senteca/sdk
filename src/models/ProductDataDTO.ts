/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AssetDTO,
    AssetDTOFromJSON,
    AssetDTOFromJSONTyped,
    AssetDTOToJSON,
    ContentDTO,
    ContentDTOFromJSON,
    ContentDTOFromJSONTyped,
    ContentDTOToJSON,
    IdReferenceDTO,
    IdReferenceDTOFromJSON,
    IdReferenceDTOFromJSONTyped,
    IdReferenceDTOToJSON,
    ProductVariantDTO,
    ProductVariantDTOFromJSON,
    ProductVariantDTOFromJSONTyped,
    ProductVariantDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface ProductDataDTO
 */
export interface ProductDataDTO {
    /**
     * 
     * @type {IdReferenceDTO}
     * @memberof ProductDataDTO
     */
    taxCategory: IdReferenceDTO;
    /**
     * 
     * @type {object}
     * @memberof ProductDataDTO
     */
    name: object;
    /**
     * 
     * @type {object}
     * @memberof ProductDataDTO
     */
    description: object;
    /**
     * 
     * @type {number}
     * @memberof ProductDataDTO
     */
    weight: number;
    /**
     * 
     * @type {Array<ContentDTO>}
     * @memberof ProductDataDTO
     */
    contents: Array<ContentDTO>;
    /**
     * 
     * @type {Array<IdReferenceDTO>}
     * @memberof ProductDataDTO
     */
    categories?: Array<IdReferenceDTO>;
    /**
     * 
     * @type {Array<IdReferenceDTO>}
     * @memberof ProductDataDTO
     */
    masterCategoriesPath?: Array<IdReferenceDTO>;
    /**
     * 
     * @type {Array<IdReferenceDTO>}
     * @memberof ProductDataDTO
     */
    brands?: Array<IdReferenceDTO>;
    /**
     * 
     * @type {Array<IdReferenceDTO>}
     * @memberof ProductDataDTO
     */
    collections?: Array<IdReferenceDTO>;
    /**
     * 
     * @type {Array<AssetDTO>}
     * @memberof ProductDataDTO
     */
    assets?: Array<AssetDTO>;
    /**
     * 
     * @type {object}
     * @memberof ProductDataDTO
     */
    slug: object;
    /**
     * 
     * @type {object}
     * @memberof ProductDataDTO
     */
    metaTitle?: object;
    /**
     * 
     * @type {object}
     * @memberof ProductDataDTO
     */
    metaDescription?: object;
    /**
     * 
     * @type {object}
     * @memberof ProductDataDTO
     */
    metaKeywords?: object;
    /**
     * 
     * @type {string}
     * @memberof ProductDataDTO
     */
    masterVariantId?: string;
    /**
     * 
     * @type {Array<ProductVariantDTO>}
     * @memberof ProductDataDTO
     */
    variants?: Array<ProductVariantDTO>;
    /**
     * 
     * @type {object}
     * @memberof ProductDataDTO
     */
    metadata?: object;
    /**
     * 
     * @type {object}
     * @memberof ProductDataDTO
     */
    custom?: object;
}

export function ProductDataDTOFromJSON(json: any): ProductDataDTO {
    return ProductDataDTOFromJSONTyped(json, false);
}

export function ProductDataDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductDataDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'taxCategory': IdReferenceDTOFromJSON(json['taxCategory']),
        'name': json['name'],
        'description': json['description'],
        'weight': json['weight'],
        'contents': ((json['contents'] as Array<any>).map(ContentDTOFromJSON)),
        'categories': !exists(json, 'categories') ? undefined : ((json['categories'] as Array<any>).map(IdReferenceDTOFromJSON)),
        'masterCategoriesPath': !exists(json, 'masterCategoriesPath') ? undefined : ((json['masterCategoriesPath'] as Array<any>).map(IdReferenceDTOFromJSON)),
        'brands': !exists(json, 'brands') ? undefined : ((json['brands'] as Array<any>).map(IdReferenceDTOFromJSON)),
        'collections': !exists(json, 'collections') ? undefined : ((json['collections'] as Array<any>).map(IdReferenceDTOFromJSON)),
        'assets': !exists(json, 'assets') ? undefined : ((json['assets'] as Array<any>).map(AssetDTOFromJSON)),
        'slug': json['slug'],
        'metaTitle': !exists(json, 'metaTitle') ? undefined : json['metaTitle'],
        'metaDescription': !exists(json, 'metaDescription') ? undefined : json['metaDescription'],
        'metaKeywords': !exists(json, 'metaKeywords') ? undefined : json['metaKeywords'],
        'masterVariantId': !exists(json, 'masterVariantId') ? undefined : json['masterVariantId'],
        'variants': !exists(json, 'variants') ? undefined : ((json['variants'] as Array<any>).map(ProductVariantDTOFromJSON)),
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'custom': !exists(json, 'custom') ? undefined : json['custom'],
    };
}

export function ProductDataDTOToJSON(value?: ProductDataDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'taxCategory': IdReferenceDTOToJSON(value.taxCategory),
        'name': value.name,
        'description': value.description,
        'weight': value.weight,
        'contents': ((value.contents as Array<any>).map(ContentDTOToJSON)),
        'categories': value.categories === undefined ? undefined : ((value.categories as Array<any>).map(IdReferenceDTOToJSON)),
        'masterCategoriesPath': value.masterCategoriesPath === undefined ? undefined : ((value.masterCategoriesPath as Array<any>).map(IdReferenceDTOToJSON)),
        'brands': value.brands === undefined ? undefined : ((value.brands as Array<any>).map(IdReferenceDTOToJSON)),
        'collections': value.collections === undefined ? undefined : ((value.collections as Array<any>).map(IdReferenceDTOToJSON)),
        'assets': value.assets === undefined ? undefined : ((value.assets as Array<any>).map(AssetDTOToJSON)),
        'slug': value.slug,
        'metaTitle': value.metaTitle,
        'metaDescription': value.metaDescription,
        'metaKeywords': value.metaKeywords,
        'masterVariantId': value.masterVariantId,
        'variants': value.variants === undefined ? undefined : ((value.variants as Array<any>).map(ProductVariantDTOToJSON)),
        'metadata': value.metadata,
        'custom': value.custom,
    };
}


