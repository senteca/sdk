/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    WalletDTO,
    WalletDTOFromJSON,
    WalletDTOToJSON,
    WalletDraftDTO,
    WalletDraftDTOFromJSON,
    WalletDraftDTOToJSON,
} from '../models';

export interface AddMyWalletRequest {
    walletDraftDTO: WalletDraftDTO;
}

export interface GetMyWalletByTypeRequest {
    type: string;
}

export interface RequestMyWalletRequest {
    walletDraftDTO: WalletDraftDTO;
}

/**
 * 
 */
export class MyWalletApi extends runtime.BaseAPI {

    /**
     * Current customer associates an existing wallet to his account.
     */
    async addMyWalletRaw(requestParameters: AddMyWalletRequest): Promise<runtime.ApiResponse<WalletDTO>> {
        if (requestParameters.walletDraftDTO === null || requestParameters.walletDraftDTO === undefined) {
            throw new runtime.RequiredError('walletDraftDTO','Required parameter requestParameters.walletDraftDTO was null or undefined when calling addMyWallet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/my-wallet/add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletDraftDTOToJSON(requestParameters.walletDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletDTOFromJSON(jsonValue));
    }

    /**
     * Current customer associates an existing wallet to his account.
     */
    async addMyWallet(requestParameters: AddMyWalletRequest): Promise<WalletDTO> {
        const response = await this.addMyWalletRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a current customers wallet by type.
     */
    async getMyWalletByTypeRaw(requestParameters: GetMyWalletByTypeRequest): Promise<runtime.ApiResponse<WalletDTO>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getMyWalletByType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/my-wallet/type={type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletDTOFromJSON(jsonValue));
    }

    /**
     * Returns a current customers wallet by type.
     */
    async getMyWalletByType(requestParameters: GetMyWalletByTypeRequest): Promise<WalletDTO> {
        const response = await this.getMyWalletByTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Current customer requests a new wallet.
     */
    async requestMyWalletRaw(requestParameters: RequestMyWalletRequest): Promise<runtime.ApiResponse<WalletDTO>> {
        if (requestParameters.walletDraftDTO === null || requestParameters.walletDraftDTO === undefined) {
            throw new runtime.RequiredError('walletDraftDTO','Required parameter requestParameters.walletDraftDTO was null or undefined when calling requestMyWallet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/my-wallet/request`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletDraftDTOToJSON(requestParameters.walletDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletDTOFromJSON(jsonValue));
    }

    /**
     * Current customer requests a new wallet.
     */
    async requestMyWallet(requestParameters: RequestMyWalletRequest): Promise<WalletDTO> {
        const response = await this.requestMyWalletRaw(requestParameters);
        return await response.value();
    }

}
