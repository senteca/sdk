/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FlipFoldersDTO,
    FlipFoldersDTOFromJSON,
    FlipFoldersDTOToJSON,
    FolderDTO,
    FolderDTOFromJSON,
    FolderDTOToJSON,
    FolderDraftDTO,
    FolderDraftDTOFromJSON,
    FolderDraftDTOToJSON,
} from '../models';

export interface CreateFolderRequest {
    folderDraftDTO: FolderDraftDTO;
}

export interface DeleteFolderByIdRequest {
    id: string;
}

export interface FilterFoldersRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface FlipFoldersRequest {
    flipFoldersDTO: FlipFoldersDTO;
}

export interface UpdateFolderRequest {
    folderId: string;
    folderDraftDTO: FolderDraftDTO;
}

/**
 * 
 */
export class FoldersApi extends runtime.BaseAPI {

    /**
     * Creates a new folder.
     */
    async createFolderRaw(requestParameters: CreateFolderRequest): Promise<runtime.ApiResponse<FolderDTO>> {
        if (requestParameters.folderDraftDTO === null || requestParameters.folderDraftDTO === undefined) {
            throw new runtime.RequiredError('folderDraftDTO','Required parameter requestParameters.folderDraftDTO was null or undefined when calling createFolder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cms/folders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FolderDraftDTOToJSON(requestParameters.folderDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new folder.
     */
    async createFolder(requestParameters: CreateFolderRequest): Promise<FolderDTO> {
        const response = await this.createFolderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a folder by id.
     */
    async deleteFolderByIdRaw(requestParameters: DeleteFolderByIdRequest): Promise<runtime.ApiResponse<FolderDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFolderById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cms/folders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a folder by id.
     */
    async deleteFolderById(requestParameters: DeleteFolderByIdRequest): Promise<FolderDTO> {
        const response = await this.deleteFolderByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Filter folders
     */
    async filterFoldersRaw(requestParameters: FilterFoldersRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterFolders.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterFolders.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterFolders.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling filterFolders.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cms/folders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Filter folders
     */
    async filterFolders(requestParameters: FilterFoldersRequest): Promise<void> {
        await this.filterFoldersRaw(requestParameters);
    }

    /**
     * Flip tow folders weights
     */
    async flipFoldersRaw(requestParameters: FlipFoldersRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.flipFoldersDTO === null || requestParameters.flipFoldersDTO === undefined) {
            throw new runtime.RequiredError('flipFoldersDTO','Required parameter requestParameters.flipFoldersDTO was null or undefined when calling flipFolders.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cms/folders/flip`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FlipFoldersDTOToJSON(requestParameters.flipFoldersDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Flip tow folders weights
     */
    async flipFolders(requestParameters: FlipFoldersRequest): Promise<object> {
        const response = await this.flipFoldersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update folder
     */
    async updateFolderRaw(requestParameters: UpdateFolderRequest): Promise<runtime.ApiResponse<FolderDTO>> {
        if (requestParameters.folderId === null || requestParameters.folderId === undefined) {
            throw new runtime.RequiredError('folderId','Required parameter requestParameters.folderId was null or undefined when calling updateFolder.');
        }

        if (requestParameters.folderDraftDTO === null || requestParameters.folderDraftDTO === undefined) {
            throw new runtime.RequiredError('folderDraftDTO','Required parameter requestParameters.folderDraftDTO was null or undefined when calling updateFolder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cms/folders/{folderId}`.replace(`{${"folderId"}}`, encodeURIComponent(String(requestParameters.folderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolderDraftDTOToJSON(requestParameters.folderDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderDTOFromJSON(jsonValue));
    }

    /**
     * Update folder
     */
    async updateFolder(requestParameters: UpdateFolderRequest): Promise<FolderDTO> {
        const response = await this.updateFolderRaw(requestParameters);
        return await response.value();
    }

}
