/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RoleDTO,
    RoleDTOFromJSON,
    RoleDTOToJSON,
} from '../models';

export interface CreateRoleRequest {
    roleDTO: RoleDTO;
}

export interface DeleteRoleByIdRequest {
    id: string;
}

export interface FilterRolesRequest {
    filter?: Array<string>;
    sort?: Array<string>;
    expand?: Array<string>;
    project?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface FindRoleByIdRequest {
    id: string;
}

export interface UpdateRoleByIdRequest {
    id: string;
    roleDTO: RoleDTO;
}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI {

    /**
     * Creates a new role.
     */
    async createRoleRaw(requestParameters: CreateRoleRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.roleDTO === null || requestParameters.roleDTO === undefined) {
            throw new runtime.RequiredError('roleDTO','Required parameter requestParameters.roleDTO was null or undefined when calling createRole.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleDTOToJSON(requestParameters.roleDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates a new role.
     */
    async createRole(requestParameters: CreateRoleRequest): Promise<object> {
        const response = await this.createRoleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a role by id.
     */
    async deleteRoleByIdRaw(requestParameters: DeleteRoleByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoleById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a role by id.
     */
    async deleteRoleById(requestParameters: DeleteRoleByIdRequest): Promise<object> {
        const response = await this.deleteRoleByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all roles.
     */
    async filterRolesRaw(requestParameters: FilterRolesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all roles.
     */
    async filterRoles(requestParameters: FilterRolesRequest): Promise<void> {
        await this.filterRolesRaw(requestParameters);
    }

    /**
     * Returns a role by id.
     */
    async findRoleByIdRaw(requestParameters: FindRoleByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findRoleById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a role by id.
     */
    async findRoleById(requestParameters: FindRoleByIdRequest): Promise<object> {
        const response = await this.findRoleByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all permissions.
     */
    async getPermissionsRaw(): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/roles/permissions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Lists all permissions.
     */
    async getPermissions(): Promise<Array<object>> {
        const response = await this.getPermissionsRaw();
        return await response.value();
    }

    /**
     * Updates a role by id.
     */
    async updateRoleByIdRaw(requestParameters: UpdateRoleByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoleById.');
        }

        if (requestParameters.roleDTO === null || requestParameters.roleDTO === undefined) {
            throw new runtime.RequiredError('roleDTO','Required parameter requestParameters.roleDTO was null or undefined when calling updateRoleById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/roles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleDTOToJSON(requestParameters.roleDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates a role by id.
     */
    async updateRoleById(requestParameters: UpdateRoleByIdRequest): Promise<object> {
        const response = await this.updateRoleByIdRaw(requestParameters);
        return await response.value();
    }

}
