/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    StoreDTO,
    StoreDTOFromJSON,
    StoreDTOToJSON,
    StoreDraftDTO,
    StoreDraftDTOFromJSON,
    StoreDraftDTOToJSON,
} from '../models';

export interface CreateStoreRequest {
    storeDraftDTO: StoreDraftDTO;
}

export interface DeleteStoreByIdRequest {
    id: string;
}

export interface FilterStoresRequest {
    filter?: Array<string>;
    sort?: Array<string>;
    expand?: Array<string>;
    project?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface FindStoreByIdRequest {
    id: string;
}

export interface FindStoreByKeyRequest {
    key: string;
}

export interface UpdateStoreByIdRequest {
    id: string;
    storeDraftDTO: StoreDraftDTO;
}

/**
 * 
 */
export class StoresApi extends runtime.BaseAPI {

    /**
     * Creates a new store.
     */
    async createStoreRaw(requestParameters: CreateStoreRequest): Promise<runtime.ApiResponse<StoreDTO>> {
        if (requestParameters.storeDraftDTO === null || requestParameters.storeDraftDTO === undefined) {
            throw new runtime.RequiredError('storeDraftDTO','Required parameter requestParameters.storeDraftDTO was null or undefined when calling createStore.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/stores`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreDraftDTOToJSON(requestParameters.storeDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new store.
     */
    async createStore(requestParameters: CreateStoreRequest): Promise<StoreDTO> {
        const response = await this.createStoreRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a store by id.
     */
    async deleteStoreByIdRaw(requestParameters: DeleteStoreByIdRequest): Promise<runtime.ApiResponse<StoreDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStoreById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/stores/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a store by id.
     */
    async deleteStoreById(requestParameters: DeleteStoreByIdRequest): Promise<StoreDTO> {
        const response = await this.deleteStoreByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all stores.
     */
    async filterStoresRaw(requestParameters: FilterStoresRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/stores`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all stores.
     */
    async filterStores(requestParameters: FilterStoresRequest): Promise<void> {
        await this.filterStoresRaw(requestParameters);
    }

    /**
     * Returns a store by id.
     */
    async findStoreByIdRaw(requestParameters: FindStoreByIdRequest): Promise<runtime.ApiResponse<StoreDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findStoreById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/stores/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreDTOFromJSON(jsonValue));
    }

    /**
     * Returns a store by id.
     */
    async findStoreById(requestParameters: FindStoreByIdRequest): Promise<StoreDTO> {
        const response = await this.findStoreByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a store by key.
     */
    async findStoreByKeyRaw(requestParameters: FindStoreByKeyRequest): Promise<runtime.ApiResponse<StoreDTO>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling findStoreByKey.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/stores/key/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreDTOFromJSON(jsonValue));
    }

    /**
     * Returns a store by key.
     */
    async findStoreByKey(requestParameters: FindStoreByKeyRequest): Promise<StoreDTO> {
        const response = await this.findStoreByKeyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a store by id.
     */
    async updateStoreByIdRaw(requestParameters: UpdateStoreByIdRequest): Promise<runtime.ApiResponse<StoreDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStoreById.');
        }

        if (requestParameters.storeDraftDTO === null || requestParameters.storeDraftDTO === undefined) {
            throw new runtime.RequiredError('storeDraftDTO','Required parameter requestParameters.storeDraftDTO was null or undefined when calling updateStoreById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/stores/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StoreDraftDTOToJSON(requestParameters.storeDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreDTOFromJSON(jsonValue));
    }

    /**
     * Updates a store by id.
     */
    async updateStoreById(requestParameters: UpdateStoreByIdRequest): Promise<StoreDTO> {
        const response = await this.updateStoreByIdRaw(requestParameters);
        return await response.value();
    }

}
