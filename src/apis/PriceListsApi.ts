/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PriceListDTO,
    PriceListDTOFromJSON,
    PriceListDTOToJSON,
    PriceListDraftDTO,
    PriceListDraftDTOFromJSON,
    PriceListDraftDTOToJSON,
} from '../models';

export interface CreatePriceListRequest {
    priceListDraftDTO: PriceListDraftDTO;
}

export interface DeletePriceListByIdRequest {
    id: string;
}

export interface FilterPriceListsRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface FindPriceListByIdRequest {
    id: string;
}

export interface FindPriceListByKeyRequest {
    key: string;
}

export interface UpdatePriceListByIdRequest {
    id: string;
    priceListDraftDTO: PriceListDraftDTO;
}

/**
 * 
 */
export class PriceListsApi extends runtime.BaseAPI {

    /**
     * Creates a new price list.
     */
    async createPriceListRaw(requestParameters: CreatePriceListRequest): Promise<runtime.ApiResponse<PriceListDTO>> {
        if (requestParameters.priceListDraftDTO === null || requestParameters.priceListDraftDTO === undefined) {
            throw new runtime.RequiredError('priceListDraftDTO','Required parameter requestParameters.priceListDraftDTO was null or undefined when calling createPriceList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/price-lists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PriceListDraftDTOToJSON(requestParameters.priceListDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new price list.
     */
    async createPriceList(requestParameters: CreatePriceListRequest): Promise<PriceListDTO> {
        const response = await this.createPriceListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a price list by id.
     */
    async deletePriceListByIdRaw(requestParameters: DeletePriceListByIdRequest): Promise<runtime.ApiResponse<PriceListDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePriceListById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/price-lists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a price list by id.
     */
    async deletePriceListById(requestParameters: DeletePriceListByIdRequest): Promise<PriceListDTO> {
        const response = await this.deletePriceListByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all price lists.
     */
    async filterPriceListsRaw(requestParameters: FilterPriceListsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterPriceLists.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterPriceLists.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterPriceLists.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling filterPriceLists.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/price-lists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all price lists.
     */
    async filterPriceLists(requestParameters: FilterPriceListsRequest): Promise<void> {
        await this.filterPriceListsRaw(requestParameters);
    }

    /**
     * Returns a price list by id.
     */
    async findPriceListByIdRaw(requestParameters: FindPriceListByIdRequest): Promise<runtime.ApiResponse<PriceListDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findPriceListById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/price-lists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListDTOFromJSON(jsonValue));
    }

    /**
     * Returns a price list by id.
     */
    async findPriceListById(requestParameters: FindPriceListByIdRequest): Promise<PriceListDTO> {
        const response = await this.findPriceListByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a price list by key.
     */
    async findPriceListByKeyRaw(requestParameters: FindPriceListByKeyRequest): Promise<runtime.ApiResponse<PriceListDTO>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling findPriceListByKey.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/price-lists/key/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListDTOFromJSON(jsonValue));
    }

    /**
     * Returns a price list by key.
     */
    async findPriceListByKey(requestParameters: FindPriceListByKeyRequest): Promise<PriceListDTO> {
        const response = await this.findPriceListByKeyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a price list by id.
     */
    async updatePriceListByIdRaw(requestParameters: UpdatePriceListByIdRequest): Promise<runtime.ApiResponse<PriceListDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePriceListById.');
        }

        if (requestParameters.priceListDraftDTO === null || requestParameters.priceListDraftDTO === undefined) {
            throw new runtime.RequiredError('priceListDraftDTO','Required parameter requestParameters.priceListDraftDTO was null or undefined when calling updatePriceListById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/price-lists/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PriceListDraftDTOToJSON(requestParameters.priceListDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListDTOFromJSON(jsonValue));
    }

    /**
     * Updates a price list by id.
     */
    async updatePriceListById(requestParameters: UpdatePriceListByIdRequest): Promise<PriceListDTO> {
        const response = await this.updatePriceListByIdRaw(requestParameters);
        return await response.value();
    }

}
