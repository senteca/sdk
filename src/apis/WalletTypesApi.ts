/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    WalletTypeDTO,
    WalletTypeDTOFromJSON,
    WalletTypeDTOToJSON,
    WalletTypeDraftDTO,
    WalletTypeDraftDTOFromJSON,
    WalletTypeDraftDTOToJSON,
} from '../models';

export interface CreateWalletTypeRequest {
    walletTypeDraftDTO: WalletTypeDraftDTO;
}

export interface DeleteWalletTypeByIdRequest {
    id: string;
}

export interface FilterWalletTypesRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface FindWalletTypeByIdRequest {
    id: string;
}

export interface SearchWalletTypesRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface UpdateWalletTypeByIdRequest {
    id: string;
    walletTypeDraftDTO: WalletTypeDraftDTO;
}

/**
 * 
 */
export class WalletTypesApi extends runtime.BaseAPI {

    /**
     * Creates a new wallet type.
     */
    async createWalletTypeRaw(requestParameters: CreateWalletTypeRequest): Promise<runtime.ApiResponse<WalletTypeDTO>> {
        if (requestParameters.walletTypeDraftDTO === null || requestParameters.walletTypeDraftDTO === undefined) {
            throw new runtime.RequiredError('walletTypeDraftDTO','Required parameter requestParameters.walletTypeDraftDTO was null or undefined when calling createWalletType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/wallet-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletTypeDraftDTOToJSON(requestParameters.walletTypeDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletTypeDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new wallet type.
     */
    async createWalletType(requestParameters: CreateWalletTypeRequest): Promise<WalletTypeDTO> {
        const response = await this.createWalletTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a wallet type by id.
     */
    async deleteWalletTypeByIdRaw(requestParameters: DeleteWalletTypeByIdRequest): Promise<runtime.ApiResponse<WalletTypeDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWalletTypeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/wallet-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletTypeDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a wallet type by id.
     */
    async deleteWalletTypeById(requestParameters: DeleteWalletTypeByIdRequest): Promise<WalletTypeDTO> {
        const response = await this.deleteWalletTypeByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all wallet types.
     */
    async filterWalletTypesRaw(requestParameters: FilterWalletTypesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterWalletTypes.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterWalletTypes.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterWalletTypes.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling filterWalletTypes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/wallet-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all wallet types.
     */
    async filterWalletTypes(requestParameters: FilterWalletTypesRequest): Promise<void> {
        await this.filterWalletTypesRaw(requestParameters);
    }

    /**
     * Returns a wallet type by id.
     */
    async findWalletTypeByIdRaw(requestParameters: FindWalletTypeByIdRequest): Promise<runtime.ApiResponse<WalletTypeDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findWalletTypeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/wallet-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletTypeDTOFromJSON(jsonValue));
    }

    /**
     * Returns a wallet type by id.
     */
    async findWalletTypeById(requestParameters: FindWalletTypeByIdRequest): Promise<WalletTypeDTO> {
        const response = await this.findWalletTypeByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Searches wallet types by name.
     */
    async searchWalletTypesRaw(requestParameters: SearchWalletTypesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling searchWalletTypes.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling searchWalletTypes.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling searchWalletTypes.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling searchWalletTypes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/wallet-types/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Searches wallet types by name.
     */
    async searchWalletTypes(requestParameters: SearchWalletTypesRequest): Promise<void> {
        await this.searchWalletTypesRaw(requestParameters);
    }

    /**
     * Updates a wallet type by id.
     */
    async updateWalletTypeByIdRaw(requestParameters: UpdateWalletTypeByIdRequest): Promise<runtime.ApiResponse<WalletTypeDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateWalletTypeById.');
        }

        if (requestParameters.walletTypeDraftDTO === null || requestParameters.walletTypeDraftDTO === undefined) {
            throw new runtime.RequiredError('walletTypeDraftDTO','Required parameter requestParameters.walletTypeDraftDTO was null or undefined when calling updateWalletTypeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/wallet-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WalletTypeDraftDTOToJSON(requestParameters.walletTypeDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletTypeDTOFromJSON(jsonValue));
    }

    /**
     * Updates a wallet type by id.
     */
    async updateWalletTypeById(requestParameters: UpdateWalletTypeByIdRequest): Promise<WalletTypeDTO> {
        const response = await this.updateWalletTypeByIdRaw(requestParameters);
        return await response.value();
    }

}
