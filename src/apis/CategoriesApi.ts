/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AssetDTO,
    AssetDTOFromJSON,
    AssetDTOToJSON,
    CategoryDTO,
    CategoryDTOFromJSON,
    CategoryDTOToJSON,
    CategoryDraftDTO,
    CategoryDraftDTOFromJSON,
    CategoryDraftDTOToJSON,
} from '../models';

export interface AddCategoryAssetRequest {
    categoryId: string;
    assetDTO: AssetDTO;
}

export interface CreateCategoryRequest {
    categoryDraftDTO: CategoryDraftDTO;
}

export interface DeleteCategoryByIdRequest {
    id: string;
}

export interface FilterCategoriesRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface FindCategoryByExternalIdRequest {
    externalId: string;
    expand: Array<string>;
    statuses?: Array<string>;
}

export interface FindCategoryByIdRequest {
    id: string;
    expand: Array<string>;
    statuses?: Array<string>;
}

export interface FindCategoryBySlugRequest {
    languageCode: string;
    slug: string;
    expand: Array<string>;
    statuses?: Array<string>;
}

export interface GetCategorySlugsRequest {
    languageCode: string;
}

export interface ImportCategoriesRequest {
    categoryDraftDTO: Array<CategoryDraftDTO>;
}

export interface RemoveCategoryAssetRequest {
    categoryId: string;
    assetIndex: number;
}

export interface SearchCategoryRequest {
    expand: string;
    language: string;
    term: string;
    limit?: number;
    offset?: number;
}

export interface UpdateCategoryAssetRequest {
    categoryId: string;
    assetIndex: number;
    assetDTO: AssetDTO;
}

export interface UpdateCategoryByIdRequest {
    id: string;
    categoryDraftDTO: CategoryDraftDTO;
}

/**
 * 
 */
export class CategoriesApi extends runtime.BaseAPI {

    /**
     * Creates a new asset per category id.
     */
    async addCategoryAssetRaw(requestParameters: AddCategoryAssetRequest): Promise<runtime.ApiResponse<CategoryDTO>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling addCategoryAsset.');
        }

        if (requestParameters.assetDTO === null || requestParameters.assetDTO === undefined) {
            throw new runtime.RequiredError('assetDTO','Required parameter requestParameters.assetDTO was null or undefined when calling addCategoryAsset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/categories/{categoryId}/assets`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetDTOToJSON(requestParameters.assetDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new asset per category id.
     */
    async addCategoryAsset(requestParameters: AddCategoryAssetRequest): Promise<CategoryDTO> {
        const response = await this.addCategoryAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new category.
     */
    async createCategoryRaw(requestParameters: CreateCategoryRequest): Promise<runtime.ApiResponse<CategoryDTO>> {
        if (requestParameters.categoryDraftDTO === null || requestParameters.categoryDraftDTO === undefined) {
            throw new runtime.RequiredError('categoryDraftDTO','Required parameter requestParameters.categoryDraftDTO was null or undefined when calling createCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/categories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryDraftDTOToJSON(requestParameters.categoryDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new category.
     */
    async createCategory(requestParameters: CreateCategoryRequest): Promise<CategoryDTO> {
        const response = await this.createCategoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a category by id.
     */
    async deleteCategoryByIdRaw(requestParameters: DeleteCategoryByIdRequest): Promise<runtime.ApiResponse<CategoryDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCategoryById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a category by id.
     */
    async deleteCategoryById(requestParameters: DeleteCategoryByIdRequest): Promise<CategoryDTO> {
        const response = await this.deleteCategoryByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all categories.
     */
    async filterCategoriesRaw(requestParameters: FilterCategoriesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterCategories.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterCategories.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterCategories.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling filterCategories.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all categories.
     */
    async filterCategories(requestParameters: FilterCategoriesRequest): Promise<void> {
        await this.filterCategoriesRaw(requestParameters);
    }

    /**
     * Returns a category by external id.
     */
    async findCategoryByExternalIdRaw(requestParameters: FindCategoryByExternalIdRequest): Promise<runtime.ApiResponse<CategoryDTO>> {
        if (requestParameters.externalId === null || requestParameters.externalId === undefined) {
            throw new runtime.RequiredError('externalId','Required parameter requestParameters.externalId was null or undefined when calling findCategoryByExternalId.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling findCategoryByExternalId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/categories/external/{externalId}`.replace(`{${"externalId"}}`, encodeURIComponent(String(requestParameters.externalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDTOFromJSON(jsonValue));
    }

    /**
     * Returns a category by external id.
     */
    async findCategoryByExternalId(requestParameters: FindCategoryByExternalIdRequest): Promise<CategoryDTO> {
        const response = await this.findCategoryByExternalIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a category by id.
     */
    async findCategoryByIdRaw(requestParameters: FindCategoryByIdRequest): Promise<runtime.ApiResponse<CategoryDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findCategoryById.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling findCategoryById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDTOFromJSON(jsonValue));
    }

    /**
     * Returns a category by id.
     */
    async findCategoryById(requestParameters: FindCategoryByIdRequest): Promise<CategoryDTO> {
        const response = await this.findCategoryByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a category by slug and language code.
     */
    async findCategoryBySlugRaw(requestParameters: FindCategoryBySlugRequest): Promise<runtime.ApiResponse<CategoryDTO>> {
        if (requestParameters.languageCode === null || requestParameters.languageCode === undefined) {
            throw new runtime.RequiredError('languageCode','Required parameter requestParameters.languageCode was null or undefined when calling findCategoryBySlug.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling findCategoryBySlug.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling findCategoryBySlug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/categories/slug/{languageCode}/{slug}`.replace(`{${"languageCode"}}`, encodeURIComponent(String(requestParameters.languageCode))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDTOFromJSON(jsonValue));
    }

    /**
     * Returns a category by slug and language code.
     */
    async findCategoryBySlug(requestParameters: FindCategoryBySlugRequest): Promise<CategoryDTO> {
        const response = await this.findCategoryBySlugRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all category slugs per language code.
     */
    async getCategorySlugsRaw(requestParameters: GetCategorySlugsRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.languageCode === null || requestParameters.languageCode === undefined) {
            throw new runtime.RequiredError('languageCode','Required parameter requestParameters.languageCode was null or undefined when calling getCategorySlugs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/categories/slugs/{languageCode}`.replace(`{${"languageCode"}}`, encodeURIComponent(String(requestParameters.languageCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Lists all category slugs per language code.
     */
    async getCategorySlugs(requestParameters: GetCategorySlugsRequest): Promise<Array<string>> {
        const response = await this.getCategorySlugsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Imports multiple categories.
     */
    async importCategoriesRaw(requestParameters: ImportCategoriesRequest): Promise<runtime.ApiResponse<Array<CategoryDTO>>> {
        if (requestParameters.categoryDraftDTO === null || requestParameters.categoryDraftDTO === undefined) {
            throw new runtime.RequiredError('categoryDraftDTO','Required parameter requestParameters.categoryDraftDTO was null or undefined when calling importCategories.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/categories/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.categoryDraftDTO.map(CategoryDraftDTOToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryDTOFromJSON));
    }

    /**
     * Imports multiple categories.
     */
    async importCategories(requestParameters: ImportCategoriesRequest): Promise<Array<CategoryDTO>> {
        const response = await this.importCategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an asset per category id and asset index.
     */
    async removeCategoryAssetRaw(requestParameters: RemoveCategoryAssetRequest): Promise<runtime.ApiResponse<CategoryDTO>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling removeCategoryAsset.');
        }

        if (requestParameters.assetIndex === null || requestParameters.assetIndex === undefined) {
            throw new runtime.RequiredError('assetIndex','Required parameter requestParameters.assetIndex was null or undefined when calling removeCategoryAsset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/categories/{categoryId}/assets/{assetIndex}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"assetIndex"}}`, encodeURIComponent(String(requestParameters.assetIndex))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDTOFromJSON(jsonValue));
    }

    /**
     * Deletes an asset per category id and asset index.
     */
    async removeCategoryAsset(requestParameters: RemoveCategoryAssetRequest): Promise<CategoryDTO> {
        const response = await this.removeCategoryAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Searches categories by name.
     */
    async searchCategoryRaw(requestParameters: SearchCategoryRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling searchCategory.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling searchCategory.');
        }

        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling searchCategory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.term !== undefined) {
            queryParameters['term'] = requestParameters.term;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/categories/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Searches categories by name.
     */
    async searchCategory(requestParameters: SearchCategoryRequest): Promise<void> {
        await this.searchCategoryRaw(requestParameters);
    }

    /**
     * Updates an asset per category id and asset index.
     */
    async updateCategoryAssetRaw(requestParameters: UpdateCategoryAssetRequest): Promise<runtime.ApiResponse<CategoryDTO>> {
        if (requestParameters.categoryId === null || requestParameters.categoryId === undefined) {
            throw new runtime.RequiredError('categoryId','Required parameter requestParameters.categoryId was null or undefined when calling updateCategoryAsset.');
        }

        if (requestParameters.assetIndex === null || requestParameters.assetIndex === undefined) {
            throw new runtime.RequiredError('assetIndex','Required parameter requestParameters.assetIndex was null or undefined when calling updateCategoryAsset.');
        }

        if (requestParameters.assetDTO === null || requestParameters.assetDTO === undefined) {
            throw new runtime.RequiredError('assetDTO','Required parameter requestParameters.assetDTO was null or undefined when calling updateCategoryAsset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/categories/{categoryId}/assets/{assetIndex}`.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters.categoryId))).replace(`{${"assetIndex"}}`, encodeURIComponent(String(requestParameters.assetIndex))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssetDTOToJSON(requestParameters.assetDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDTOFromJSON(jsonValue));
    }

    /**
     * Updates an asset per category id and asset index.
     */
    async updateCategoryAsset(requestParameters: UpdateCategoryAssetRequest): Promise<CategoryDTO> {
        const response = await this.updateCategoryAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a category by id.
     */
    async updateCategoryByIdRaw(requestParameters: UpdateCategoryByIdRequest): Promise<runtime.ApiResponse<CategoryDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCategoryById.');
        }

        if (requestParameters.categoryDraftDTO === null || requestParameters.categoryDraftDTO === undefined) {
            throw new runtime.RequiredError('categoryDraftDTO','Required parameter requestParameters.categoryDraftDTO was null or undefined when calling updateCategoryById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/categories/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryDraftDTOToJSON(requestParameters.categoryDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryDTOFromJSON(jsonValue));
    }

    /**
     * Updates a category by id.
     */
    async updateCategoryById(requestParameters: UpdateCategoryByIdRequest): Promise<CategoryDTO> {
        const response = await this.updateCategoryByIdRaw(requestParameters);
        return await response.value();
    }

}
