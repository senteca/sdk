/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse503,
    InlineResponse503FromJSON,
    InlineResponse503ToJSON,
} from '../models';

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Internal cluster health check.
     */
    async authHealthyRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/probes/healthy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async authHealthy(): Promise<InlineResponse200> {
        const response = await this.authHealthyRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async authReadyRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/probes/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async authReady(): Promise<InlineResponse200> {
        const response = await this.authReadyRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async configHealthyRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/probes/healthy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async configHealthy(): Promise<InlineResponse200> {
        const response = await this.configHealthyRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async configReadyRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/probes/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async configReady(): Promise<InlineResponse200> {
        const response = await this.configReadyRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async fulfillmentHealthyRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/probes/healthy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async fulfillmentHealthy(): Promise<InlineResponse200> {
        const response = await this.fulfillmentHealthyRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async fulfillmentReadyRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/probes/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async fulfillmentReady(): Promise<InlineResponse200> {
        const response = await this.fulfillmentReadyRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async merchandiseHealthyRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/probes/healthy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async merchandiseHealthy(): Promise<InlineResponse200> {
        const response = await this.merchandiseHealthyRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async merchandiseReadyRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/probes/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async merchandiseReady(): Promise<InlineResponse200> {
        const response = await this.merchandiseReadyRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async usersHealthyRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/probes/healthy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async usersHealthy(): Promise<InlineResponse200> {
        const response = await this.usersHealthyRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async usersReadyRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/probes/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async usersReady(): Promise<InlineResponse200> {
        const response = await this.usersReadyRaw();
        return await response.value();
    }

}
