/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse503,
    InlineResponse503FromJSON,
    InlineResponse503ToJSON,
} from '../models';

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * External public health check.
     */
    async authHealhthzRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/healthz`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * External public health check.
     */
    async authHealhthz(): Promise<string> {
        const response = await this.authHealhthzRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async authHealthRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async authHealth(): Promise<InlineResponse200> {
        const response = await this.authHealthRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async configHealthRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async configHealth(): Promise<InlineResponse200> {
        const response = await this.configHealthRaw();
        return await response.value();
    }

    /**
     * External public health check.
     */
    async configHealthzRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/healthz`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * External public health check.
     */
    async configHealthz(): Promise<string> {
        const response = await this.configHealthzRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async fulfillmentHealthRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async fulfillmentHealth(): Promise<InlineResponse200> {
        const response = await this.fulfillmentHealthRaw();
        return await response.value();
    }

    /**
     * External public health check.
     */
    async fulfillmentHealthzRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/healthz`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * External public health check.
     */
    async fulfillmentHealthz(): Promise<string> {
        const response = await this.fulfillmentHealthzRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async merchandiseHealthRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async merchandiseHealth(): Promise<InlineResponse200> {
        const response = await this.merchandiseHealthRaw();
        return await response.value();
    }

    /**
     * External public health check.
     */
    async merchandiseHealthzRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/healthz`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * External public health check.
     */
    async merchandiseHealthz(): Promise<string> {
        const response = await this.merchandiseHealthzRaw();
        return await response.value();
    }

    /**
     * Internal cluster health check.
     */
    async usersHealthRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Internal cluster health check.
     */
    async usersHealth(): Promise<InlineResponse200> {
        const response = await this.usersHealthRaw();
        return await response.value();
    }

    /**
     * External public health check.
     */
    async usersHealthzRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/healthz`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * External public health check.
     */
    async usersHealthz(): Promise<string> {
        const response = await this.usersHealthzRaw();
        return await response.value();
    }

}
