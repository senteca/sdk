/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddressDTO,
    AddressDTOFromJSON,
    AddressDTOToJSON,
    CustomerCreateDTO,
    CustomerCreateDTOFromJSON,
    CustomerCreateDTOToJSON,
    CustomerDTO,
    CustomerDTOFromJSON,
    CustomerDTOToJSON,
    CustomerRegisterDTO,
    CustomerRegisterDTOFromJSON,
    CustomerRegisterDTOToJSON,
    CustomerRegisterFacebookDTO,
    CustomerRegisterFacebookDTOFromJSON,
    CustomerRegisterFacebookDTOToJSON,
    CustomerUpdateDTO,
    CustomerUpdateDTOFromJSON,
    CustomerUpdateDTOToJSON,
    PasswordChangeDTO,
    PasswordChangeDTOFromJSON,
    PasswordChangeDTOToJSON,
    PasswordResetDTO,
    PasswordResetDTOFromJSON,
    PasswordResetDTOToJSON,
    PasswordTokenDTO,
    PasswordTokenDTOFromJSON,
    PasswordTokenDTOToJSON,
} from '../models';

export interface ChangeCustomerPasswordRequest {
    passwordChangeDTO: PasswordChangeDTO;
}

export interface CreateCustomerRequest {
    customerCreateDTO: CustomerCreateDTO;
}

export interface CreateCustomerAddressRequest {
    customerId: string;
    addressDTO: AddressDTO;
}

export interface CreateMyAddressRequest {
    addressDTO: AddressDTO;
}

export interface DeleteCustomerAddressByIdRequest {
    customerId: string;
    addressId: string;
}

export interface DeleteCustomerByIdRequest {
    id: string;
}

export interface DeleteMyAddressByIdRequest {
    addressId: string;
}

export interface ExportCustomersCSVRequest {
    filter?: Array<string>;
    sort?: Array<string>;
    expand?: Array<string>;
    project?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface FilterCustomersRequest {
    filter?: Array<string>;
    sort?: Array<string>;
    expand?: Array<string>;
    project?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface FindCustomerAddressByIdRequest {
    customerId: string;
    addressId: string;
}

export interface FindCustomerByIdRequest {
    id: string;
}

export interface FindMyAddressByIdRequest {
    addressId: string;
}

export interface GetCustomerAddressesRequest {
    customerId: string;
}

export interface ImportCustomersRequest {
    requestBody: Array<string>;
}

export interface RegisterCustomerRequest {
    customerRegisterDTO: CustomerRegisterDTO;
}

export interface RegisterCustomerViaFacebookRequest {
    customerRegisterFacebookDTO: CustomerRegisterFacebookDTO;
}

export interface RequestCustomerPasswordTokenRequest {
    passwordTokenDTO: PasswordTokenDTO;
}

export interface ResetCustomerPasswordRequest {
    passwordResetDTO: PasswordResetDTO;
}

export interface SearchCustomersRequest {
    expand: string;
    language: string;
    term: string;
    limit?: number;
    offset?: number;
}

export interface UpdateCustomerAddressByIdRequest {
    customerId: string;
    addressId: string;
    addressDTO: AddressDTO;
}

export interface UpdateCustomerByIdRequest {
    id: string;
    customerUpdateDTO: CustomerUpdateDTO;
}

export interface UpdateCustomerProfileRequest {
    customerUpdateDTO: CustomerUpdateDTO;
}

export interface UpdateMyAddressByIdRequest {
    addressId: string;
    addressDTO: AddressDTO;
}

/**
 * 
 */
export class CustomersApi extends runtime.BaseAPI {

    /**
     * Updates the current customer password if the provided current password matches.
     */
    async changeCustomerPasswordRaw(requestParameters: ChangeCustomerPasswordRequest): Promise<runtime.ApiResponse<CustomerDTO>> {
        if (requestParameters.passwordChangeDTO === null || requestParameters.passwordChangeDTO === undefined) {
            throw new runtime.RequiredError('passwordChangeDTO','Required parameter requestParameters.passwordChangeDTO was null or undefined when calling changeCustomerPassword.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customers/password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordChangeDTOToJSON(requestParameters.passwordChangeDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDTOFromJSON(jsonValue));
    }

    /**
     * Updates the current customer password if the provided current password matches.
     */
    async changeCustomerPassword(requestParameters: ChangeCustomerPasswordRequest): Promise<CustomerDTO> {
        const response = await this.changeCustomerPasswordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new customer.
     */
    async createCustomerRaw(requestParameters: CreateCustomerRequest): Promise<runtime.ApiResponse<CustomerDTO>> {
        if (requestParameters.customerCreateDTO === null || requestParameters.customerCreateDTO === undefined) {
            throw new runtime.RequiredError('customerCreateDTO','Required parameter requestParameters.customerCreateDTO was null or undefined when calling createCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerCreateDTOToJSON(requestParameters.customerCreateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new customer.
     */
    async createCustomer(requestParameters: CreateCustomerRequest): Promise<CustomerDTO> {
        const response = await this.createCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new customer address per customer id.
     */
    async createCustomerAddressRaw(requestParameters: CreateCustomerAddressRequest): Promise<runtime.ApiResponse<AddressDTO>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling createCustomerAddress.');
        }

        if (requestParameters.addressDTO === null || requestParameters.addressDTO === undefined) {
            throw new runtime.RequiredError('addressDTO','Required parameter requestParameters.addressDTO was null or undefined when calling createCustomerAddress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customers/{customerId}/addresses`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressDTOToJSON(requestParameters.addressDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new customer address per customer id.
     */
    async createCustomerAddress(requestParameters: CreateCustomerAddressRequest): Promise<AddressDTO> {
        const response = await this.createCustomerAddressRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new address for the current customer.
     */
    async createMyAddressRaw(requestParameters: CreateMyAddressRequest): Promise<runtime.ApiResponse<AddressDTO>> {
        if (requestParameters.addressDTO === null || requestParameters.addressDTO === undefined) {
            throw new runtime.RequiredError('addressDTO','Required parameter requestParameters.addressDTO was null or undefined when calling createMyAddress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customers/my-addresses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddressDTOToJSON(requestParameters.addressDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new address for the current customer.
     */
    async createMyAddress(requestParameters: CreateMyAddressRequest): Promise<AddressDTO> {
        const response = await this.createMyAddressRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a customer address by customer id and address id.
     */
    async deleteCustomerAddressByIdRaw(requestParameters: DeleteCustomerAddressByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling deleteCustomerAddressById.');
        }

        if (requestParameters.addressId === null || requestParameters.addressId === undefined) {
            throw new runtime.RequiredError('addressId','Required parameter requestParameters.addressId was null or undefined when calling deleteCustomerAddressById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customers/{customerId}/addresses/{addressId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters.addressId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a customer address by customer id and address id.
     */
    async deleteCustomerAddressById(requestParameters: DeleteCustomerAddressByIdRequest): Promise<object> {
        const response = await this.deleteCustomerAddressByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a customer by id.
     */
    async deleteCustomerByIdRaw(requestParameters: DeleteCustomerByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCustomerById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a customer by id.
     */
    async deleteCustomerById(requestParameters: DeleteCustomerByIdRequest): Promise<object> {
        const response = await this.deleteCustomerByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes the current customer profile.
     */
    async deleteCustomerProfileRaw(): Promise<runtime.ApiResponse<CustomerDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customers/profile`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDTOFromJSON(jsonValue));
    }

    /**
     * Deletes the current customer profile.
     */
    async deleteCustomerProfile(): Promise<CustomerDTO> {
        const response = await this.deleteCustomerProfileRaw();
        return await response.value();
    }

    /**
     * Deletes a current customer\'s address by id.
     */
    async deleteMyAddressByIdRaw(requestParameters: DeleteMyAddressByIdRequest): Promise<runtime.ApiResponse<AddressDTO>> {
        if (requestParameters.addressId === null || requestParameters.addressId === undefined) {
            throw new runtime.RequiredError('addressId','Required parameter requestParameters.addressId was null or undefined when calling deleteMyAddressById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customers/my-addresses/{addressId}`.replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters.addressId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a current customer\'s address by id.
     */
    async deleteMyAddressById(requestParameters: DeleteMyAddressByIdRequest): Promise<AddressDTO> {
        const response = await this.deleteMyAddressByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Exports customers to a csv file.
     */
    async exportCustomersCSVRaw(requestParameters: ExportCustomersCSVRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customers/export/csv`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Exports customers to a csv file.
     */
    async exportCustomersCSV(requestParameters: ExportCustomersCSVRequest): Promise<void> {
        await this.exportCustomersCSVRaw(requestParameters);
    }

    /**
     * Lists all customers.
     */
    async filterCustomersRaw(requestParameters: FilterCustomersRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all customers.
     */
    async filterCustomers(requestParameters: FilterCustomersRequest): Promise<void> {
        await this.filterCustomersRaw(requestParameters);
    }

    /**
     * Returns a customer address by customer id and address id.
     */
    async findCustomerAddressByIdRaw(requestParameters: FindCustomerAddressByIdRequest): Promise<runtime.ApiResponse<AddressDTO>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling findCustomerAddressById.');
        }

        if (requestParameters.addressId === null || requestParameters.addressId === undefined) {
            throw new runtime.RequiredError('addressId','Required parameter requestParameters.addressId was null or undefined when calling findCustomerAddressById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customers/{customerId}/addresses/{addressId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters.addressId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDTOFromJSON(jsonValue));
    }

    /**
     * Returns a customer address by customer id and address id.
     */
    async findCustomerAddressById(requestParameters: FindCustomerAddressByIdRequest): Promise<AddressDTO> {
        const response = await this.findCustomerAddressByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a customer by id.
     */
    async findCustomerByIdRaw(requestParameters: FindCustomerByIdRequest): Promise<runtime.ApiResponse<CustomerDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findCustomerById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDTOFromJSON(jsonValue));
    }

    /**
     * Returns a customer by id.
     */
    async findCustomerById(requestParameters: FindCustomerByIdRequest): Promise<CustomerDTO> {
        const response = await this.findCustomerByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a current customer\'s address by id.
     */
    async findMyAddressByIdRaw(requestParameters: FindMyAddressByIdRequest): Promise<runtime.ApiResponse<AddressDTO>> {
        if (requestParameters.addressId === null || requestParameters.addressId === undefined) {
            throw new runtime.RequiredError('addressId','Required parameter requestParameters.addressId was null or undefined when calling findMyAddressById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customers/my-addresses/{addressId}`.replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters.addressId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDTOFromJSON(jsonValue));
    }

    /**
     * Returns a current customer\'s address by id.
     */
    async findMyAddressById(requestParameters: FindMyAddressByIdRequest): Promise<AddressDTO> {
        const response = await this.findMyAddressByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all customer addresses.
     */
    async getCustomerAddressesRaw(requestParameters: GetCustomerAddressesRequest): Promise<runtime.ApiResponse<Array<AddressDTO>>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getCustomerAddresses.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customers/{customerId}/addresses`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AddressDTOFromJSON));
    }

    /**
     * Lists all customer addresses.
     */
    async getCustomerAddresses(requestParameters: GetCustomerAddressesRequest): Promise<Array<AddressDTO>> {
        const response = await this.getCustomerAddressesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the current customer profile.
     */
    async getCustomerProfileRaw(): Promise<runtime.ApiResponse<CustomerDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customers/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDTOFromJSON(jsonValue));
    }

    /**
     * Returns the current customer profile.
     */
    async getCustomerProfile(): Promise<CustomerDTO> {
        const response = await this.getCustomerProfileRaw();
        return await response.value();
    }

    /**
     * Returns the current customer addresses.
     */
    async getMyAddressesRaw(): Promise<runtime.ApiResponse<Array<AddressDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customers/my-addresses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AddressDTOFromJSON));
    }

    /**
     * Returns the current customer addresses.
     */
    async getMyAddresses(): Promise<Array<AddressDTO>> {
        const response = await this.getMyAddressesRaw();
        return await response.value();
    }

    /**
     * Imports a list of customers. Returns imported customers with their ids.
     */
    async importCustomersRaw(requestParameters: ImportCustomersRequest): Promise<runtime.ApiResponse<Array<CustomerDTO>>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling importCustomers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customers/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerDTOFromJSON));
    }

    /**
     * Imports a list of customers. Returns imported customers with their ids.
     */
    async importCustomers(requestParameters: ImportCustomersRequest): Promise<Array<CustomerDTO>> {
        const response = await this.importCustomersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Registers a customer.
     */
    async registerCustomerRaw(requestParameters: RegisterCustomerRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.customerRegisterDTO === null || requestParameters.customerRegisterDTO === undefined) {
            throw new runtime.RequiredError('customerRegisterDTO','Required parameter requestParameters.customerRegisterDTO was null or undefined when calling registerCustomer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customers/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerRegisterDTOToJSON(requestParameters.customerRegisterDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Registers a customer.
     */
    async registerCustomer(requestParameters: RegisterCustomerRequest): Promise<object> {
        const response = await this.registerCustomerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Registers a customer via facebook.
     */
    async registerCustomerViaFacebookRaw(requestParameters: RegisterCustomerViaFacebookRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.customerRegisterFacebookDTO === null || requestParameters.customerRegisterFacebookDTO === undefined) {
            throw new runtime.RequiredError('customerRegisterFacebookDTO','Required parameter requestParameters.customerRegisterFacebookDTO was null or undefined when calling registerCustomerViaFacebook.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customers/register/facebook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerRegisterFacebookDTOToJSON(requestParameters.customerRegisterFacebookDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Registers a customer via facebook.
     */
    async registerCustomerViaFacebook(requestParameters: RegisterCustomerViaFacebookRequest): Promise<object> {
        const response = await this.registerCustomerViaFacebookRaw(requestParameters);
        return await response.value();
    }

    /**
     * Generates a password reset token via which the customer can reset his password.
     */
    async requestCustomerPasswordTokenRaw(requestParameters: RequestCustomerPasswordTokenRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.passwordTokenDTO === null || requestParameters.passwordTokenDTO === undefined) {
            throw new runtime.RequiredError('passwordTokenDTO','Required parameter requestParameters.passwordTokenDTO was null or undefined when calling requestCustomerPasswordToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customers/password-token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordTokenDTOToJSON(requestParameters.passwordTokenDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Generates a password reset token via which the customer can reset his password.
     */
    async requestCustomerPasswordToken(requestParameters: RequestCustomerPasswordTokenRequest): Promise<object> {
        const response = await this.requestCustomerPasswordTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Resets a customer\'s password if the reset token is valid.
     */
    async resetCustomerPasswordRaw(requestParameters: ResetCustomerPasswordRequest): Promise<runtime.ApiResponse<CustomerDTO>> {
        if (requestParameters.passwordResetDTO === null || requestParameters.passwordResetDTO === undefined) {
            throw new runtime.RequiredError('passwordResetDTO','Required parameter requestParameters.passwordResetDTO was null or undefined when calling resetCustomerPassword.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customers/password/reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordResetDTOToJSON(requestParameters.passwordResetDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDTOFromJSON(jsonValue));
    }

    /**
     * Resets a customer\'s password if the reset token is valid.
     */
    async resetCustomerPassword(requestParameters: ResetCustomerPasswordRequest): Promise<CustomerDTO> {
        const response = await this.resetCustomerPasswordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Searches customers by name, email, phone.
     */
    async searchCustomersRaw(requestParameters: SearchCustomersRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling searchCustomers.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling searchCustomers.');
        }

        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling searchCustomers.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.term !== undefined) {
            queryParameters['term'] = requestParameters.term;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customers/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Searches customers by name, email, phone.
     */
    async searchCustomers(requestParameters: SearchCustomersRequest): Promise<void> {
        await this.searchCustomersRaw(requestParameters);
    }

    /**
     * Updates a customer address by customer id and address id.
     */
    async updateCustomerAddressByIdRaw(requestParameters: UpdateCustomerAddressByIdRequest): Promise<runtime.ApiResponse<AddressDTO>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling updateCustomerAddressById.');
        }

        if (requestParameters.addressId === null || requestParameters.addressId === undefined) {
            throw new runtime.RequiredError('addressId','Required parameter requestParameters.addressId was null or undefined when calling updateCustomerAddressById.');
        }

        if (requestParameters.addressDTO === null || requestParameters.addressDTO === undefined) {
            throw new runtime.RequiredError('addressDTO','Required parameter requestParameters.addressDTO was null or undefined when calling updateCustomerAddressById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customers/{customerId}/addresses/{addressId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))).replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters.addressId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddressDTOToJSON(requestParameters.addressDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDTOFromJSON(jsonValue));
    }

    /**
     * Updates a customer address by customer id and address id.
     */
    async updateCustomerAddressById(requestParameters: UpdateCustomerAddressByIdRequest): Promise<AddressDTO> {
        const response = await this.updateCustomerAddressByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a customer by id
     */
    async updateCustomerByIdRaw(requestParameters: UpdateCustomerByIdRequest): Promise<runtime.ApiResponse<CustomerDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCustomerById.');
        }

        if (requestParameters.customerUpdateDTO === null || requestParameters.customerUpdateDTO === undefined) {
            throw new runtime.RequiredError('customerUpdateDTO','Required parameter requestParameters.customerUpdateDTO was null or undefined when calling updateCustomerById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerUpdateDTOToJSON(requestParameters.customerUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDTOFromJSON(jsonValue));
    }

    /**
     * Updates a customer by id
     */
    async updateCustomerById(requestParameters: UpdateCustomerByIdRequest): Promise<CustomerDTO> {
        const response = await this.updateCustomerByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates the current customer profile.
     */
    async updateCustomerProfileRaw(requestParameters: UpdateCustomerProfileRequest): Promise<runtime.ApiResponse<CustomerDTO>> {
        if (requestParameters.customerUpdateDTO === null || requestParameters.customerUpdateDTO === undefined) {
            throw new runtime.RequiredError('customerUpdateDTO','Required parameter requestParameters.customerUpdateDTO was null or undefined when calling updateCustomerProfile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customers/profile`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerUpdateDTOToJSON(requestParameters.customerUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerDTOFromJSON(jsonValue));
    }

    /**
     * Updates the current customer profile.
     */
    async updateCustomerProfile(requestParameters: UpdateCustomerProfileRequest): Promise<CustomerDTO> {
        const response = await this.updateCustomerProfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a current customer\'s address by id.
     */
    async updateMyAddressByIdRaw(requestParameters: UpdateMyAddressByIdRequest): Promise<runtime.ApiResponse<AddressDTO>> {
        if (requestParameters.addressId === null || requestParameters.addressId === undefined) {
            throw new runtime.RequiredError('addressId','Required parameter requestParameters.addressId was null or undefined when calling updateMyAddressById.');
        }

        if (requestParameters.addressDTO === null || requestParameters.addressDTO === undefined) {
            throw new runtime.RequiredError('addressDTO','Required parameter requestParameters.addressDTO was null or undefined when calling updateMyAddressById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customers/my-addresses/{addressId}`.replace(`{${"addressId"}}`, encodeURIComponent(String(requestParameters.addressId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddressDTOToJSON(requestParameters.addressDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressDTOFromJSON(jsonValue));
    }

    /**
     * Updates a current customer\'s address by id.
     */
    async updateMyAddressById(requestParameters: UpdateMyAddressByIdRequest): Promise<AddressDTO> {
        const response = await this.updateMyAddressByIdRaw(requestParameters);
        return await response.value();
    }

}
