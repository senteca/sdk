/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddressDTO,
    AddressDTOFromJSON,
    AddressDTOToJSON,
    DiscountCodeUpdateDTO,
    DiscountCodeUpdateDTOFromJSON,
    DiscountCodeUpdateDTOToJSON,
    LineItemDraftDTO,
    LineItemDraftDTOFromJSON,
    LineItemDraftDTOToJSON,
    MakePaymentInteractionDTO,
    MakePaymentInteractionDTOFromJSON,
    MakePaymentInteractionDTOToJSON,
    MakeShippingInteractionDTO,
    MakeShippingInteractionDTOFromJSON,
    MakeShippingInteractionDTOToJSON,
    MerchantsMethodsUpdateDTO,
    MerchantsMethodsUpdateDTOFromJSON,
    MerchantsMethodsUpdateDTOToJSON,
    OrderDTO,
    OrderDTOFromJSON,
    OrderDTOToJSON,
    OrderImportDTO,
    OrderImportDTOFromJSON,
    OrderImportDTOToJSON,
    OrderNoteUpdateDTO,
    OrderNoteUpdateDTOFromJSON,
    OrderNoteUpdateDTOToJSON,
    OrderStatusUpdateDTO,
    OrderStatusUpdateDTOFromJSON,
    OrderStatusUpdateDTOToJSON,
    PaymentInterfaceInteractionDraftDTO,
    PaymentInterfaceInteractionDraftDTOFromJSON,
    PaymentInterfaceInteractionDraftDTOToJSON,
    PaymentMethodsInfo,
    PaymentMethodsInfoFromJSON,
    PaymentMethodsInfoToJSON,
    PaymentStatusUpdateDTO,
    PaymentStatusUpdateDTOFromJSON,
    PaymentStatusUpdateDTOToJSON,
    PaymentTransactionDraftDTO,
    PaymentTransactionDraftDTOFromJSON,
    PaymentTransactionDraftDTOToJSON,
    PlatformMethodUpdateDTO,
    PlatformMethodUpdateDTOFromJSON,
    PlatformMethodUpdateDTOToJSON,
    QuantityUpdateDTO,
    QuantityUpdateDTOFromJSON,
    QuantityUpdateDTOToJSON,
    ShippingAddressDTO,
    ShippingAddressDTOFromJSON,
    ShippingAddressDTOToJSON,
    ShippingDTO,
    ShippingDTOFromJSON,
    ShippingDTOToJSON,
    ShippingDeliveryDraftDTO,
    ShippingDeliveryDraftDTOFromJSON,
    ShippingDeliveryDraftDTOToJSON,
    ShippingDeliveryParcelDTO,
    ShippingDeliveryParcelDTOFromJSON,
    ShippingDeliveryParcelDTOToJSON,
    ShippingDeliveryParcelDraftDTO,
    ShippingDeliveryParcelDraftDTOFromJSON,
    ShippingDeliveryParcelDraftDTOToJSON,
    ShippingInterfaceInteractionDraftDTO,
    ShippingInterfaceInteractionDraftDTOFromJSON,
    ShippingInterfaceInteractionDraftDTOToJSON,
    ShippingMethodsInfo,
    ShippingMethodsInfoFromJSON,
    ShippingMethodsInfoToJSON,
    ShippingStatusUpdateDTO,
    ShippingStatusUpdateDTOFromJSON,
    ShippingStatusUpdateDTOToJSON,
    TransitionLineItemQuantityState,
    TransitionLineItemQuantityStateFromJSON,
    TransitionLineItemQuantityStateToJSON,
    TransitionOrderStateDTO,
    TransitionOrderStateDTOFromJSON,
    TransitionOrderStateDTOToJSON,
} from '../models';

export interface AddOrderLineItemRequest {
    orderId: string;
    lineItemDraftDTO: LineItemDraftDTO;
}

export interface CreateCartRequest {
    body: object;
}

export interface CreateOrderFromCartRequest {
    id: string;
}

export interface CreatePaymentInterfaceInteractionRequest {
    orderId: string;
    paymentId: string;
    paymentInterfaceInteractionDraftDTO: PaymentInterfaceInteractionDraftDTO;
}

export interface CreatePaymentTransactionRequest {
    orderId: string;
    paymentId: string;
    paymentTransactionDraftDTO: PaymentTransactionDraftDTO;
}

export interface CreateShippingDeliveryRequest {
    orderId: string;
    shippingId: string;
    shippingDeliveryDraftDTO: ShippingDeliveryDraftDTO;
}

export interface CreateShippingDeliveryParcelRequest {
    orderId: string;
    shippingId: string;
    deliveryId: string;
    shippingDeliveryParcelDraftDTO: ShippingDeliveryParcelDraftDTO;
}

export interface CreateShippingInterfaceInteractionRequest {
    orderId: string;
    shippingId: string;
    shippingInterfaceInteractionDraftDTO: ShippingInterfaceInteractionDraftDTO;
}

export interface DeleteExpiredCartsRequest {
    days: number;
}

export interface FilterOrdersRequest {
    filter?: Array<string>;
    sort?: Array<string>;
    expand?: Array<string>;
    project?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface FindOrderByIdRequest {
    id: string;
}

export interface GetCustomerCartRequest {
    customerId: string;
}

export interface GetOrderPaymentMethodsRequest {
    orderId: string;
}

export interface GetOrderShippingMethodsRequest {
    orderId: string;
}

export interface GetShippingDeliveryParcelByIdRequest {
    orderId: string;
    shippingId: string;
    deliveryId: string;
    parcelId: string;
}

export interface ImportOrdersRequest {
    orderImportDTO: Array<OrderImportDTO>;
}

export interface MakePaymentInterfaceInteractionRequest {
    orderId: string;
    paymentId: string;
    transactionId: string;
    makePaymentInteractionDTO: MakePaymentInteractionDTO;
}

export interface MakeShippingInterfaceInteractionRequest {
    orderId: string;
    shippingId: string;
    deliveryId: string;
    parcelId: string;
    makeShippingInteractionDTO: MakeShippingInteractionDTO;
}

export interface RemoveOrderDiscountCodeRequest {
    orderId: string;
    discountCodeUpdateDTO: DiscountCodeUpdateDTO;
}

export interface RemoveOrderLineItemRequest {
    orderId: string;
    lineItemId: string;
}

export interface SetOrderBillingAddressRequest {
    orderId: string;
    addressDTO: AddressDTO;
}

export interface SetOrderDiscountCodeRequest {
    orderId: string;
    discountCodeUpdateDTO: DiscountCodeUpdateDTO;
}

export interface SetOrderLineItemQuantityRequest {
    orderId: string;
    lineItemId: string;
    quantityUpdateDTO: QuantityUpdateDTO;
}

export interface SetOrderMerchantsPaymentMethodsRequest {
    orderId: string;
    merchantsMethodsUpdateDTO: MerchantsMethodsUpdateDTO;
}

export interface SetOrderMerchantsShippingMethodsRequest {
    orderId: string;
    merchantsMethodsUpdateDTO: MerchantsMethodsUpdateDTO;
}

export interface SetOrderPlatformPaymentMethodRequest {
    orderId: string;
    platformMethodUpdateDTO: PlatformMethodUpdateDTO;
}

export interface SetOrderPlatformShippingMethodRequest {
    orderId: string;
    platformMethodUpdateDTO: PlatformMethodUpdateDTO;
}

export interface SetOrderShippingAddressRequest {
    orderId: string;
    shippingAddressDTO: ShippingAddressDTO;
}

export interface SetOrderStatusRequest {
    orderId: string;
    orderStatusUpdateDTO: OrderStatusUpdateDTO;
}

export interface SetPaymentStatusRequest {
    orderId: string;
    paymentId: string;
    paymentStatusUpdateDTO: PaymentStatusUpdateDTO;
}

export interface SetShippingStatusRequest {
    orderId: string;
    shippingId: string;
    shippingStatusUpdateDTO: ShippingStatusUpdateDTO;
}

export interface TransitionLineItemQuantityStateRequest {
    orderId: string;
    transitionLineItemQuantityState: TransitionLineItemQuantityState;
}

export interface TransitionOrderStateRequest {
    orderId: string;
    transitionOrderStateDTO: TransitionOrderStateDTO;
}

export interface UpdateOrderNoteRequest {
    orderId: string;
    orderNoteUpdateDTO: OrderNoteUpdateDTO;
}

export interface UpdateShippingDeliveryParcelRequest {
    orderId: string;
    shippingId: string;
    deliveryId: string;
    parcelId: string;
    shippingDeliveryParcelDraftDTO: ShippingDeliveryParcelDraftDTO;
}

/**
 * 
 */
export class OrdersApi extends runtime.BaseAPI {

    /**
     * Adds a line item to order by order id.
     */
    async addOrderLineItemRaw(requestParameters: AddOrderLineItemRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling addOrderLineItem.');
        }

        if (requestParameters.lineItemDraftDTO === null || requestParameters.lineItemDraftDTO === undefined) {
            throw new runtime.RequiredError('lineItemDraftDTO','Required parameter requestParameters.lineItemDraftDTO was null or undefined when calling addOrderLineItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/line-items`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LineItemDraftDTOToJSON(requestParameters.lineItemDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Adds a line item to order by order id.
     */
    async addOrderLineItem(requestParameters: AddOrderLineItemRequest): Promise<OrderDTO> {
        const response = await this.addOrderLineItemRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new cart.
     */
    async createCartRaw(requestParameters: CreateCartRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createCart.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/cart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new cart.
     */
    async createCart(requestParameters: CreateCartRequest): Promise<OrderDTO> {
        const response = await this.createCartRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new order.
     */
    async createOrderFromCartRaw(requestParameters: CreateOrderFromCartRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling createOrderFromCart.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new order.
     */
    async createOrderFromCart(requestParameters: CreateOrderFromCartRequest): Promise<OrderDTO> {
        const response = await this.createOrderFromCartRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new payment interface interaction.
     */
    async createPaymentInterfaceInteractionRaw(requestParameters: CreatePaymentInterfaceInteractionRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createPaymentInterfaceInteraction.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling createPaymentInterfaceInteraction.');
        }

        if (requestParameters.paymentInterfaceInteractionDraftDTO === null || requestParameters.paymentInterfaceInteractionDraftDTO === undefined) {
            throw new runtime.RequiredError('paymentInterfaceInteractionDraftDTO','Required parameter requestParameters.paymentInterfaceInteractionDraftDTO was null or undefined when calling createPaymentInterfaceInteraction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/payments/{paymentId}/interface-interactions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentInterfaceInteractionDraftDTOToJSON(requestParameters.paymentInterfaceInteractionDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new payment interface interaction.
     */
    async createPaymentInterfaceInteraction(requestParameters: CreatePaymentInterfaceInteractionRequest): Promise<OrderDTO> {
        const response = await this.createPaymentInterfaceInteractionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new payment transaction per order id and payment id.
     */
    async createPaymentTransactionRaw(requestParameters: CreatePaymentTransactionRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createPaymentTransaction.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling createPaymentTransaction.');
        }

        if (requestParameters.paymentTransactionDraftDTO === null || requestParameters.paymentTransactionDraftDTO === undefined) {
            throw new runtime.RequiredError('paymentTransactionDraftDTO','Required parameter requestParameters.paymentTransactionDraftDTO was null or undefined when calling createPaymentTransaction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/payments/{paymentId}/transactions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentTransactionDraftDTOToJSON(requestParameters.paymentTransactionDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new payment transaction per order id and payment id.
     */
    async createPaymentTransaction(requestParameters: CreatePaymentTransactionRequest): Promise<OrderDTO> {
        const response = await this.createPaymentTransactionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new shipping delivery per order id and shipping id.
     */
    async createShippingDeliveryRaw(requestParameters: CreateShippingDeliveryRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createShippingDelivery.');
        }

        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling createShippingDelivery.');
        }

        if (requestParameters.shippingDeliveryDraftDTO === null || requestParameters.shippingDeliveryDraftDTO === undefined) {
            throw new runtime.RequiredError('shippingDeliveryDraftDTO','Required parameter requestParameters.shippingDeliveryDraftDTO was null or undefined when calling createShippingDelivery.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/shippings/{shippingId}/deliveries`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters.shippingId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingDeliveryDraftDTOToJSON(requestParameters.shippingDeliveryDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new shipping delivery per order id and shipping id.
     */
    async createShippingDelivery(requestParameters: CreateShippingDeliveryRequest): Promise<OrderDTO> {
        const response = await this.createShippingDeliveryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new shipping delivery parcel per order id and shipping id.
     */
    async createShippingDeliveryParcelRaw(requestParameters: CreateShippingDeliveryParcelRequest): Promise<runtime.ApiResponse<ShippingDeliveryParcelDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createShippingDeliveryParcel.');
        }

        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling createShippingDeliveryParcel.');
        }

        if (requestParameters.deliveryId === null || requestParameters.deliveryId === undefined) {
            throw new runtime.RequiredError('deliveryId','Required parameter requestParameters.deliveryId was null or undefined when calling createShippingDeliveryParcel.');
        }

        if (requestParameters.shippingDeliveryParcelDraftDTO === null || requestParameters.shippingDeliveryParcelDraftDTO === undefined) {
            throw new runtime.RequiredError('shippingDeliveryParcelDraftDTO','Required parameter requestParameters.shippingDeliveryParcelDraftDTO was null or undefined when calling createShippingDeliveryParcel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/shippings/{shippingId}/deliveries/{deliveryId}/parcels`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters.shippingId))).replace(`{${"deliveryId"}}`, encodeURIComponent(String(requestParameters.deliveryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingDeliveryParcelDraftDTOToJSON(requestParameters.shippingDeliveryParcelDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingDeliveryParcelDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new shipping delivery parcel per order id and shipping id.
     */
    async createShippingDeliveryParcel(requestParameters: CreateShippingDeliveryParcelRequest): Promise<ShippingDeliveryParcelDTO> {
        const response = await this.createShippingDeliveryParcelRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new shipping interface interaction, e.g. create shipping request, track shipping request, cancel shipping request, etc.
     */
    async createShippingInterfaceInteractionRaw(requestParameters: CreateShippingInterfaceInteractionRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling createShippingInterfaceInteraction.');
        }

        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling createShippingInterfaceInteraction.');
        }

        if (requestParameters.shippingInterfaceInteractionDraftDTO === null || requestParameters.shippingInterfaceInteractionDraftDTO === undefined) {
            throw new runtime.RequiredError('shippingInterfaceInteractionDraftDTO','Required parameter requestParameters.shippingInterfaceInteractionDraftDTO was null or undefined when calling createShippingInterfaceInteraction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/shippings/{shippingId}/interface-interactions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters.shippingId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingInterfaceInteractionDraftDTOToJSON(requestParameters.shippingInterfaceInteractionDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new shipping interface interaction, e.g. create shipping request, track shipping request, cancel shipping request, etc.
     */
    async createShippingInterfaceInteraction(requestParameters: CreateShippingInterfaceInteractionRequest): Promise<OrderDTO> {
        const response = await this.createShippingInterfaceInteractionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes all carts older than x days.
     */
    async deleteExpiredCartsRaw(requestParameters: DeleteExpiredCartsRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.days === null || requestParameters.days === undefined) {
            throw new runtime.RequiredError('days','Required parameter requestParameters.days was null or undefined when calling deleteExpiredCarts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/orders/carts/{days}`.replace(`{${"days"}}`, encodeURIComponent(String(requestParameters.days))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Deletes all carts older than x days.
     */
    async deleteExpiredCarts(requestParameters: DeleteExpiredCartsRequest): Promise<OrderDTO> {
        const response = await this.deleteExpiredCartsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all orders per page.
     */
    async filterOrdersRaw(requestParameters: FilterOrdersRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns all orders per page.
     */
    async filterOrders(requestParameters: FilterOrdersRequest): Promise<void> {
        await this.filterOrdersRaw(requestParameters);
    }

    /**
     * Returns an order by id.
     */
    async findOrderByIdRaw(requestParameters: FindOrderByIdRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOrderById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/orders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Returns an order by id.
     */
    async findOrderById(requestParameters: FindOrderByIdRequest): Promise<OrderDTO> {
        const response = await this.findOrderByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a cart per customer id.
     */
    async getCustomerCartRaw(requestParameters: GetCustomerCartRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.customerId === null || requestParameters.customerId === undefined) {
            throw new runtime.RequiredError('customerId','Required parameter requestParameters.customerId was null or undefined when calling getCustomerCart.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/orders/cart/{customerId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters.customerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Returns a cart per customer id.
     */
    async getCustomerCart(requestParameters: GetCustomerCartRequest): Promise<OrderDTO> {
        const response = await this.getCustomerCartRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns either or not has new orders.
     */
    async getNewOrdersRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/orders/new-orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns either or not has new orders.
     */
    async getNewOrders(): Promise<object> {
        const response = await this.getNewOrdersRaw();
        return await response.value();
    }

    /**
     * Returns available order payment methods.
     */
    async getOrderPaymentMethodsRaw(requestParameters: GetOrderPaymentMethodsRequest): Promise<runtime.ApiResponse<PaymentMethodsInfo>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderPaymentMethods.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/payment-methods`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentMethodsInfoFromJSON(jsonValue));
    }

    /**
     * Returns available order payment methods.
     */
    async getOrderPaymentMethods(requestParameters: GetOrderPaymentMethodsRequest): Promise<PaymentMethodsInfo> {
        const response = await this.getOrderPaymentMethodsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns available order shipping methods.
     */
    async getOrderShippingMethodsRaw(requestParameters: GetOrderShippingMethodsRequest): Promise<runtime.ApiResponse<ShippingMethodsInfo>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getOrderShippingMethods.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/shipping-methods`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingMethodsInfoFromJSON(jsonValue));
    }

    /**
     * Returns available order shipping methods.
     */
    async getOrderShippingMethods(requestParameters: GetOrderShippingMethodsRequest): Promise<ShippingMethodsInfo> {
        const response = await this.getOrderShippingMethodsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a shipping delivery parcel by order id, shipping id and parcel id.
     */
    async getShippingDeliveryParcelByIdRaw(requestParameters: GetShippingDeliveryParcelByIdRequest): Promise<runtime.ApiResponse<ShippingDeliveryParcelDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling getShippingDeliveryParcelById.');
        }

        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling getShippingDeliveryParcelById.');
        }

        if (requestParameters.deliveryId === null || requestParameters.deliveryId === undefined) {
            throw new runtime.RequiredError('deliveryId','Required parameter requestParameters.deliveryId was null or undefined when calling getShippingDeliveryParcelById.');
        }

        if (requestParameters.parcelId === null || requestParameters.parcelId === undefined) {
            throw new runtime.RequiredError('parcelId','Required parameter requestParameters.parcelId was null or undefined when calling getShippingDeliveryParcelById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/shippings/{shippingId}/deliveries/{deliveryId}/parcels/{parcelId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters.shippingId))).replace(`{${"deliveryId"}}`, encodeURIComponent(String(requestParameters.deliveryId))).replace(`{${"parcelId"}}`, encodeURIComponent(String(requestParameters.parcelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingDeliveryParcelDTOFromJSON(jsonValue));
    }

    /**
     * Returns a shipping delivery parcel by order id, shipping id and parcel id.
     */
    async getShippingDeliveryParcelById(requestParameters: GetShippingDeliveryParcelByIdRequest): Promise<ShippingDeliveryParcelDTO> {
        const response = await this.getShippingDeliveryParcelByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Imports list of orders. Returns imported orders with their ids.
     */
    async importOrdersRaw(requestParameters: ImportOrdersRequest): Promise<runtime.ApiResponse<Array<OrderDTO>>> {
        if (requestParameters.orderImportDTO === null || requestParameters.orderImportDTO === undefined) {
            throw new runtime.RequiredError('orderImportDTO','Required parameter requestParameters.orderImportDTO was null or undefined when calling importOrders.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.orderImportDTO.map(OrderImportDTOToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrderDTOFromJSON));
    }

    /**
     * Imports list of orders. Returns imported orders with their ids.
     */
    async importOrders(requestParameters: ImportOrdersRequest): Promise<Array<OrderDTO>> {
        const response = await this.importOrdersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Executes a payment interface interaction per transaction id.
     */
    async makePaymentInterfaceInteractionRaw(requestParameters: MakePaymentInterfaceInteractionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling makePaymentInterfaceInteraction.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling makePaymentInterfaceInteraction.');
        }

        if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
            throw new runtime.RequiredError('transactionId','Required parameter requestParameters.transactionId was null or undefined when calling makePaymentInterfaceInteraction.');
        }

        if (requestParameters.makePaymentInteractionDTO === null || requestParameters.makePaymentInteractionDTO === undefined) {
            throw new runtime.RequiredError('makePaymentInteractionDTO','Required parameter requestParameters.makePaymentInteractionDTO was null or undefined when calling makePaymentInterfaceInteraction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/payments/{paymentId}/transactions/{transactionId}/interface-interactions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))).replace(`{${"transactionId"}}`, encodeURIComponent(String(requestParameters.transactionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MakePaymentInteractionDTOToJSON(requestParameters.makePaymentInteractionDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Executes a payment interface interaction per transaction id.
     */
    async makePaymentInterfaceInteraction(requestParameters: MakePaymentInterfaceInteractionRequest): Promise<object> {
        const response = await this.makePaymentInterfaceInteractionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Executes a shipping interface interaction per delivery and parcel id, e.g. create shipping request, track shipping request, cancel shipping request, etc.
     */
    async makeShippingInterfaceInteractionRaw(requestParameters: MakeShippingInterfaceInteractionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling makeShippingInterfaceInteraction.');
        }

        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling makeShippingInterfaceInteraction.');
        }

        if (requestParameters.deliveryId === null || requestParameters.deliveryId === undefined) {
            throw new runtime.RequiredError('deliveryId','Required parameter requestParameters.deliveryId was null or undefined when calling makeShippingInterfaceInteraction.');
        }

        if (requestParameters.parcelId === null || requestParameters.parcelId === undefined) {
            throw new runtime.RequiredError('parcelId','Required parameter requestParameters.parcelId was null or undefined when calling makeShippingInterfaceInteraction.');
        }

        if (requestParameters.makeShippingInteractionDTO === null || requestParameters.makeShippingInteractionDTO === undefined) {
            throw new runtime.RequiredError('makeShippingInteractionDTO','Required parameter requestParameters.makeShippingInteractionDTO was null or undefined when calling makeShippingInterfaceInteraction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/shippings/{shippingId}/deliveries/{deliveryId}/parcels/{parcelId}/interface-interactions`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters.shippingId))).replace(`{${"deliveryId"}}`, encodeURIComponent(String(requestParameters.deliveryId))).replace(`{${"parcelId"}}`, encodeURIComponent(String(requestParameters.parcelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MakeShippingInteractionDTOToJSON(requestParameters.makeShippingInteractionDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Executes a shipping interface interaction per delivery and parcel id, e.g. create shipping request, track shipping request, cancel shipping request, etc.
     */
    async makeShippingInterfaceInteraction(requestParameters: MakeShippingInterfaceInteractionRequest): Promise<object> {
        const response = await this.makeShippingInterfaceInteractionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Removes a discount code from order.
     */
    async removeOrderDiscountCodeRaw(requestParameters: RemoveOrderDiscountCodeRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeOrderDiscountCode.');
        }

        if (requestParameters.discountCodeUpdateDTO === null || requestParameters.discountCodeUpdateDTO === undefined) {
            throw new runtime.RequiredError('discountCodeUpdateDTO','Required parameter requestParameters.discountCodeUpdateDTO was null or undefined when calling removeOrderDiscountCode.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/discount-code`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DiscountCodeUpdateDTOToJSON(requestParameters.discountCodeUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Removes a discount code from order.
     */
    async removeOrderDiscountCode(requestParameters: RemoveOrderDiscountCodeRequest): Promise<OrderDTO> {
        const response = await this.removeOrderDiscountCodeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an line item from order by order id and line item id.
     */
    async removeOrderLineItemRaw(requestParameters: RemoveOrderLineItemRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling removeOrderLineItem.');
        }

        if (requestParameters.lineItemId === null || requestParameters.lineItemId === undefined) {
            throw new runtime.RequiredError('lineItemId','Required parameter requestParameters.lineItemId was null or undefined when calling removeOrderLineItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/line-items/{lineItemId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"lineItemId"}}`, encodeURIComponent(String(requestParameters.lineItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Deletes an line item from order by order id and line item id.
     */
    async removeOrderLineItem(requestParameters: RemoveOrderLineItemRequest): Promise<OrderDTO> {
        const response = await this.removeOrderLineItemRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sets order billing address.
     */
    async setOrderBillingAddressRaw(requestParameters: SetOrderBillingAddressRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setOrderBillingAddress.');
        }

        if (requestParameters.addressDTO === null || requestParameters.addressDTO === undefined) {
            throw new runtime.RequiredError('addressDTO','Required parameter requestParameters.addressDTO was null or undefined when calling setOrderBillingAddress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/billing-address`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AddressDTOToJSON(requestParameters.addressDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Sets order billing address.
     */
    async setOrderBillingAddress(requestParameters: SetOrderBillingAddressRequest): Promise<OrderDTO> {
        const response = await this.setOrderBillingAddressRaw(requestParameters);
        return await response.value();
    }

    /**
     * Applies a discount code to order.
     */
    async setOrderDiscountCodeRaw(requestParameters: SetOrderDiscountCodeRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setOrderDiscountCode.');
        }

        if (requestParameters.discountCodeUpdateDTO === null || requestParameters.discountCodeUpdateDTO === undefined) {
            throw new runtime.RequiredError('discountCodeUpdateDTO','Required parameter requestParameters.discountCodeUpdateDTO was null or undefined when calling setOrderDiscountCode.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/discount-code`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DiscountCodeUpdateDTOToJSON(requestParameters.discountCodeUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Applies a discount code to order.
     */
    async setOrderDiscountCode(requestParameters: SetOrderDiscountCodeRequest): Promise<OrderDTO> {
        const response = await this.setOrderDiscountCodeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates line item quantity by order id and line item id.
     */
    async setOrderLineItemQuantityRaw(requestParameters: SetOrderLineItemQuantityRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setOrderLineItemQuantity.');
        }

        if (requestParameters.lineItemId === null || requestParameters.lineItemId === undefined) {
            throw new runtime.RequiredError('lineItemId','Required parameter requestParameters.lineItemId was null or undefined when calling setOrderLineItemQuantity.');
        }

        if (requestParameters.quantityUpdateDTO === null || requestParameters.quantityUpdateDTO === undefined) {
            throw new runtime.RequiredError('quantityUpdateDTO','Required parameter requestParameters.quantityUpdateDTO was null or undefined when calling setOrderLineItemQuantity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/line-items/{lineItemId}/quantity`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"lineItemId"}}`, encodeURIComponent(String(requestParameters.lineItemId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: QuantityUpdateDTOToJSON(requestParameters.quantityUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Updates line item quantity by order id and line item id.
     */
    async setOrderLineItemQuantity(requestParameters: SetOrderLineItemQuantityRequest): Promise<OrderDTO> {
        const response = await this.setOrderLineItemQuantityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sets order payment methods defined per merchant.
     */
    async setOrderMerchantsPaymentMethodsRaw(requestParameters: SetOrderMerchantsPaymentMethodsRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setOrderMerchantsPaymentMethods.');
        }

        if (requestParameters.merchantsMethodsUpdateDTO === null || requestParameters.merchantsMethodsUpdateDTO === undefined) {
            throw new runtime.RequiredError('merchantsMethodsUpdateDTO','Required parameter requestParameters.merchantsMethodsUpdateDTO was null or undefined when calling setOrderMerchantsPaymentMethods.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/merchants-payment-methods`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MerchantsMethodsUpdateDTOToJSON(requestParameters.merchantsMethodsUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Sets order payment methods defined per merchant.
     */
    async setOrderMerchantsPaymentMethods(requestParameters: SetOrderMerchantsPaymentMethodsRequest): Promise<OrderDTO> {
        const response = await this.setOrderMerchantsPaymentMethodsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sets order shipping methods defined per merchant.
     */
    async setOrderMerchantsShippingMethodsRaw(requestParameters: SetOrderMerchantsShippingMethodsRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setOrderMerchantsShippingMethods.');
        }

        if (requestParameters.merchantsMethodsUpdateDTO === null || requestParameters.merchantsMethodsUpdateDTO === undefined) {
            throw new runtime.RequiredError('merchantsMethodsUpdateDTO','Required parameter requestParameters.merchantsMethodsUpdateDTO was null or undefined when calling setOrderMerchantsShippingMethods.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/merchants-shipping-methods`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MerchantsMethodsUpdateDTOToJSON(requestParameters.merchantsMethodsUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Sets order shipping methods defined per merchant.
     */
    async setOrderMerchantsShippingMethods(requestParameters: SetOrderMerchantsShippingMethodsRequest): Promise<OrderDTO> {
        const response = await this.setOrderMerchantsShippingMethodsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sets order payment method defined per platform.
     */
    async setOrderPlatformPaymentMethodRaw(requestParameters: SetOrderPlatformPaymentMethodRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setOrderPlatformPaymentMethod.');
        }

        if (requestParameters.platformMethodUpdateDTO === null || requestParameters.platformMethodUpdateDTO === undefined) {
            throw new runtime.RequiredError('platformMethodUpdateDTO','Required parameter requestParameters.platformMethodUpdateDTO was null or undefined when calling setOrderPlatformPaymentMethod.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/platform-payment-method`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PlatformMethodUpdateDTOToJSON(requestParameters.platformMethodUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Sets order payment method defined per platform.
     */
    async setOrderPlatformPaymentMethod(requestParameters: SetOrderPlatformPaymentMethodRequest): Promise<OrderDTO> {
        const response = await this.setOrderPlatformPaymentMethodRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sets order shipping method defined per platform.
     */
    async setOrderPlatformShippingMethodRaw(requestParameters: SetOrderPlatformShippingMethodRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setOrderPlatformShippingMethod.');
        }

        if (requestParameters.platformMethodUpdateDTO === null || requestParameters.platformMethodUpdateDTO === undefined) {
            throw new runtime.RequiredError('platformMethodUpdateDTO','Required parameter requestParameters.platformMethodUpdateDTO was null or undefined when calling setOrderPlatformShippingMethod.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/platform-shipping-method`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PlatformMethodUpdateDTOToJSON(requestParameters.platformMethodUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Sets order shipping method defined per platform.
     */
    async setOrderPlatformShippingMethod(requestParameters: SetOrderPlatformShippingMethodRequest): Promise<OrderDTO> {
        const response = await this.setOrderPlatformShippingMethodRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sets order shipping address.
     */
    async setOrderShippingAddressRaw(requestParameters: SetOrderShippingAddressRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setOrderShippingAddress.');
        }

        if (requestParameters.shippingAddressDTO === null || requestParameters.shippingAddressDTO === undefined) {
            throw new runtime.RequiredError('shippingAddressDTO','Required parameter requestParameters.shippingAddressDTO was null or undefined when calling setOrderShippingAddress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/shipping-address`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingAddressDTOToJSON(requestParameters.shippingAddressDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Sets order shipping address.
     */
    async setOrderShippingAddress(requestParameters: SetOrderShippingAddressRequest): Promise<OrderDTO> {
        const response = await this.setOrderShippingAddressRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates order status per order id.
     */
    async setOrderStatusRaw(requestParameters: SetOrderStatusRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setOrderStatus.');
        }

        if (requestParameters.orderStatusUpdateDTO === null || requestParameters.orderStatusUpdateDTO === undefined) {
            throw new runtime.RequiredError('orderStatusUpdateDTO','Required parameter requestParameters.orderStatusUpdateDTO was null or undefined when calling setOrderStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/status`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: OrderStatusUpdateDTOToJSON(requestParameters.orderStatusUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Updates order status per order id.
     */
    async setOrderStatus(requestParameters: SetOrderStatusRequest): Promise<OrderDTO> {
        const response = await this.setOrderStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sets payment status per order id and payment id.
     */
    async setPaymentStatusRaw(requestParameters: SetPaymentStatusRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setPaymentStatus.');
        }

        if (requestParameters.paymentId === null || requestParameters.paymentId === undefined) {
            throw new runtime.RequiredError('paymentId','Required parameter requestParameters.paymentId was null or undefined when calling setPaymentStatus.');
        }

        if (requestParameters.paymentStatusUpdateDTO === null || requestParameters.paymentStatusUpdateDTO === undefined) {
            throw new runtime.RequiredError('paymentStatusUpdateDTO','Required parameter requestParameters.paymentStatusUpdateDTO was null or undefined when calling setPaymentStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/payments/{paymentId}/status`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"paymentId"}}`, encodeURIComponent(String(requestParameters.paymentId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentStatusUpdateDTOToJSON(requestParameters.paymentStatusUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Sets payment status per order id and payment id.
     */
    async setPaymentStatus(requestParameters: SetPaymentStatusRequest): Promise<OrderDTO> {
        const response = await this.setPaymentStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates order shipping status by order id and status id.
     */
    async setShippingStatusRaw(requestParameters: SetShippingStatusRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling setShippingStatus.');
        }

        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling setShippingStatus.');
        }

        if (requestParameters.shippingStatusUpdateDTO === null || requestParameters.shippingStatusUpdateDTO === undefined) {
            throw new runtime.RequiredError('shippingStatusUpdateDTO','Required parameter requestParameters.shippingStatusUpdateDTO was null or undefined when calling setShippingStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/shippings/{shippingId}/status`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters.shippingId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingStatusUpdateDTOToJSON(requestParameters.shippingStatusUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Updates order shipping status by order id and status id.
     */
    async setShippingStatus(requestParameters: SetShippingStatusRequest): Promise<OrderDTO> {
        const response = await this.setShippingStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Syncs shipping statuses from shipping provider\'s API for all orders with shipping status Pending, Delayed, Partial.
     */
    async syncShippingsRaw(): Promise<runtime.ApiResponse<Array<ShippingDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/orders/sync-shippings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ShippingDTOFromJSON));
    }

    /**
     * Syncs shipping statuses from shipping provider\'s API for all orders with shipping status Pending, Delayed, Partial.
     */
    async syncShippings(): Promise<Array<ShippingDTO>> {
        const response = await this.syncShippingsRaw();
        return await response.value();
    }

    /**
     * Updates line items state for items in order.
     */
    async transitionLineItemQuantityStateRaw(requestParameters: TransitionLineItemQuantityStateRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling transitionLineItemQuantityState.');
        }

        if (requestParameters.transitionLineItemQuantityState === null || requestParameters.transitionLineItemQuantityState === undefined) {
            throw new runtime.RequiredError('transitionLineItemQuantityState','Required parameter requestParameters.transitionLineItemQuantityState was null or undefined when calling transitionLineItemQuantityState.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/line-items/state`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TransitionLineItemQuantityStateToJSON(requestParameters.transitionLineItemQuantityState),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Updates line items state for items in order.
     */
    async transitionLineItemQuantityState(requestParameters: TransitionLineItemQuantityStateRequest): Promise<OrderDTO> {
        const response = await this.transitionLineItemQuantityStateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates order state per order id.
     */
    async transitionOrderStateRaw(requestParameters: TransitionOrderStateRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling transitionOrderState.');
        }

        if (requestParameters.transitionOrderStateDTO === null || requestParameters.transitionOrderStateDTO === undefined) {
            throw new runtime.RequiredError('transitionOrderStateDTO','Required parameter requestParameters.transitionOrderStateDTO was null or undefined when calling transitionOrderState.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/state`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TransitionOrderStateDTOToJSON(requestParameters.transitionOrderStateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Updates order state per order id.
     */
    async transitionOrderState(requestParameters: TransitionOrderStateRequest): Promise<OrderDTO> {
        const response = await this.transitionOrderStateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates order note per order id.
     */
    async updateOrderNoteRaw(requestParameters: UpdateOrderNoteRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateOrderNote.');
        }

        if (requestParameters.orderNoteUpdateDTO === null || requestParameters.orderNoteUpdateDTO === undefined) {
            throw new runtime.RequiredError('orderNoteUpdateDTO','Required parameter requestParameters.orderNoteUpdateDTO was null or undefined when calling updateOrderNote.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/note`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: OrderNoteUpdateDTOToJSON(requestParameters.orderNoteUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Updates order note per order id.
     */
    async updateOrderNote(requestParameters: UpdateOrderNoteRequest): Promise<OrderDTO> {
        const response = await this.updateOrderNoteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a shipping delivery parcel by order id, shipping id and parcel id.
     */
    async updateShippingDeliveryParcelRaw(requestParameters: UpdateShippingDeliveryParcelRequest): Promise<runtime.ApiResponse<ShippingDeliveryParcelDTO>> {
        if (requestParameters.orderId === null || requestParameters.orderId === undefined) {
            throw new runtime.RequiredError('orderId','Required parameter requestParameters.orderId was null or undefined when calling updateShippingDeliveryParcel.');
        }

        if (requestParameters.shippingId === null || requestParameters.shippingId === undefined) {
            throw new runtime.RequiredError('shippingId','Required parameter requestParameters.shippingId was null or undefined when calling updateShippingDeliveryParcel.');
        }

        if (requestParameters.deliveryId === null || requestParameters.deliveryId === undefined) {
            throw new runtime.RequiredError('deliveryId','Required parameter requestParameters.deliveryId was null or undefined when calling updateShippingDeliveryParcel.');
        }

        if (requestParameters.parcelId === null || requestParameters.parcelId === undefined) {
            throw new runtime.RequiredError('parcelId','Required parameter requestParameters.parcelId was null or undefined when calling updateShippingDeliveryParcel.');
        }

        if (requestParameters.shippingDeliveryParcelDraftDTO === null || requestParameters.shippingDeliveryParcelDraftDTO === undefined) {
            throw new runtime.RequiredError('shippingDeliveryParcelDraftDTO','Required parameter requestParameters.shippingDeliveryParcelDraftDTO was null or undefined when calling updateShippingDeliveryParcel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/orders/{orderId}/shippings/{shippingId}/deliveries/{deliveryId}/parcels/{parcelId}`.replace(`{${"orderId"}}`, encodeURIComponent(String(requestParameters.orderId))).replace(`{${"shippingId"}}`, encodeURIComponent(String(requestParameters.shippingId))).replace(`{${"deliveryId"}}`, encodeURIComponent(String(requestParameters.deliveryId))).replace(`{${"parcelId"}}`, encodeURIComponent(String(requestParameters.parcelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingDeliveryParcelDraftDTOToJSON(requestParameters.shippingDeliveryParcelDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingDeliveryParcelDTOFromJSON(jsonValue));
    }

    /**
     * Updates a shipping delivery parcel by order id, shipping id and parcel id.
     */
    async updateShippingDeliveryParcel(requestParameters: UpdateShippingDeliveryParcelRequest): Promise<ShippingDeliveryParcelDTO> {
        const response = await this.updateShippingDeliveryParcelRaw(requestParameters);
        return await response.value();
    }

}
