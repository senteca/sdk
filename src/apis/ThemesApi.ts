/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ThemeDTO,
    ThemeDTOFromJSON,
    ThemeDTOToJSON,
    ThemeDraftDTO,
    ThemeDraftDTOFromJSON,
    ThemeDraftDTOToJSON,
} from '../models';

export interface DeleteByKeyRequest {
    themeKey: string;
    viewKey: string;
}

export interface InstallRequest {
    themeDraftDTO: ThemeDraftDTO;
}

/**
 * 
 */
export class ThemesApi extends runtime.BaseAPI {

    /**
     * Deletes theme resources
     */
    async deleteByKeyRaw(requestParameters: DeleteByKeyRequest): Promise<runtime.ApiResponse<ThemeDTO>> {
        if (requestParameters.themeKey === null || requestParameters.themeKey === undefined) {
            throw new runtime.RequiredError('themeKey','Required parameter requestParameters.themeKey was null or undefined when calling deleteByKey.');
        }

        if (requestParameters.viewKey === null || requestParameters.viewKey === undefined) {
            throw new runtime.RequiredError('viewKey','Required parameter requestParameters.viewKey was null or undefined when calling deleteByKey.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cms/themes/{themeKey}/{viewKey}`.replace(`{${"themeKey"}}`, encodeURIComponent(String(requestParameters.themeKey))).replace(`{${"viewKey"}}`, encodeURIComponent(String(requestParameters.viewKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeDTOFromJSON(jsonValue));
    }

    /**
     * Deletes theme resources
     */
    async deleteByKey(requestParameters: DeleteByKeyRequest): Promise<ThemeDTO> {
        const response = await this.deleteByKeyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Install a theme
     */
    async installRaw(requestParameters: InstallRequest): Promise<runtime.ApiResponse<ThemeDTO>> {
        if (requestParameters.themeDraftDTO === null || requestParameters.themeDraftDTO === undefined) {
            throw new runtime.RequiredError('themeDraftDTO','Required parameter requestParameters.themeDraftDTO was null or undefined when calling install.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cms/themes/install`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThemeDraftDTOToJSON(requestParameters.themeDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeDTOFromJSON(jsonValue));
    }

    /**
     * Install a theme
     */
    async install(requestParameters: InstallRequest): Promise<ThemeDTO> {
        const response = await this.installRaw(requestParameters);
        return await response.value();
    }

}
