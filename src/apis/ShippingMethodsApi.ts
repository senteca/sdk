/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ShippingMethodDTO,
    ShippingMethodDTOFromJSON,
    ShippingMethodDTOToJSON,
    ShippingMethodDraftDTO,
    ShippingMethodDraftDTOFromJSON,
    ShippingMethodDraftDTOToJSON,
} from '../models';

export interface CreateShippingMethodRequest {
    shippingMethodDraftDTO: ShippingMethodDraftDTO;
}

export interface DeleteShippingMethodByIdRequest {
    id: string;
}

export interface FilterShippingMethodsRequest {
    filter?: Array<string>;
    sort?: Array<string>;
    expand?: Array<string>;
    project?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface FindShippingMethodByIdRequest {
    id: string;
}

export interface UpdateShippingMethodByIdRequest {
    id: string;
    shippingMethodDraftDTO: ShippingMethodDraftDTO;
}

/**
 * 
 */
export class ShippingMethodsApi extends runtime.BaseAPI {

    /**
     * Creates a new shipping method.
     */
    async createShippingMethodRaw(requestParameters: CreateShippingMethodRequest): Promise<runtime.ApiResponse<ShippingMethodDTO>> {
        if (requestParameters.shippingMethodDraftDTO === null || requestParameters.shippingMethodDraftDTO === undefined) {
            throw new runtime.RequiredError('shippingMethodDraftDTO','Required parameter requestParameters.shippingMethodDraftDTO was null or undefined when calling createShippingMethod.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/shipping-methods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingMethodDraftDTOToJSON(requestParameters.shippingMethodDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingMethodDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new shipping method.
     */
    async createShippingMethod(requestParameters: CreateShippingMethodRequest): Promise<ShippingMethodDTO> {
        const response = await this.createShippingMethodRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a shipping method by id.
     */
    async deleteShippingMethodByIdRaw(requestParameters: DeleteShippingMethodByIdRequest): Promise<runtime.ApiResponse<ShippingMethodDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteShippingMethodById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/shipping-methods/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingMethodDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a shipping method by id.
     */
    async deleteShippingMethodById(requestParameters: DeleteShippingMethodByIdRequest): Promise<ShippingMethodDTO> {
        const response = await this.deleteShippingMethodByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all shipping methods.
     */
    async filterShippingMethodsRaw(requestParameters: FilterShippingMethodsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/shipping-methods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all shipping methods.
     */
    async filterShippingMethods(requestParameters: FilterShippingMethodsRequest): Promise<void> {
        await this.filterShippingMethodsRaw(requestParameters);
    }

    /**
     * Returns a shipping method by id.
     */
    async findShippingMethodByIdRaw(requestParameters: FindShippingMethodByIdRequest): Promise<runtime.ApiResponse<ShippingMethodDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findShippingMethodById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/shipping-methods/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingMethodDTOFromJSON(jsonValue));
    }

    /**
     * Returns a shipping method by id.
     */
    async findShippingMethodById(requestParameters: FindShippingMethodByIdRequest): Promise<ShippingMethodDTO> {
        const response = await this.findShippingMethodByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a shipping method by id.
     */
    async updateShippingMethodByIdRaw(requestParameters: UpdateShippingMethodByIdRequest): Promise<runtime.ApiResponse<ShippingMethodDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateShippingMethodById.');
        }

        if (requestParameters.shippingMethodDraftDTO === null || requestParameters.shippingMethodDraftDTO === undefined) {
            throw new runtime.RequiredError('shippingMethodDraftDTO','Required parameter requestParameters.shippingMethodDraftDTO was null or undefined when calling updateShippingMethodById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/shipping-methods/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingMethodDraftDTOToJSON(requestParameters.shippingMethodDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingMethodDTOFromJSON(jsonValue));
    }

    /**
     * Updates a shipping method by id.
     */
    async updateShippingMethodById(requestParameters: UpdateShippingMethodByIdRequest): Promise<ShippingMethodDTO> {
        const response = await this.updateShippingMethodByIdRaw(requestParameters);
        return await response.value();
    }

}
