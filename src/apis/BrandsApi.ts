/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AssetDTO,
    AssetDTOFromJSON,
    AssetDTOToJSON,
    BrandDTO,
    BrandDTOFromJSON,
    BrandDTOToJSON,
    BrandDraftDTO,
    BrandDraftDTOFromJSON,
    BrandDraftDTOToJSON,
} from '../models';

export interface AddBrandAssetRequest {
    brandId: string;
    assetDTO: AssetDTO;
}

export interface CreateBrandRequest {
    brandDraftDTO: BrandDraftDTO;
}

export interface DeleteBrandByIdRequest {
    id: string;
}

export interface FilterBrandsRequest {
    filter: string;
    sort: string;
    expand: string;
    limit?: number;
    offset?: number;
}

export interface FindBrandByExternalIdRequest {
    externalId: string;
    expand: Array<string>;
    statuses?: Array<string>;
}

export interface FindBrandByIdRequest {
    id: string;
    expand: Array<string>;
    statuses?: Array<string>;
}

export interface FindBrandBySlugRequest {
    languageCode: string;
    slug: string;
    expand: Array<string>;
    statuses?: Array<string>;
}

export interface GetAllBrandSlugsRequest {
    languageCode: string;
}

export interface RemoveBrandAssetRequest {
    brandId: string;
    assetIndex: number;
}

export interface SearchBrandsRequest {
    expand: string;
    language: string;
    term: string;
    limit?: number;
    offset?: number;
}

export interface UpdateBrandAssetRequest {
    brandId: string;
    assetIndex: number;
    assetDTO: AssetDTO;
}

export interface UpdateBrandByIdRequest {
    id: string;
    brandDraftDTO: BrandDraftDTO;
}

/**
 * 
 */
export class BrandsApi extends runtime.BaseAPI {

    /**
     * Creates a new asset per brand id.
     */
    async addBrandAssetRaw(requestParameters: AddBrandAssetRequest): Promise<runtime.ApiResponse<BrandDTO>> {
        if (requestParameters.brandId === null || requestParameters.brandId === undefined) {
            throw new runtime.RequiredError('brandId','Required parameter requestParameters.brandId was null or undefined when calling addBrandAsset.');
        }

        if (requestParameters.assetDTO === null || requestParameters.assetDTO === undefined) {
            throw new runtime.RequiredError('assetDTO','Required parameter requestParameters.assetDTO was null or undefined when calling addBrandAsset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/brands/{brandId}/assets`.replace(`{${"brandId"}}`, encodeURIComponent(String(requestParameters.brandId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetDTOToJSON(requestParameters.assetDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new asset per brand id.
     */
    async addBrandAsset(requestParameters: AddBrandAssetRequest): Promise<BrandDTO> {
        const response = await this.addBrandAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new brand.
     */
    async createBrandRaw(requestParameters: CreateBrandRequest): Promise<runtime.ApiResponse<BrandDTO>> {
        if (requestParameters.brandDraftDTO === null || requestParameters.brandDraftDTO === undefined) {
            throw new runtime.RequiredError('brandDraftDTO','Required parameter requestParameters.brandDraftDTO was null or undefined when calling createBrand.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/brands`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BrandDraftDTOToJSON(requestParameters.brandDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new brand.
     */
    async createBrand(requestParameters: CreateBrandRequest): Promise<BrandDTO> {
        const response = await this.createBrandRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a brand by id.
     */
    async deleteBrandByIdRaw(requestParameters: DeleteBrandByIdRequest): Promise<runtime.ApiResponse<BrandDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBrandById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/brands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a brand by id.
     */
    async deleteBrandById(requestParameters: DeleteBrandByIdRequest): Promise<BrandDTO> {
        const response = await this.deleteBrandByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all brands.
     */
    async filterBrandsRaw(requestParameters: FilterBrandsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterBrands.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterBrands.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterBrands.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/brands`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all brands.
     */
    async filterBrands(requestParameters: FilterBrandsRequest): Promise<void> {
        await this.filterBrandsRaw(requestParameters);
    }

    /**
     * Returns a brand by external id.
     */
    async findBrandByExternalIdRaw(requestParameters: FindBrandByExternalIdRequest): Promise<runtime.ApiResponse<BrandDTO>> {
        if (requestParameters.externalId === null || requestParameters.externalId === undefined) {
            throw new runtime.RequiredError('externalId','Required parameter requestParameters.externalId was null or undefined when calling findBrandByExternalId.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling findBrandByExternalId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/brands/external/{externalId}`.replace(`{${"externalId"}}`, encodeURIComponent(String(requestParameters.externalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandDTOFromJSON(jsonValue));
    }

    /**
     * Returns a brand by external id.
     */
    async findBrandByExternalId(requestParameters: FindBrandByExternalIdRequest): Promise<BrandDTO> {
        const response = await this.findBrandByExternalIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a brand by id.
     */
    async findBrandByIdRaw(requestParameters: FindBrandByIdRequest): Promise<runtime.ApiResponse<BrandDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findBrandById.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling findBrandById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/brands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandDTOFromJSON(jsonValue));
    }

    /**
     * Returns a brand by id.
     */
    async findBrandById(requestParameters: FindBrandByIdRequest): Promise<BrandDTO> {
        const response = await this.findBrandByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a brand by slug and language code.
     */
    async findBrandBySlugRaw(requestParameters: FindBrandBySlugRequest): Promise<runtime.ApiResponse<BrandDTO>> {
        if (requestParameters.languageCode === null || requestParameters.languageCode === undefined) {
            throw new runtime.RequiredError('languageCode','Required parameter requestParameters.languageCode was null or undefined when calling findBrandBySlug.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling findBrandBySlug.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling findBrandBySlug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/brands/slug/{languageCode}/{slug}`.replace(`{${"languageCode"}}`, encodeURIComponent(String(requestParameters.languageCode))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandDTOFromJSON(jsonValue));
    }

    /**
     * Returns a brand by slug and language code.
     */
    async findBrandBySlug(requestParameters: FindBrandBySlugRequest): Promise<BrandDTO> {
        const response = await this.findBrandBySlugRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns all brand slugs per language code.
     */
    async getAllBrandSlugsRaw(requestParameters: GetAllBrandSlugsRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.languageCode === null || requestParameters.languageCode === undefined) {
            throw new runtime.RequiredError('languageCode','Required parameter requestParameters.languageCode was null or undefined when calling getAllBrandSlugs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/brands/slugs/{languageCode}`.replace(`{${"languageCode"}}`, encodeURIComponent(String(requestParameters.languageCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns all brand slugs per language code.
     */
    async getAllBrandSlugs(requestParameters: GetAllBrandSlugsRequest): Promise<Array<string>> {
        const response = await this.getAllBrandSlugsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an asset per brand id and asset index.
     */
    async removeBrandAssetRaw(requestParameters: RemoveBrandAssetRequest): Promise<runtime.ApiResponse<BrandDTO>> {
        if (requestParameters.brandId === null || requestParameters.brandId === undefined) {
            throw new runtime.RequiredError('brandId','Required parameter requestParameters.brandId was null or undefined when calling removeBrandAsset.');
        }

        if (requestParameters.assetIndex === null || requestParameters.assetIndex === undefined) {
            throw new runtime.RequiredError('assetIndex','Required parameter requestParameters.assetIndex was null or undefined when calling removeBrandAsset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/brands/{brandId}/assets/{assetIndex}`.replace(`{${"brandId"}}`, encodeURIComponent(String(requestParameters.brandId))).replace(`{${"assetIndex"}}`, encodeURIComponent(String(requestParameters.assetIndex))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandDTOFromJSON(jsonValue));
    }

    /**
     * Deletes an asset per brand id and asset index.
     */
    async removeBrandAsset(requestParameters: RemoveBrandAssetRequest): Promise<BrandDTO> {
        const response = await this.removeBrandAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Searches brands by name.
     */
    async searchBrandsRaw(requestParameters: SearchBrandsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling searchBrands.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling searchBrands.');
        }

        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling searchBrands.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.term !== undefined) {
            queryParameters['term'] = requestParameters.term;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/brands/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Searches brands by name.
     */
    async searchBrands(requestParameters: SearchBrandsRequest): Promise<void> {
        await this.searchBrandsRaw(requestParameters);
    }

    /**
     * Updates an asset per brand id and asset index.
     */
    async updateBrandAssetRaw(requestParameters: UpdateBrandAssetRequest): Promise<runtime.ApiResponse<BrandDTO>> {
        if (requestParameters.brandId === null || requestParameters.brandId === undefined) {
            throw new runtime.RequiredError('brandId','Required parameter requestParameters.brandId was null or undefined when calling updateBrandAsset.');
        }

        if (requestParameters.assetIndex === null || requestParameters.assetIndex === undefined) {
            throw new runtime.RequiredError('assetIndex','Required parameter requestParameters.assetIndex was null or undefined when calling updateBrandAsset.');
        }

        if (requestParameters.assetDTO === null || requestParameters.assetDTO === undefined) {
            throw new runtime.RequiredError('assetDTO','Required parameter requestParameters.assetDTO was null or undefined when calling updateBrandAsset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/brands/{brandId}/assets/{assetIndex}`.replace(`{${"brandId"}}`, encodeURIComponent(String(requestParameters.brandId))).replace(`{${"assetIndex"}}`, encodeURIComponent(String(requestParameters.assetIndex))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssetDTOToJSON(requestParameters.assetDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandDTOFromJSON(jsonValue));
    }

    /**
     * Updates an asset per brand id and asset index.
     */
    async updateBrandAsset(requestParameters: UpdateBrandAssetRequest): Promise<BrandDTO> {
        const response = await this.updateBrandAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a brand by id.
     */
    async updateBrandByIdRaw(requestParameters: UpdateBrandByIdRequest): Promise<runtime.ApiResponse<BrandDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBrandById.');
        }

        if (requestParameters.brandDraftDTO === null || requestParameters.brandDraftDTO === undefined) {
            throw new runtime.RequiredError('brandDraftDTO','Required parameter requestParameters.brandDraftDTO was null or undefined when calling updateBrandById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/brands/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BrandDraftDTOToJSON(requestParameters.brandDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BrandDTOFromJSON(jsonValue));
    }

    /**
     * Updates a brand by id.
     */
    async updateBrandById(requestParameters: UpdateBrandByIdRequest): Promise<BrandDTO> {
        const response = await this.updateBrandByIdRaw(requestParameters);
        return await response.value();
    }

}
