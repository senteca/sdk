/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomerGroupDTO,
    CustomerGroupDTOFromJSON,
    CustomerGroupDTOToJSON,
} from '../models';

export interface CreateCustomerGroupRequest {
    customerGroupDTO: CustomerGroupDTO;
}

export interface DeleteCustomerGroupByIdRequest {
    id: string;
}

export interface FilterCustomerGroupsRequest {
    filter?: Array<string>;
    sort?: Array<string>;
    expand?: Array<string>;
    project?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface FindCustomerGroupByIdRequest {
    id: string;
}

export interface UpdateCustomerGroupByIdRequest {
    id: string;
    customerGroupDTO: CustomerGroupDTO;
}

/**
 * 
 */
export class CustomerGroupsApi extends runtime.BaseAPI {

    /**
     * Creates a new customer group.
     */
    async createCustomerGroupRaw(requestParameters: CreateCustomerGroupRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.customerGroupDTO === null || requestParameters.customerGroupDTO === undefined) {
            throw new runtime.RequiredError('customerGroupDTO','Required parameter requestParameters.customerGroupDTO was null or undefined when calling createCustomerGroup.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customer-groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerGroupDTOToJSON(requestParameters.customerGroupDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates a new customer group.
     */
    async createCustomerGroup(requestParameters: CreateCustomerGroupRequest): Promise<object> {
        const response = await this.createCustomerGroupRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a customer group by id.
     */
    async deleteCustomerGroupByIdRaw(requestParameters: DeleteCustomerGroupByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCustomerGroupById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customer-groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a customer group by id.
     */
    async deleteCustomerGroupById(requestParameters: DeleteCustomerGroupByIdRequest): Promise<object> {
        const response = await this.deleteCustomerGroupByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all customer groups.
     */
    async filterCustomerGroupsRaw(requestParameters: FilterCustomerGroupsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customer-groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all customer groups.
     */
    async filterCustomerGroups(requestParameters: FilterCustomerGroupsRequest): Promise<void> {
        await this.filterCustomerGroupsRaw(requestParameters);
    }

    /**
     * Returns a customer group by id.
     */
    async findCustomerGroupByIdRaw(requestParameters: FindCustomerGroupByIdRequest): Promise<runtime.ApiResponse<CustomerGroupDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findCustomerGroupById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/customer-groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerGroupDTOFromJSON(jsonValue));
    }

    /**
     * Returns a customer group by id.
     */
    async findCustomerGroupById(requestParameters: FindCustomerGroupByIdRequest): Promise<CustomerGroupDTO> {
        const response = await this.findCustomerGroupByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a customer group by id.
     */
    async updateCustomerGroupByIdRaw(requestParameters: UpdateCustomerGroupByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCustomerGroupById.');
        }

        if (requestParameters.customerGroupDTO === null || requestParameters.customerGroupDTO === undefined) {
            throw new runtime.RequiredError('customerGroupDTO','Required parameter requestParameters.customerGroupDTO was null or undefined when calling updateCustomerGroupById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/customer-groups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerGroupDTOToJSON(requestParameters.customerGroupDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates a customer group by id.
     */
    async updateCustomerGroupById(requestParameters: UpdateCustomerGroupByIdRequest): Promise<object> {
        const response = await this.updateCustomerGroupByIdRaw(requestParameters);
        return await response.value();
    }

}
