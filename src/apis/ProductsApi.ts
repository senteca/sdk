/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AssetDTO,
    AssetDTOFromJSON,
    AssetDTOToJSON,
    BulkDeleteDTO,
    BulkDeleteDTOFromJSON,
    BulkDeleteDTOToJSON,
    BulkLinkUpdateDTO,
    BulkLinkUpdateDTOFromJSON,
    BulkLinkUpdateDTOToJSON,
    BulkStatusChangeDTO,
    BulkStatusChangeDTOFromJSON,
    BulkStatusChangeDTOToJSON,
    InventoryUpdateDTO,
    InventoryUpdateDTOFromJSON,
    InventoryUpdateDTOToJSON,
    OfferDraftDTO,
    OfferDraftDTOFromJSON,
    OfferDraftDTOToJSON,
    OfferUpdateDTO,
    OfferUpdateDTOFromJSON,
    OfferUpdateDTOToJSON,
    ProductDTO,
    ProductDTOFromJSON,
    ProductDTOToJSON,
    ProductDraftDTO,
    ProductDraftDTOFromJSON,
    ProductDraftDTOToJSON,
    ProductStatusUpdateDTO,
    ProductStatusUpdateDTOFromJSON,
    ProductStatusUpdateDTOToJSON,
    ProductWeightUpdateDTO,
    ProductWeightUpdateDTOFromJSON,
    ProductWeightUpdateDTOToJSON,
} from '../models';

export interface AddProductAssetRequest {
    productId: string;
    assetDTO: AssetDTO;
}

export interface AddProductOfferRequest {
    productId: string;
    variantId: string;
    offerDraftDTO: OfferDraftDTO;
}

export interface AddProductQuantityRequest {
    productId: string;
    variantId: string;
    inventoryUpdateDTO: InventoryUpdateDTO;
}

export interface ChangeProductImageIndexRequest {
    productId: string;
    variantId: string;
    imageIndex: number;
    destinationIndex: number;
}

export interface ChangeProductQuantityRequest {
    productId: string;
    variantId: string;
    inventoryUpdateDTO: InventoryUpdateDTO;
}

export interface ChangeProductsStatusRequest {
    bulkStatusChangeDTO: BulkStatusChangeDTO;
}

export interface CreateProductRequest {
    productDraftDTO: ProductDraftDTO;
}

export interface DeleteProductByIdRequest {
    id: string;
}

export interface DeleteProductsRequest {
    bulkDeleteDTO: BulkDeleteDTO;
}

export interface FilterProductsRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface FindProductByExternalIdRequest {
    externalId: string;
    expand: Array<string>;
    statuses?: Array<string>;
}

export interface FindProductByIdRequest {
    id: string;
    expand: Array<string>;
    statuses?: Array<string>;
}

export interface FindProductBySlugRequest {
    language: string;
    slug: string;
    expand: Array<string>;
    statuses?: Array<string>;
}

export interface GetAllProductSlugsRequest {
    languageCode: string;
}

export interface ImportProductsRequest {
    productDraftDTO: Array<ProductDraftDTO>;
}

export interface LinkProductsRequest {
    bulkLinkUpdateDTO: BulkLinkUpdateDTO;
}

export interface RemoveProductAssetRequest {
    productId: string;
    assetIndex: number;
}

export interface RemoveProductImageRequest {
    productId: string;
    variantId: string;
    imageIndex: number;
}

export interface RemoveProductImagesRequest {
    productId: string;
}

export interface RemoveProductOfferRequest {
    productId: string;
    variantId: string;
    priceListKey: string;
    merchantKey: string;
}

export interface RemoveProductQuantityRequest {
    productId: string;
    variantId: string;
    inventoryUpdateDTO: InventoryUpdateDTO;
}

export interface SearchProductsRequest {
    expand: string;
    language: string;
    term: string;
    limit?: number;
    offset?: number;
}

export interface SetProductStatusRequest {
    productId: string;
    productStatusUpdateDTO: ProductStatusUpdateDTO;
}

export interface SetProductWeightRequest {
    productId: string;
    productWeightUpdateDTO: ProductWeightUpdateDTO;
}

export interface UnlinkProductsRequest {
    bulkLinkUpdateDTO: BulkLinkUpdateDTO;
}

export interface UpdateProductAssetRequest {
    productId: string;
    assetIndex: number;
    assetDTO: AssetDTO;
}

export interface UpdateProductByIdRequest {
    id: string;
    productDraftDTO: ProductDraftDTO;
}

export interface UpdateProductOfferRequest {
    productId: string;
    variantId: string;
    offerUpdateDTO: OfferUpdateDTO;
}

export interface UploadProductImageRequest {
    productId: string;
    variantId: string;
}

export interface UploadProductImageByIdRequest {
    productId: string;
    variantId: string;
    imageId: string;
}

/**
 * 
 */
export class ProductsApi extends runtime.BaseAPI {

    /**
     * Creates a new asset per product id.
     */
    async addProductAssetRaw(requestParameters: AddProductAssetRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling addProductAsset.');
        }

        if (requestParameters.assetDTO === null || requestParameters.assetDTO === undefined) {
            throw new runtime.RequiredError('assetDTO','Required parameter requestParameters.assetDTO was null or undefined when calling addProductAsset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/{productId}/assets`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetDTOToJSON(requestParameters.assetDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new asset per product id.
     */
    async addProductAsset(requestParameters: AddProductAssetRequest): Promise<ProductDTO> {
        const response = await this.addProductAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new offer per product variant.
     */
    async addProductOfferRaw(requestParameters: AddProductOfferRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling addProductOffer.');
        }

        if (requestParameters.variantId === null || requestParameters.variantId === undefined) {
            throw new runtime.RequiredError('variantId','Required parameter requestParameters.variantId was null or undefined when calling addProductOffer.');
        }

        if (requestParameters.offerDraftDTO === null || requestParameters.offerDraftDTO === undefined) {
            throw new runtime.RequiredError('offerDraftDTO','Required parameter requestParameters.offerDraftDTO was null or undefined when calling addProductOffer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/{productId}/{variantId}/offers`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"variantId"}}`, encodeURIComponent(String(requestParameters.variantId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OfferDraftDTOToJSON(requestParameters.offerDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new offer per product variant.
     */
    async addProductOffer(requestParameters: AddProductOfferRequest): Promise<ProductDTO> {
        const response = await this.addProductOfferRaw(requestParameters);
        return await response.value();
    }

    /**
     * Increases inventory quantity per product variant.
     */
    async addProductQuantityRaw(requestParameters: AddProductQuantityRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling addProductQuantity.');
        }

        if (requestParameters.variantId === null || requestParameters.variantId === undefined) {
            throw new runtime.RequiredError('variantId','Required parameter requestParameters.variantId was null or undefined when calling addProductQuantity.');
        }

        if (requestParameters.inventoryUpdateDTO === null || requestParameters.inventoryUpdateDTO === undefined) {
            throw new runtime.RequiredError('inventoryUpdateDTO','Required parameter requestParameters.inventoryUpdateDTO was null or undefined when calling addProductQuantity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/{productId}/{variantId}/inventory/add-quantity`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"variantId"}}`, encodeURIComponent(String(requestParameters.variantId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InventoryUpdateDTOToJSON(requestParameters.inventoryUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Increases inventory quantity per product variant.
     */
    async addProductQuantity(requestParameters: AddProductQuantityRequest): Promise<ProductDTO> {
        const response = await this.addProductQuantityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an image per product variant and image index.
     */
    async changeProductImageIndexRaw(requestParameters: ChangeProductImageIndexRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling changeProductImageIndex.');
        }

        if (requestParameters.variantId === null || requestParameters.variantId === undefined) {
            throw new runtime.RequiredError('variantId','Required parameter requestParameters.variantId was null or undefined when calling changeProductImageIndex.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling changeProductImageIndex.');
        }

        if (requestParameters.destinationIndex === null || requestParameters.destinationIndex === undefined) {
            throw new runtime.RequiredError('destinationIndex','Required parameter requestParameters.destinationIndex was null or undefined when calling changeProductImageIndex.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products/{productId}/{variantId}/images/{imageIndex}/{destinationIndex}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"variantId"}}`, encodeURIComponent(String(requestParameters.variantId))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))).replace(`{${"destinationIndex"}}`, encodeURIComponent(String(requestParameters.destinationIndex))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Updates an image per product variant and image index.
     */
    async changeProductImageIndex(requestParameters: ChangeProductImageIndexRequest): Promise<ProductDTO> {
        const response = await this.changeProductImageIndexRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates inventory quantity per product variant.
     */
    async changeProductQuantityRaw(requestParameters: ChangeProductQuantityRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling changeProductQuantity.');
        }

        if (requestParameters.variantId === null || requestParameters.variantId === undefined) {
            throw new runtime.RequiredError('variantId','Required parameter requestParameters.variantId was null or undefined when calling changeProductQuantity.');
        }

        if (requestParameters.inventoryUpdateDTO === null || requestParameters.inventoryUpdateDTO === undefined) {
            throw new runtime.RequiredError('inventoryUpdateDTO','Required parameter requestParameters.inventoryUpdateDTO was null or undefined when calling changeProductQuantity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/{productId}/{variantId}/inventory/change-quantity`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"variantId"}}`, encodeURIComponent(String(requestParameters.variantId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InventoryUpdateDTOToJSON(requestParameters.inventoryUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Updates inventory quantity per product variant.
     */
    async changeProductQuantity(requestParameters: ChangeProductQuantityRequest): Promise<ProductDTO> {
        const response = await this.changeProductQuantityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Changes status of multiple products by id.
     */
    async changeProductsStatusRaw(requestParameters: ChangeProductsStatusRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.bulkStatusChangeDTO === null || requestParameters.bulkStatusChangeDTO === undefined) {
            throw new runtime.RequiredError('bulkStatusChangeDTO','Required parameter requestParameters.bulkStatusChangeDTO was null or undefined when calling changeProductsStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/bulk/status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkStatusChangeDTOToJSON(requestParameters.bulkStatusChangeDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Changes status of multiple products by id.
     */
    async changeProductsStatus(requestParameters: ChangeProductsStatusRequest): Promise<object> {
        const response = await this.changeProductsStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new product.
     */
    async createProductRaw(requestParameters: CreateProductRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.productDraftDTO === null || requestParameters.productDraftDTO === undefined) {
            throw new runtime.RequiredError('productDraftDTO','Required parameter requestParameters.productDraftDTO was null or undefined when calling createProduct.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductDraftDTOToJSON(requestParameters.productDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new product.
     */
    async createProduct(requestParameters: CreateProductRequest): Promise<ProductDTO> {
        const response = await this.createProductRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a product by id.
     */
    async deleteProductByIdRaw(requestParameters: DeleteProductByIdRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProductById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a product by id.
     */
    async deleteProductById(requestParameters: DeleteProductByIdRequest): Promise<ProductDTO> {
        const response = await this.deleteProductByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes multiple products by id.
     */
    async deleteProductsRaw(requestParameters: DeleteProductsRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.bulkDeleteDTO === null || requestParameters.bulkDeleteDTO === undefined) {
            throw new runtime.RequiredError('bulkDeleteDTO','Required parameter requestParameters.bulkDeleteDTO was null or undefined when calling deleteProducts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/bulk/delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkDeleteDTOToJSON(requestParameters.bulkDeleteDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes multiple products by id.
     */
    async deleteProducts(requestParameters: DeleteProductsRequest): Promise<object> {
        const response = await this.deleteProductsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all products per page.
     */
    async filterProductsRaw(requestParameters: FilterProductsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterProducts.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterProducts.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterProducts.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling filterProducts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all products per page.
     */
    async filterProducts(requestParameters: FilterProductsRequest): Promise<void> {
        await this.filterProductsRaw(requestParameters);
    }

    /**
     * Returns a product by external id.
     */
    async findProductByExternalIdRaw(requestParameters: FindProductByExternalIdRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.externalId === null || requestParameters.externalId === undefined) {
            throw new runtime.RequiredError('externalId','Required parameter requestParameters.externalId was null or undefined when calling findProductByExternalId.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling findProductByExternalId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products/external/{externalId}`.replace(`{${"externalId"}}`, encodeURIComponent(String(requestParameters.externalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Returns a product by external id.
     */
    async findProductByExternalId(requestParameters: FindProductByExternalIdRequest): Promise<ProductDTO> {
        const response = await this.findProductByExternalIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a product by id.
     */
    async findProductByIdRaw(requestParameters: FindProductByIdRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findProductById.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling findProductById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Returns a product by id.
     */
    async findProductById(requestParameters: FindProductByIdRequest): Promise<ProductDTO> {
        const response = await this.findProductByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a product by slug and language code.
     */
    async findProductBySlugRaw(requestParameters: FindProductBySlugRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling findProductBySlug.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling findProductBySlug.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling findProductBySlug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.statuses) {
            queryParameters['statuses'] = requestParameters.statuses;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products/slug/{language}/{slug}`.replace(`{${"language"}}`, encodeURIComponent(String(requestParameters.language))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Returns a product by slug and language code.
     */
    async findProductBySlug(requestParameters: FindProductBySlugRequest): Promise<ProductDTO> {
        const response = await this.findProductBySlugRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all product slugs per language code.
     */
    async getAllProductSlugsRaw(requestParameters: GetAllProductSlugsRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.languageCode === null || requestParameters.languageCode === undefined) {
            throw new runtime.RequiredError('languageCode','Required parameter requestParameters.languageCode was null or undefined when calling getAllProductSlugs.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products/slugs/{languageCode}`.replace(`{${"languageCode"}}`, encodeURIComponent(String(requestParameters.languageCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Lists all product slugs per language code.
     */
    async getAllProductSlugs(requestParameters: GetAllProductSlugsRequest): Promise<Array<string>> {
        const response = await this.getAllProductSlugsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Imports multiple products.
     */
    async importProductsRaw(requestParameters: ImportProductsRequest): Promise<runtime.ApiResponse<Array<ProductDraftDTO>>> {
        if (requestParameters.productDraftDTO === null || requestParameters.productDraftDTO === undefined) {
            throw new runtime.RequiredError('productDraftDTO','Required parameter requestParameters.productDraftDTO was null or undefined when calling importProducts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.productDraftDTO.map(ProductDraftDTOToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductDraftDTOFromJSON));
    }

    /**
     * Imports multiple products.
     */
    async importProducts(requestParameters: ImportProductsRequest): Promise<Array<ProductDraftDTO>> {
        const response = await this.importProductsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Links multiple products to other records such as categories, brands and collections.
     */
    async linkProductsRaw(requestParameters: LinkProductsRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.bulkLinkUpdateDTO === null || requestParameters.bulkLinkUpdateDTO === undefined) {
            throw new runtime.RequiredError('bulkLinkUpdateDTO','Required parameter requestParameters.bulkLinkUpdateDTO was null or undefined when calling linkProducts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/bulk/link`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkLinkUpdateDTOToJSON(requestParameters.bulkLinkUpdateDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Links multiple products to other records such as categories, brands and collections.
     */
    async linkProducts(requestParameters: LinkProductsRequest): Promise<object> {
        const response = await this.linkProductsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an asset per product id and asset index.
     */
    async removeProductAssetRaw(requestParameters: RemoveProductAssetRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling removeProductAsset.');
        }

        if (requestParameters.assetIndex === null || requestParameters.assetIndex === undefined) {
            throw new runtime.RequiredError('assetIndex','Required parameter requestParameters.assetIndex was null or undefined when calling removeProductAsset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products/{productId}/assets/{assetIndex}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"assetIndex"}}`, encodeURIComponent(String(requestParameters.assetIndex))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Deletes an asset per product id and asset index.
     */
    async removeProductAsset(requestParameters: RemoveProductAssetRequest): Promise<ProductDTO> {
        const response = await this.removeProductAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an image per product variant and image index.
     */
    async removeProductImageRaw(requestParameters: RemoveProductImageRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling removeProductImage.');
        }

        if (requestParameters.variantId === null || requestParameters.variantId === undefined) {
            throw new runtime.RequiredError('variantId','Required parameter requestParameters.variantId was null or undefined when calling removeProductImage.');
        }

        if (requestParameters.imageIndex === null || requestParameters.imageIndex === undefined) {
            throw new runtime.RequiredError('imageIndex','Required parameter requestParameters.imageIndex was null or undefined when calling removeProductImage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products/{productId}/{variantId}/images/{imageIndex}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"variantId"}}`, encodeURIComponent(String(requestParameters.variantId))).replace(`{${"imageIndex"}}`, encodeURIComponent(String(requestParameters.imageIndex))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes an image per product variant and image index.
     */
    async removeProductImage(requestParameters: RemoveProductImageRequest): Promise<object> {
        const response = await this.removeProductImageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes all product images per product id.
     */
    async removeProductImagesRaw(requestParameters: RemoveProductImagesRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling removeProductImages.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products/{productId}/images`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes all product images per product id.
     */
    async removeProductImages(requestParameters: RemoveProductImagesRequest): Promise<object> {
        const response = await this.removeProductImagesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an offer per product variant, price list and merchant key.
     */
    async removeProductOfferRaw(requestParameters: RemoveProductOfferRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling removeProductOffer.');
        }

        if (requestParameters.variantId === null || requestParameters.variantId === undefined) {
            throw new runtime.RequiredError('variantId','Required parameter requestParameters.variantId was null or undefined when calling removeProductOffer.');
        }

        if (requestParameters.priceListKey === null || requestParameters.priceListKey === undefined) {
            throw new runtime.RequiredError('priceListKey','Required parameter requestParameters.priceListKey was null or undefined when calling removeProductOffer.');
        }

        if (requestParameters.merchantKey === null || requestParameters.merchantKey === undefined) {
            throw new runtime.RequiredError('merchantKey','Required parameter requestParameters.merchantKey was null or undefined when calling removeProductOffer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products/{productId}/{variantId}/offers/{priceListKey}/{merchantKey}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"variantId"}}`, encodeURIComponent(String(requestParameters.variantId))).replace(`{${"priceListKey"}}`, encodeURIComponent(String(requestParameters.priceListKey))).replace(`{${"merchantKey"}}`, encodeURIComponent(String(requestParameters.merchantKey))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Deletes an offer per product variant, price list and merchant key.
     */
    async removeProductOffer(requestParameters: RemoveProductOfferRequest): Promise<ProductDTO> {
        const response = await this.removeProductOfferRaw(requestParameters);
        return await response.value();
    }

    /**
     * Decreases inventory quantity per product variant.
     */
    async removeProductQuantityRaw(requestParameters: RemoveProductQuantityRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling removeProductQuantity.');
        }

        if (requestParameters.variantId === null || requestParameters.variantId === undefined) {
            throw new runtime.RequiredError('variantId','Required parameter requestParameters.variantId was null or undefined when calling removeProductQuantity.');
        }

        if (requestParameters.inventoryUpdateDTO === null || requestParameters.inventoryUpdateDTO === undefined) {
            throw new runtime.RequiredError('inventoryUpdateDTO','Required parameter requestParameters.inventoryUpdateDTO was null or undefined when calling removeProductQuantity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/{productId}/{variantId}/inventory/remove-quantity`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"variantId"}}`, encodeURIComponent(String(requestParameters.variantId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InventoryUpdateDTOToJSON(requestParameters.inventoryUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Decreases inventory quantity per product variant.
     */
    async removeProductQuantity(requestParameters: RemoveProductQuantityRequest): Promise<ProductDTO> {
        const response = await this.removeProductQuantityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Performs a full text search in all products.
     */
    async searchProductsRaw(requestParameters: SearchProductsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling searchProducts.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling searchProducts.');
        }

        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling searchProducts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.term !== undefined) {
            queryParameters['term'] = requestParameters.term;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Performs a full text search in all products.
     */
    async searchProducts(requestParameters: SearchProductsRequest): Promise<void> {
        await this.searchProductsRaw(requestParameters);
    }

    /**
     * Updates product status by id.
     */
    async setProductStatusRaw(requestParameters: SetProductStatusRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling setProductStatus.');
        }

        if (requestParameters.productStatusUpdateDTO === null || requestParameters.productStatusUpdateDTO === undefined) {
            throw new runtime.RequiredError('productStatusUpdateDTO','Required parameter requestParameters.productStatusUpdateDTO was null or undefined when calling setProductStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/{productId}/status`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProductStatusUpdateDTOToJSON(requestParameters.productStatusUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Updates product status by id.
     */
    async setProductStatus(requestParameters: SetProductStatusRequest): Promise<ProductDTO> {
        const response = await this.setProductStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates product weight by id.
     */
    async setProductWeightRaw(requestParameters: SetProductWeightRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling setProductWeight.');
        }

        if (requestParameters.productWeightUpdateDTO === null || requestParameters.productWeightUpdateDTO === undefined) {
            throw new runtime.RequiredError('productWeightUpdateDTO','Required parameter requestParameters.productWeightUpdateDTO was null or undefined when calling setProductWeight.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/{productId}/weight`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProductWeightUpdateDTOToJSON(requestParameters.productWeightUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Updates product weight by id.
     */
    async setProductWeight(requestParameters: SetProductWeightRequest): Promise<ProductDTO> {
        const response = await this.setProductWeightRaw(requestParameters);
        return await response.value();
    }

    /**
     * Unlinks multiple products from other records such as categories, brands and collections.
     */
    async unlinkProductsRaw(requestParameters: UnlinkProductsRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.bulkLinkUpdateDTO === null || requestParameters.bulkLinkUpdateDTO === undefined) {
            throw new runtime.RequiredError('bulkLinkUpdateDTO','Required parameter requestParameters.bulkLinkUpdateDTO was null or undefined when calling unlinkProducts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/bulk/unlink`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkLinkUpdateDTOToJSON(requestParameters.bulkLinkUpdateDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Unlinks multiple products from other records such as categories, brands and collections.
     */
    async unlinkProducts(requestParameters: UnlinkProductsRequest): Promise<object> {
        const response = await this.unlinkProductsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an asset per product id and asset index.
     */
    async updateProductAssetRaw(requestParameters: UpdateProductAssetRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling updateProductAsset.');
        }

        if (requestParameters.assetIndex === null || requestParameters.assetIndex === undefined) {
            throw new runtime.RequiredError('assetIndex','Required parameter requestParameters.assetIndex was null or undefined when calling updateProductAsset.');
        }

        if (requestParameters.assetDTO === null || requestParameters.assetDTO === undefined) {
            throw new runtime.RequiredError('assetDTO','Required parameter requestParameters.assetDTO was null or undefined when calling updateProductAsset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/{productId}/assets/{assetIndex}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"assetIndex"}}`, encodeURIComponent(String(requestParameters.assetIndex))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssetDTOToJSON(requestParameters.assetDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Updates an asset per product id and asset index.
     */
    async updateProductAsset(requestParameters: UpdateProductAssetRequest): Promise<ProductDTO> {
        const response = await this.updateProductAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a product by id.
     */
    async updateProductByIdRaw(requestParameters: UpdateProductByIdRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProductById.');
        }

        if (requestParameters.productDraftDTO === null || requestParameters.productDraftDTO === undefined) {
            throw new runtime.RequiredError('productDraftDTO','Required parameter requestParameters.productDraftDTO was null or undefined when calling updateProductById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductDraftDTOToJSON(requestParameters.productDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Updates a product by id.
     */
    async updateProductById(requestParameters: UpdateProductByIdRequest): Promise<ProductDTO> {
        const response = await this.updateProductByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an offer per product variant.
     */
    async updateProductOfferRaw(requestParameters: UpdateProductOfferRequest): Promise<runtime.ApiResponse<ProductDTO>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling updateProductOffer.');
        }

        if (requestParameters.variantId === null || requestParameters.variantId === undefined) {
            throw new runtime.RequiredError('variantId','Required parameter requestParameters.variantId was null or undefined when calling updateProductOffer.');
        }

        if (requestParameters.offerUpdateDTO === null || requestParameters.offerUpdateDTO === undefined) {
            throw new runtime.RequiredError('offerUpdateDTO','Required parameter requestParameters.offerUpdateDTO was null or undefined when calling updateProductOffer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/products/{productId}/{variantId}/offers`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"variantId"}}`, encodeURIComponent(String(requestParameters.variantId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OfferUpdateDTOToJSON(requestParameters.offerUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDTOFromJSON(jsonValue));
    }

    /**
     * Updates an offer per product variant.
     */
    async updateProductOffer(requestParameters: UpdateProductOfferRequest): Promise<ProductDTO> {
        const response = await this.updateProductOfferRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates an image per product variant.
     */
    async uploadProductImageRaw(requestParameters: UploadProductImageRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling uploadProductImage.');
        }

        if (requestParameters.variantId === null || requestParameters.variantId === undefined) {
            throw new runtime.RequiredError('variantId','Required parameter requestParameters.variantId was null or undefined when calling uploadProductImage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products/{productId}/{variantId}/images`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"variantId"}}`, encodeURIComponent(String(requestParameters.variantId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates an image per product variant.
     */
    async uploadProductImage(requestParameters: UploadProductImageRequest): Promise<void> {
        await this.uploadProductImageRaw(requestParameters);
    }

    /**
     * Creates an image per product variant and image id.
     */
    async uploadProductImageByIdRaw(requestParameters: UploadProductImageByIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.productId === null || requestParameters.productId === undefined) {
            throw new runtime.RequiredError('productId','Required parameter requestParameters.productId was null or undefined when calling uploadProductImageById.');
        }

        if (requestParameters.variantId === null || requestParameters.variantId === undefined) {
            throw new runtime.RequiredError('variantId','Required parameter requestParameters.variantId was null or undefined when calling uploadProductImageById.');
        }

        if (requestParameters.imageId === null || requestParameters.imageId === undefined) {
            throw new runtime.RequiredError('imageId','Required parameter requestParameters.imageId was null or undefined when calling uploadProductImageById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/products/{productId}/{variantId}/images/{imageId}`.replace(`{${"productId"}}`, encodeURIComponent(String(requestParameters.productId))).replace(`{${"variantId"}}`, encodeURIComponent(String(requestParameters.variantId))).replace(`{${"imageId"}}`, encodeURIComponent(String(requestParameters.imageId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates an image per product variant and image id.
     */
    async uploadProductImageById(requestParameters: UploadProductImageByIdRequest): Promise<void> {
        await this.uploadProductImageByIdRaw(requestParameters);
    }

}
