/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomFieldDTO,
    CustomFieldDTOFromJSON,
    CustomFieldDTOToJSON,
    CustomFieldDraftDTO,
    CustomFieldDraftDTOFromJSON,
    CustomFieldDraftDTOToJSON,
    SetCustomFieldDTO,
    SetCustomFieldDTOFromJSON,
    SetCustomFieldDTOToJSON,
} from '../models';

export interface CreateCustomFieldRequest {
    customFieldDTO: CustomFieldDTO;
}

export interface DeleteCustomFieldByIdRequest {
    id: string;
}

export interface FilterCustomFieldsRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface FindCustomFieldByIdRequest {
    id: string;
}

export interface SetMyCustomFieldRequest {
    setCustomFieldDTO: SetCustomFieldDTO;
}

export interface UpdateCustomFieldByIdRequest {
    id: string;
    customFieldDraftDTO: CustomFieldDraftDTO;
}

/**
 * 
 */
export class CustomFieldsApi extends runtime.BaseAPI {

    /**
     * Creates a new custom field.
     */
    async createCustomFieldRaw(requestParameters: CreateCustomFieldRequest): Promise<runtime.ApiResponse<CustomFieldDTO>> {
        if (requestParameters.customFieldDTO === null || requestParameters.customFieldDTO === undefined) {
            throw new runtime.RequiredError('customFieldDTO','Required parameter requestParameters.customFieldDTO was null or undefined when calling createCustomField.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/custom-fields`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomFieldDTOToJSON(requestParameters.customFieldDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomFieldDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new custom field.
     */
    async createCustomField(requestParameters: CreateCustomFieldRequest): Promise<CustomFieldDTO> {
        const response = await this.createCustomFieldRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a custom field by id.
     */
    async deleteCustomFieldByIdRaw(requestParameters: DeleteCustomFieldByIdRequest): Promise<runtime.ApiResponse<CustomFieldDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCustomFieldById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/custom-fields/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomFieldDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a custom field by id.
     */
    async deleteCustomFieldById(requestParameters: DeleteCustomFieldByIdRequest): Promise<CustomFieldDTO> {
        const response = await this.deleteCustomFieldByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all custom fields.
     */
    async filterCustomFieldsRaw(requestParameters: FilterCustomFieldsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterCustomFields.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterCustomFields.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterCustomFields.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling filterCustomFields.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/custom-fields`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all custom fields.
     */
    async filterCustomFields(requestParameters: FilterCustomFieldsRequest): Promise<void> {
        await this.filterCustomFieldsRaw(requestParameters);
    }

    /**
     * Returns a custom field by id.
     */
    async findCustomFieldByIdRaw(requestParameters: FindCustomFieldByIdRequest): Promise<runtime.ApiResponse<CustomFieldDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findCustomFieldById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/custom-fields/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomFieldDTOFromJSON(jsonValue));
    }

    /**
     * Returns a custom field by id.
     */
    async findCustomFieldById(requestParameters: FindCustomFieldByIdRequest): Promise<CustomFieldDTO> {
        const response = await this.findCustomFieldByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a custom field value for a particular record id and resource type.
     */
    async setCustomFieldRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/custom-fields/set`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates a custom field value for a particular record id and resource type.
     */
    async setCustomField(): Promise<object> {
        const response = await this.setCustomFieldRaw();
        return await response.value();
    }

    /**
     * Updates a custom field value for the current customer.
     */
    async setMyCustomFieldRaw(requestParameters: SetMyCustomFieldRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.setCustomFieldDTO === null || requestParameters.setCustomFieldDTO === undefined) {
            throw new runtime.RequiredError('setCustomFieldDTO','Required parameter requestParameters.setCustomFieldDTO was null or undefined when calling setMyCustomField.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/custom-fields/set-my`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SetCustomFieldDTOToJSON(requestParameters.setCustomFieldDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates a custom field value for the current customer.
     */
    async setMyCustomField(requestParameters: SetMyCustomFieldRequest): Promise<object> {
        const response = await this.setMyCustomFieldRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a custom field by id.
     */
    async updateCustomFieldByIdRaw(requestParameters: UpdateCustomFieldByIdRequest): Promise<runtime.ApiResponse<CustomFieldDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCustomFieldById.');
        }

        if (requestParameters.customFieldDraftDTO === null || requestParameters.customFieldDraftDTO === undefined) {
            throw new runtime.RequiredError('customFieldDraftDTO','Required parameter requestParameters.customFieldDraftDTO was null or undefined when calling updateCustomFieldById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/custom-fields/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomFieldDraftDTOToJSON(requestParameters.customFieldDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomFieldDTOFromJSON(jsonValue));
    }

    /**
     * Updates a custom field by id.
     */
    async updateCustomFieldById(requestParameters: UpdateCustomFieldByIdRequest): Promise<CustomFieldDTO> {
        const response = await this.updateCustomFieldByIdRaw(requestParameters);
        return await response.value();
    }

}
