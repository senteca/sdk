/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DiscountCodeDTO,
    DiscountCodeDTOFromJSON,
    DiscountCodeDTOToJSON,
    DiscountCodeDraftDTO,
    DiscountCodeDraftDTOFromJSON,
    DiscountCodeDraftDTOToJSON,
} from '../models';

export interface CreateDiscountCodeRequest {
    discountCodeDraftDTO: DiscountCodeDraftDTO;
}

export interface DeleteDiscountCodeByIdRequest {
    id: string;
}

export interface FilterDiscountCodesRequest {
    filter?: Array<string>;
    sort?: Array<string>;
    expand?: Array<string>;
    project?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface FindDiscountCodeByIdRequest {
    id: string;
}

export interface ImportDiscountCodesRequest {
    requestBody: Array<string>;
}

export interface SearchDiscountCodesRequest {
    filter?: Array<string>;
    sort?: Array<string>;
    expand?: Array<string>;
    project?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface UpdateDiscountCodeByIdRequest {
    id: string;
    discountCodeDraftDTO: DiscountCodeDraftDTO;
}

/**
 * 
 */
export class DiscountCodesApi extends runtime.BaseAPI {

    /**
     * Creates a new discount code.
     */
    async createDiscountCodeRaw(requestParameters: CreateDiscountCodeRequest): Promise<runtime.ApiResponse<DiscountCodeDTO>> {
        if (requestParameters.discountCodeDraftDTO === null || requestParameters.discountCodeDraftDTO === undefined) {
            throw new runtime.RequiredError('discountCodeDraftDTO','Required parameter requestParameters.discountCodeDraftDTO was null or undefined when calling createDiscountCode.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/discount-codes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DiscountCodeDraftDTOToJSON(requestParameters.discountCodeDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountCodeDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new discount code.
     */
    async createDiscountCode(requestParameters: CreateDiscountCodeRequest): Promise<DiscountCodeDTO> {
        const response = await this.createDiscountCodeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a discount code by id.
     */
    async deleteDiscountCodeByIdRaw(requestParameters: DeleteDiscountCodeByIdRequest): Promise<runtime.ApiResponse<DiscountCodeDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDiscountCodeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/discount-codes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountCodeDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a discount code by id.
     */
    async deleteDiscountCodeById(requestParameters: DeleteDiscountCodeByIdRequest): Promise<DiscountCodeDTO> {
        const response = await this.deleteDiscountCodeByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all discount codes.
     */
    async filterDiscountCodesRaw(requestParameters: FilterDiscountCodesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/discount-codes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all discount codes.
     */
    async filterDiscountCodes(requestParameters: FilterDiscountCodesRequest): Promise<void> {
        await this.filterDiscountCodesRaw(requestParameters);
    }

    /**
     * Returns a discount code by id.
     */
    async findDiscountCodeByIdRaw(requestParameters: FindDiscountCodeByIdRequest): Promise<runtime.ApiResponse<DiscountCodeDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findDiscountCodeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/discount-codes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountCodeDTOFromJSON(jsonValue));
    }

    /**
     * Returns a discount code by id.
     */
    async findDiscountCodeById(requestParameters: FindDiscountCodeByIdRequest): Promise<DiscountCodeDTO> {
        const response = await this.findDiscountCodeByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Imports discount codes
     */
    async importDiscountCodesRaw(requestParameters: ImportDiscountCodesRequest): Promise<runtime.ApiResponse<Array<DiscountCodeDTO>>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling importDiscountCodes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/discount-codes/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DiscountCodeDTOFromJSON));
    }

    /**
     * Imports discount codes
     */
    async importDiscountCodes(requestParameters: ImportDiscountCodesRequest): Promise<Array<DiscountCodeDTO>> {
        const response = await this.importDiscountCodesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Searches discount codes by name.
     */
    async searchDiscountCodesRaw(requestParameters: SearchDiscountCodesRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/discount-codes/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Searches discount codes by name.
     */
    async searchDiscountCodes(requestParameters: SearchDiscountCodesRequest): Promise<void> {
        await this.searchDiscountCodesRaw(requestParameters);
    }

    /**
     * Updates a discount code by id.
     */
    async updateDiscountCodeByIdRaw(requestParameters: UpdateDiscountCodeByIdRequest): Promise<runtime.ApiResponse<DiscountCodeDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDiscountCodeById.');
        }

        if (requestParameters.discountCodeDraftDTO === null || requestParameters.discountCodeDraftDTO === undefined) {
            throw new runtime.RequiredError('discountCodeDraftDTO','Required parameter requestParameters.discountCodeDraftDTO was null or undefined when calling updateDiscountCodeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/discount-codes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DiscountCodeDraftDTOToJSON(requestParameters.discountCodeDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DiscountCodeDTOFromJSON(jsonValue));
    }

    /**
     * Updates a discount code by id.
     */
    async updateDiscountCodeById(requestParameters: UpdateDiscountCodeByIdRequest): Promise<DiscountCodeDTO> {
        const response = await this.updateDiscountCodeByIdRaw(requestParameters);
        return await response.value();
    }

}
