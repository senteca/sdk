/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiClientDTO,
    ApiClientDTOFromJSON,
    ApiClientDTOToJSON,
    ApiClientDraftDTO,
    ApiClientDraftDTOFromJSON,
    ApiClientDraftDTOToJSON,
} from '../models';

export interface CreateApiClientRequest {
    apiClientDraftDTO: ApiClientDraftDTO;
}

export interface DeleteApiClientByIdRequest {
    id: string;
}

export interface FilterApiClientsRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface FindApiClientByIdRequest {
    id: string;
}

export interface UpdateApiClientByIdRequest {
    id: string;
    apiClientDraftDTO: ApiClientDraftDTO;
}

/**
 * 
 */
export class ApiClientsApi extends runtime.BaseAPI {

    /**
     * Creates a new API client.
     */
    async createApiClientRaw(requestParameters: CreateApiClientRequest): Promise<runtime.ApiResponse<ApiClientDTO>> {
        if (requestParameters.apiClientDraftDTO === null || requestParameters.apiClientDraftDTO === undefined) {
            throw new runtime.RequiredError('apiClientDraftDTO','Required parameter requestParameters.apiClientDraftDTO was null or undefined when calling createApiClient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/api-clients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiClientDraftDTOToJSON(requestParameters.apiClientDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiClientDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new API client.
     */
    async createApiClient(requestParameters: CreateApiClientRequest): Promise<ApiClientDTO> {
        const response = await this.createApiClientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an API client by id.
     */
    async deleteApiClientByIdRaw(requestParameters: DeleteApiClientByIdRequest): Promise<runtime.ApiResponse<ApiClientDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteApiClientById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/api-clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiClientDTOFromJSON(jsonValue));
    }

    /**
     * Deletes an API client by id.
     */
    async deleteApiClientById(requestParameters: DeleteApiClientByIdRequest): Promise<ApiClientDTO> {
        const response = await this.deleteApiClientByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all API clients.
     */
    async filterApiClientsRaw(requestParameters: FilterApiClientsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterApiClients.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterApiClients.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterApiClients.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling filterApiClients.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/api-clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all API clients.
     */
    async filterApiClients(requestParameters: FilterApiClientsRequest): Promise<void> {
        await this.filterApiClientsRaw(requestParameters);
    }

    /**
     * Returns an API client by id.
     */
    async findApiClientByIdRaw(requestParameters: FindApiClientByIdRequest): Promise<runtime.ApiResponse<ApiClientDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findApiClientById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/api-clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiClientDTOFromJSON(jsonValue));
    }

    /**
     * Returns an API client by id.
     */
    async findApiClientById(requestParameters: FindApiClientByIdRequest): Promise<ApiClientDTO> {
        const response = await this.findApiClientByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an API client by id.
     */
    async updateApiClientByIdRaw(requestParameters: UpdateApiClientByIdRequest): Promise<runtime.ApiResponse<ApiClientDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateApiClientById.');
        }

        if (requestParameters.apiClientDraftDTO === null || requestParameters.apiClientDraftDTO === undefined) {
            throw new runtime.RequiredError('apiClientDraftDTO','Required parameter requestParameters.apiClientDraftDTO was null or undefined when calling updateApiClientById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/api-clients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiClientDraftDTOToJSON(requestParameters.apiClientDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiClientDTOFromJSON(jsonValue));
    }

    /**
     * Updates an API client by id.
     */
    async updateApiClientById(requestParameters: UpdateApiClientByIdRequest): Promise<ApiClientDTO> {
        const response = await this.updateApiClientByIdRaw(requestParameters);
        return await response.value();
    }

}
