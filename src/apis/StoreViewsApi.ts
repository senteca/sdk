/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    StoreViewDTO,
    StoreViewDTOFromJSON,
    StoreViewDTOToJSON,
    StoreViewDraftDTO,
    StoreViewDraftDTOFromJSON,
    StoreViewDraftDTOToJSON,
} from '../models';

export interface CreateRequest {
    storeViewDraftDTO: StoreViewDraftDTO;
}

export interface DeleteByIdRequest {
    id: string;
}

export interface UpdateRequest {
    id: string;
    storeViewDraftDTO: StoreViewDraftDTO;
}

/**
 * 
 */
export class StoreViewsApi extends runtime.BaseAPI {

    /**
     * Creates new store view record
     */
    async createRaw(requestParameters: CreateRequest): Promise<runtime.ApiResponse<StoreViewDTO>> {
        if (requestParameters.storeViewDraftDTO === null || requestParameters.storeViewDraftDTO === undefined) {
            throw new runtime.RequiredError('storeViewDraftDTO','Required parameter requestParameters.storeViewDraftDTO was null or undefined when calling create.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/store-views`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreViewDraftDTOToJSON(requestParameters.storeViewDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreViewDTOFromJSON(jsonValue));
    }

    /**
     * Creates new store view record
     */
    async create(requestParameters: CreateRequest): Promise<StoreViewDTO> {
        const response = await this.createRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a store veiw by id
     */
    async deleteByIdRaw(requestParameters: DeleteByIdRequest): Promise<runtime.ApiResponse<StoreViewDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/store-views/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreViewDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a store veiw by id
     */
    async deleteById(requestParameters: DeleteByIdRequest): Promise<StoreViewDTO> {
        const response = await this.deleteByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Filters the store views collection
     */
    async filterRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/store-views`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Filters the store views collection
     */
    async filter(): Promise<void> {
        await this.filterRaw();
    }

    /**
     * Updates a store view
     */
    async updateRaw(requestParameters: UpdateRequest): Promise<runtime.ApiResponse<StoreViewDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling update.');
        }

        if (requestParameters.storeViewDraftDTO === null || requestParameters.storeViewDraftDTO === undefined) {
            throw new runtime.RequiredError('storeViewDraftDTO','Required parameter requestParameters.storeViewDraftDTO was null or undefined when calling update.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/store-views/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StoreViewDraftDTOToJSON(requestParameters.storeViewDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreViewDTOFromJSON(jsonValue));
    }

    /**
     * Updates a store view
     */
    async update(requestParameters: UpdateRequest): Promise<StoreViewDTO> {
        const response = await this.updateRaw(requestParameters);
        return await response.value();
    }

}
