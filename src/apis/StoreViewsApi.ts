/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    StoreViewDTO,
    StoreViewDTOFromJSON,
    StoreViewDTOToJSON,
    StoreViewDraftDTO,
    StoreViewDraftDTOFromJSON,
    StoreViewDraftDTOToJSON,
} from '../models';

export interface CreateStoreViewRequest {
    storeViewDraftDTO: StoreViewDraftDTO;
}

export interface DeleteStoreViewByIdRequest {
    id: string;
}

export interface FilterStoreViewsRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface SetThemeConfigRequest {
    id: string;
}

export interface SetThemeKeyRequest {
    id: string;
}

export interface UpdateStoreViewRequest {
    id: string;
    storeViewDraftDTO: StoreViewDraftDTO;
}

/**
 * 
 */
export class StoreViewsApi extends runtime.BaseAPI {

    /**
     * Creates new record
     */
    async createStoreViewRaw(requestParameters: CreateStoreViewRequest): Promise<runtime.ApiResponse<StoreViewDTO>> {
        if (requestParameters.storeViewDraftDTO === null || requestParameters.storeViewDraftDTO === undefined) {
            throw new runtime.RequiredError('storeViewDraftDTO','Required parameter requestParameters.storeViewDraftDTO was null or undefined when calling createStoreView.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/store-views`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreViewDraftDTOToJSON(requestParameters.storeViewDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreViewDTOFromJSON(jsonValue));
    }

    /**
     * Creates new record
     */
    async createStoreView(requestParameters: CreateStoreViewRequest): Promise<StoreViewDTO> {
        const response = await this.createStoreViewRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a record by id
     */
    async deleteStoreViewByIdRaw(requestParameters: DeleteStoreViewByIdRequest): Promise<runtime.ApiResponse<StoreViewDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStoreViewById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/store-views/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreViewDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a record by id
     */
    async deleteStoreViewById(requestParameters: DeleteStoreViewByIdRequest): Promise<StoreViewDTO> {
        const response = await this.deleteStoreViewByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Filters the collection
     */
    async filterStoreViewsRaw(requestParameters: FilterStoreViewsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterStoreViews.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterStoreViews.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterStoreViews.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling filterStoreViews.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/store-views`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Filters the collection
     */
    async filterStoreViews(requestParameters: FilterStoreViewsRequest): Promise<void> {
        await this.filterStoreViewsRaw(requestParameters);
    }

    /**
     * Sets theme config
     */
    async setThemeConfigRaw(requestParameters: SetThemeConfigRequest): Promise<runtime.ApiResponse<StoreViewDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling setThemeConfig.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/store-views/{id}/theme-config`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreViewDTOFromJSON(jsonValue));
    }

    /**
     * Sets theme config
     */
    async setThemeConfig(requestParameters: SetThemeConfigRequest): Promise<StoreViewDTO> {
        const response = await this.setThemeConfigRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sets theme key
     */
    async setThemeKeyRaw(requestParameters: SetThemeKeyRequest): Promise<runtime.ApiResponse<StoreViewDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling setThemeKey.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/store-views/{id}/theme-key`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreViewDTOFromJSON(jsonValue));
    }

    /**
     * Sets theme key
     */
    async setThemeKey(requestParameters: SetThemeKeyRequest): Promise<StoreViewDTO> {
        const response = await this.setThemeKeyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a record
     */
    async updateStoreViewRaw(requestParameters: UpdateStoreViewRequest): Promise<runtime.ApiResponse<StoreViewDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateStoreView.');
        }

        if (requestParameters.storeViewDraftDTO === null || requestParameters.storeViewDraftDTO === undefined) {
            throw new runtime.RequiredError('storeViewDraftDTO','Required parameter requestParameters.storeViewDraftDTO was null or undefined when calling updateStoreView.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/store-views/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StoreViewDraftDTOToJSON(requestParameters.storeViewDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreViewDTOFromJSON(jsonValue));
    }

    /**
     * Updates a record
     */
    async updateStoreView(requestParameters: UpdateStoreViewRequest): Promise<StoreViewDTO> {
        const response = await this.updateStoreViewRaw(requestParameters);
        return await response.value();
    }

}
