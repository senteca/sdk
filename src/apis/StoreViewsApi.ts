/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    StoreViewDTO,
    StoreViewDTOFromJSON,
    StoreViewDTOToJSON,
    StoreViewDraftDTO,
    StoreViewDraftDTOFromJSON,
    StoreViewDraftDTOToJSON,
    StoreViewFilterResultDTO,
    StoreViewFilterResultDTOFromJSON,
    StoreViewFilterResultDTOToJSON,
} from '../models';

export interface CreateStoreViewRequest {
    storeViewDraftDTO: StoreViewDraftDTO;
}

export interface DeleteStoreViewByIdRequest {
    id: string;
}

export interface FilterStoreViewsRequest {
    filter?: Array<string>;
    sort?: Array<string>;
    expand?: Array<string>;
    project?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface GetStoreViewByIdRequest {
    id: string;
}

export interface UpdateRequest {
    id: string;
    storeViewDraftDTO: StoreViewDraftDTO;
}

/**
 * 
 */
export class StoreViewsApi extends runtime.BaseAPI {

    /**
     * Creates new store view record
     */
    async createStoreViewRaw(requestParameters: CreateStoreViewRequest): Promise<runtime.ApiResponse<StoreViewDTO>> {
        if (requestParameters.storeViewDraftDTO === null || requestParameters.storeViewDraftDTO === undefined) {
            throw new runtime.RequiredError('storeViewDraftDTO','Required parameter requestParameters.storeViewDraftDTO was null or undefined when calling createStoreView.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/store-views`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StoreViewDraftDTOToJSON(requestParameters.storeViewDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreViewDTOFromJSON(jsonValue));
    }

    /**
     * Creates new store view record
     */
    async createStoreView(requestParameters: CreateStoreViewRequest): Promise<StoreViewDTO> {
        const response = await this.createStoreViewRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a store view by id
     */
    async deleteStoreViewByIdRaw(requestParameters: DeleteStoreViewByIdRequest): Promise<runtime.ApiResponse<StoreViewDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteStoreViewById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/store-views/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreViewDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a store view by id
     */
    async deleteStoreViewById(requestParameters: DeleteStoreViewByIdRequest): Promise<StoreViewDTO> {
        const response = await this.deleteStoreViewByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Filters the store views collection
     */
    async filterStoreViewsRaw(requestParameters: FilterStoreViewsRequest): Promise<runtime.ApiResponse<StoreViewFilterResultDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/store-views`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreViewFilterResultDTOFromJSON(jsonValue));
    }

    /**
     * Filters the store views collection
     */
    async filterStoreViews(requestParameters: FilterStoreViewsRequest): Promise<StoreViewFilterResultDTO> {
        const response = await this.filterStoreViewsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets store view by id
     */
    async getStoreViewByIdRaw(requestParameters: GetStoreViewByIdRequest): Promise<runtime.ApiResponse<StoreViewDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStoreViewById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/store-views/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreViewDTOFromJSON(jsonValue));
    }

    /**
     * Gets store view by id
     */
    async getStoreViewById(requestParameters: GetStoreViewByIdRequest): Promise<StoreViewDTO> {
        const response = await this.getStoreViewByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a store view
     */
    async updateRaw(requestParameters: UpdateRequest): Promise<runtime.ApiResponse<StoreViewDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling update.');
        }

        if (requestParameters.storeViewDraftDTO === null || requestParameters.storeViewDraftDTO === undefined) {
            throw new runtime.RequiredError('storeViewDraftDTO','Required parameter requestParameters.storeViewDraftDTO was null or undefined when calling update.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/store-views/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StoreViewDraftDTOToJSON(requestParameters.storeViewDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StoreViewDTOFromJSON(jsonValue));
    }

    /**
     * Updates a store view
     */
    async update(requestParameters: UpdateRequest): Promise<StoreViewDTO> {
        const response = await this.updateRaw(requestParameters);
        return await response.value();
    }

}
