/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AccessTokenDTO,
    AccessTokenDTOFromJSON,
    AccessTokenDTOToJSON,
    FacebookTokenRequestDTO,
    FacebookTokenRequestDTOFromJSON,
    FacebookTokenRequestDTOToJSON,
    PasswordGrantTokenRequestDTO,
    PasswordGrantTokenRequestDTOFromJSON,
    PasswordGrantTokenRequestDTOToJSON,
    TokenRequestDTO,
    TokenRequestDTOFromJSON,
    TokenRequestDTOToJSON,
} from '../models';

export interface GetAnonymousTokenRequest {
    tokenRequestDTO: TokenRequestDTO;
}

export interface GetFacebookTokenRequest {
    facebookTokenRequestDTO: FacebookTokenRequestDTO;
}

export interface GetPasswordGrantTokenRequest {
    passwordGrantTokenRequestDTO: PasswordGrantTokenRequestDTO;
}

export interface GetTokenRequest {
    tokenRequestDTO: TokenRequestDTO;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Returns an anonymous access token based on api client\'s id and secret. Anonymous token permissions match the api client permissions.
     */
    async getAnonymousTokenRaw(requestParameters: GetAnonymousTokenRequest): Promise<runtime.ApiResponse<AccessTokenDTO>> {
        if (requestParameters.tokenRequestDTO === null || requestParameters.tokenRequestDTO === undefined) {
            throw new runtime.RequiredError('tokenRequestDTO','Required parameter requestParameters.tokenRequestDTO was null or undefined when calling getAnonymousToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/anonymous/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRequestDTOToJSON(requestParameters.tokenRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenDTOFromJSON(jsonValue));
    }

    /**
     * Returns an anonymous access token based on api client\'s id and secret. Anonymous token permissions match the api client permissions.
     */
    async getAnonymousToken(requestParameters: GetAnonymousTokenRequest): Promise<AccessTokenDTO> {
        const response = await this.getAnonymousTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns an access token and a refresh token based on user\'s facebook id and facebook token.
     */
    async getFacebookTokenRaw(requestParameters: GetFacebookTokenRequest): Promise<runtime.ApiResponse<AccessTokenDTO>> {
        if (requestParameters.facebookTokenRequestDTO === null || requestParameters.facebookTokenRequestDTO === undefined) {
            throw new runtime.RequiredError('facebookTokenRequestDTO','Required parameter requestParameters.facebookTokenRequestDTO was null or undefined when calling getFacebookToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/facebook/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FacebookTokenRequestDTOToJSON(requestParameters.facebookTokenRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenDTOFromJSON(jsonValue));
    }

    /**
     * Returns an access token and a refresh token based on user\'s facebook id and facebook token.
     */
    async getFacebookToken(requestParameters: GetFacebookTokenRequest): Promise<AccessTokenDTO> {
        const response = await this.getFacebookTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns an access token using password grant
     */
    async getPasswordGrantTokenRaw(requestParameters: GetPasswordGrantTokenRequest): Promise<runtime.ApiResponse<AccessTokenDTO>> {
        if (requestParameters.passwordGrantTokenRequestDTO === null || requestParameters.passwordGrantTokenRequestDTO === undefined) {
            throw new runtime.RequiredError('passwordGrantTokenRequestDTO','Required parameter requestParameters.passwordGrantTokenRequestDTO was null or undefined when calling getPasswordGrantToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordGrantTokenRequestDTOToJSON(requestParameters.passwordGrantTokenRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenDTOFromJSON(jsonValue));
    }

    /**
     * Returns an access token using password grant
     */
    async getPasswordGrantToken(requestParameters: GetPasswordGrantTokenRequest): Promise<AccessTokenDTO> {
        const response = await this.getPasswordGrantTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns an access token and optionally a refresh token for different grant types. Grant type \'client-credentials\' authorizes api clients based on client id and client secret. Grant type \'password-credentials\' authorizes users based on email and password along with api client\'s id and secret. Grant type \'refresh-token\' returns new access and refresh tokens if the provided current refresh token is valid.
     */
    async getTokenRaw(requestParameters: GetTokenRequest): Promise<runtime.ApiResponse<AccessTokenDTO>> {
        if (requestParameters.tokenRequestDTO === null || requestParameters.tokenRequestDTO === undefined) {
            throw new runtime.RequiredError('tokenRequestDTO','Required parameter requestParameters.tokenRequestDTO was null or undefined when calling getToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRequestDTOToJSON(requestParameters.tokenRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessTokenDTOFromJSON(jsonValue));
    }

    /**
     * Returns an access token and optionally a refresh token for different grant types. Grant type \'client-credentials\' authorizes api clients based on client id and client secret. Grant type \'password-credentials\' authorizes users based on email and password along with api client\'s id and secret. Grant type \'refresh-token\' returns new access and refresh tokens if the provided current refresh token is valid.
     */
    async getToken(requestParameters: GetTokenRequest): Promise<AccessTokenDTO> {
        const response = await this.getTokenRaw(requestParameters);
        return await response.value();
    }

}
