/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddressDTO,
    AddressDTOFromJSON,
    AddressDTOToJSON,
    DiscountCodeUpdateDTO,
    DiscountCodeUpdateDTOFromJSON,
    DiscountCodeUpdateDTOToJSON,
    LineItemDraftDTO,
    LineItemDraftDTOFromJSON,
    LineItemDraftDTOToJSON,
    MerchantsMethodsUpdateDTO,
    MerchantsMethodsUpdateDTOFromJSON,
    MerchantsMethodsUpdateDTOToJSON,
    OrderDTO,
    OrderDTOFromJSON,
    OrderDTOToJSON,
    PaymentMethodsInfo,
    PaymentMethodsInfoFromJSON,
    PaymentMethodsInfoToJSON,
    PlatformMethodUpdateDTO,
    PlatformMethodUpdateDTOFromJSON,
    PlatformMethodUpdateDTOToJSON,
    QuantityUpdateDTO,
    QuantityUpdateDTOFromJSON,
    QuantityUpdateDTOToJSON,
    ShippingAddressDTO,
    ShippingAddressDTOFromJSON,
    ShippingAddressDTOToJSON,
    ShippingMethodsInfo,
    ShippingMethodsInfoFromJSON,
    ShippingMethodsInfoToJSON,
} from '../models';

export interface AddMyCartLineItemRequest {
    lineItemDraftDTO: LineItemDraftDTO;
}

export interface AddMyCartWalletRequest {
    type: string;
}

export interface CreateMyCartRequest {
    body: object;
}

export interface RemoveMyCartDiscountCodeRequest {
    code: string;
}

export interface RemoveMyCartLineItemRequest {
    lineItemId: string;
}

export interface RemoveMyCartWalletRequest {
    type: string;
}

export interface SetMyBillingAddressRequest {
    addressDTO: AddressDTO;
}

export interface SetMyCartDiscountCodeRequest {
    discountCodeUpdateDTO: DiscountCodeUpdateDTO;
}

export interface SetMyCartLineItemQuantityRequest {
    lineItemId: string;
    quantityUpdateDTO: QuantityUpdateDTO;
}

export interface SetMyMerchantsPaymentMethodsRequest {
    merchantsMethodsUpdateDTO: MerchantsMethodsUpdateDTO;
}

export interface SetMyMerchantsShippingMethodsRequest {
    merchantsMethodsUpdateDTO: MerchantsMethodsUpdateDTO;
}

export interface SetMyPlatformPaymentMethodRequest {
    platformMethodUpdateDTO: PlatformMethodUpdateDTO;
}

export interface SetMyPlatformShippingMethodRequest {
    platformMethodUpdateDTO: PlatformMethodUpdateDTO;
}

export interface SetMyShippingAddressRequest {
    shippingAddressDTO: ShippingAddressDTO;
}

/**
 * 
 */
export class MyCartApi extends runtime.BaseAPI {

    /**
     * Adds a line item to current customer\'s cart.
     */
    async addMyCartLineItemRaw(requestParameters: AddMyCartLineItemRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.lineItemDraftDTO === null || requestParameters.lineItemDraftDTO === undefined) {
            throw new runtime.RequiredError('lineItemDraftDTO','Required parameter requestParameters.lineItemDraftDTO was null or undefined when calling addMyCartLineItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/my/cart/line-items`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LineItemDraftDTOToJSON(requestParameters.lineItemDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Adds a line item to current customer\'s cart.
     */
    async addMyCartLineItem(requestParameters: AddMyCartLineItemRequest): Promise<OrderDTO> {
        const response = await this.addMyCartLineItemRaw(requestParameters);
        return await response.value();
    }

    /**
     * Associates wallet by type to current customer\'s order so order can be fully or partially paid by wallet.
     */
    async addMyCartWalletRaw(requestParameters: AddMyCartWalletRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling addMyCartWallet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/my/cart/wallet/type={type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Associates wallet by type to current customer\'s order so order can be fully or partially paid by wallet.
     */
    async addMyCartWallet(requestParameters: AddMyCartWalletRequest): Promise<OrderDTO> {
        const response = await this.addMyCartWalletRaw(requestParameters);
        return await response.value();
    }

    /**
     * Validates current customer\'s cart line items availability.
     */
    async checkMyCartRaw(): Promise<runtime.ApiResponse<OrderDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/my/cart/check`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Validates current customer\'s cart line items availability.
     */
    async checkMyCart(): Promise<OrderDTO> {
        const response = await this.checkMyCartRaw();
        return await response.value();
    }

    /**
     * Creates a cart for the current customer.
     */
    async createMyCartRaw(requestParameters: CreateMyCartRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling createMyCart.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/my/cart`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Creates a cart for the current customer.
     */
    async createMyCart(requestParameters: CreateMyCartRequest): Promise<OrderDTO> {
        const response = await this.createMyCartRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the cart for the current customer.
     */
    async getMyCartRaw(): Promise<runtime.ApiResponse<OrderDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/my/cart`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Returns the cart for the current customer.
     */
    async getMyCart(): Promise<OrderDTO> {
        const response = await this.getMyCartRaw();
        return await response.value();
    }

    /**
     * Lists available payment methods for current customer\'s order.
     */
    async getMyPaymentMethodsRaw(): Promise<runtime.ApiResponse<PaymentMethodsInfo>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/my/cart/payment-methods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentMethodsInfoFromJSON(jsonValue));
    }

    /**
     * Lists available payment methods for current customer\'s order.
     */
    async getMyPaymentMethods(): Promise<PaymentMethodsInfo> {
        const response = await this.getMyPaymentMethodsRaw();
        return await response.value();
    }

    /**
     * Lists available shipping methods for current customer\'s order.
     */
    async getMyShippingMethodsRaw(): Promise<runtime.ApiResponse<ShippingMethodsInfo>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/my/cart/shipping-methods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ShippingMethodsInfoFromJSON(jsonValue));
    }

    /**
     * Lists available shipping methods for current customer\'s order.
     */
    async getMyShippingMethods(): Promise<ShippingMethodsInfo> {
        const response = await this.getMyShippingMethodsRaw();
        return await response.value();
    }

    /**
     * Removes a discount code from current customer\'s order.
     */
    async removeMyCartDiscountCodeRaw(requestParameters: RemoveMyCartDiscountCodeRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.code === null || requestParameters.code === undefined) {
            throw new runtime.RequiredError('code','Required parameter requestParameters.code was null or undefined when calling removeMyCartDiscountCode.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/my/cart/discount-code`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Removes a discount code from current customer\'s order.
     */
    async removeMyCartDiscountCode(requestParameters: RemoveMyCartDiscountCodeRequest): Promise<OrderDTO> {
        const response = await this.removeMyCartDiscountCodeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Removes a line item from current customer\'s cart.
     */
    async removeMyCartLineItemRaw(requestParameters: RemoveMyCartLineItemRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.lineItemId === null || requestParameters.lineItemId === undefined) {
            throw new runtime.RequiredError('lineItemId','Required parameter requestParameters.lineItemId was null or undefined when calling removeMyCartLineItem.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/my/cart/line-items/{lineItemId}`.replace(`{${"lineItemId"}}`, encodeURIComponent(String(requestParameters.lineItemId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Removes a line item from current customer\'s cart.
     */
    async removeMyCartLineItem(requestParameters: RemoveMyCartLineItemRequest): Promise<OrderDTO> {
        const response = await this.removeMyCartLineItemRaw(requestParameters);
        return await response.value();
    }

    /**
     * Removes wallet by type to current customer\'s order. Associated wallet payments are removed.
     */
    async removeMyCartWalletRaw(requestParameters: RemoveMyCartWalletRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling removeMyCartWallet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/my/cart/wallet/type={type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Removes wallet by type to current customer\'s order. Associated wallet payments are removed.
     */
    async removeMyCartWallet(requestParameters: RemoveMyCartWalletRequest): Promise<OrderDTO> {
        const response = await this.removeMyCartWalletRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sets a billing address for current customer\'s order.
     */
    async setMyBillingAddressRaw(requestParameters: SetMyBillingAddressRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.addressDTO === null || requestParameters.addressDTO === undefined) {
            throw new runtime.RequiredError('addressDTO','Required parameter requestParameters.addressDTO was null or undefined when calling setMyBillingAddress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/my/cart/billing-address`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AddressDTOToJSON(requestParameters.addressDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Sets a billing address for current customer\'s order.
     */
    async setMyBillingAddress(requestParameters: SetMyBillingAddressRequest): Promise<OrderDTO> {
        const response = await this.setMyBillingAddressRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sets current customer\'s custom field value
     */
    async setMyCartCustomFieldRaw(): Promise<runtime.ApiResponse<OrderDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/my/cart/custom-field`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Sets current customer\'s custom field value
     */
    async setMyCartCustomField(): Promise<OrderDTO> {
        const response = await this.setMyCartCustomFieldRaw();
        return await response.value();
    }

    /**
     * Applies a discount code to current customer\'s order.
     */
    async setMyCartDiscountCodeRaw(requestParameters: SetMyCartDiscountCodeRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.discountCodeUpdateDTO === null || requestParameters.discountCodeUpdateDTO === undefined) {
            throw new runtime.RequiredError('discountCodeUpdateDTO','Required parameter requestParameters.discountCodeUpdateDTO was null or undefined when calling setMyCartDiscountCode.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/my/cart/discount-code`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DiscountCodeUpdateDTOToJSON(requestParameters.discountCodeUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Applies a discount code to current customer\'s order.
     */
    async setMyCartDiscountCode(requestParameters: SetMyCartDiscountCodeRequest): Promise<OrderDTO> {
        const response = await this.setMyCartDiscountCodeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates line item quantity in current customer\'s cart.
     */
    async setMyCartLineItemQuantityRaw(requestParameters: SetMyCartLineItemQuantityRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.lineItemId === null || requestParameters.lineItemId === undefined) {
            throw new runtime.RequiredError('lineItemId','Required parameter requestParameters.lineItemId was null or undefined when calling setMyCartLineItemQuantity.');
        }

        if (requestParameters.quantityUpdateDTO === null || requestParameters.quantityUpdateDTO === undefined) {
            throw new runtime.RequiredError('quantityUpdateDTO','Required parameter requestParameters.quantityUpdateDTO was null or undefined when calling setMyCartLineItemQuantity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/my/cart/line-items/{lineItemId}/quantity`.replace(`{${"lineItemId"}}`, encodeURIComponent(String(requestParameters.lineItemId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: QuantityUpdateDTOToJSON(requestParameters.quantityUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Updates line item quantity in current customer\'s cart.
     */
    async setMyCartLineItemQuantity(requestParameters: SetMyCartLineItemQuantityRequest): Promise<OrderDTO> {
        const response = await this.setMyCartLineItemQuantityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Associates a payment method defined per merchant to the current customer\'s order.
     */
    async setMyMerchantsPaymentMethodsRaw(requestParameters: SetMyMerchantsPaymentMethodsRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.merchantsMethodsUpdateDTO === null || requestParameters.merchantsMethodsUpdateDTO === undefined) {
            throw new runtime.RequiredError('merchantsMethodsUpdateDTO','Required parameter requestParameters.merchantsMethodsUpdateDTO was null or undefined when calling setMyMerchantsPaymentMethods.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/my/cart/merchants-payment-methods`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MerchantsMethodsUpdateDTOToJSON(requestParameters.merchantsMethodsUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Associates a payment method defined per merchant to the current customer\'s order.
     */
    async setMyMerchantsPaymentMethods(requestParameters: SetMyMerchantsPaymentMethodsRequest): Promise<OrderDTO> {
        const response = await this.setMyMerchantsPaymentMethodsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Associates a shipping method defined per merchant to the current customer\'s order.
     */
    async setMyMerchantsShippingMethodsRaw(requestParameters: SetMyMerchantsShippingMethodsRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.merchantsMethodsUpdateDTO === null || requestParameters.merchantsMethodsUpdateDTO === undefined) {
            throw new runtime.RequiredError('merchantsMethodsUpdateDTO','Required parameter requestParameters.merchantsMethodsUpdateDTO was null or undefined when calling setMyMerchantsShippingMethods.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/my/cart/merchants-shipping-methods`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MerchantsMethodsUpdateDTOToJSON(requestParameters.merchantsMethodsUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Associates a shipping method defined per merchant to the current customer\'s order.
     */
    async setMyMerchantsShippingMethods(requestParameters: SetMyMerchantsShippingMethodsRequest): Promise<OrderDTO> {
        const response = await this.setMyMerchantsShippingMethodsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Associates a payment method defined per platform to the current customer\'s order.
     */
    async setMyPlatformPaymentMethodRaw(requestParameters: SetMyPlatformPaymentMethodRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.platformMethodUpdateDTO === null || requestParameters.platformMethodUpdateDTO === undefined) {
            throw new runtime.RequiredError('platformMethodUpdateDTO','Required parameter requestParameters.platformMethodUpdateDTO was null or undefined when calling setMyPlatformPaymentMethod.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/my/cart/platform-payment-method`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PlatformMethodUpdateDTOToJSON(requestParameters.platformMethodUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Associates a payment method defined per platform to the current customer\'s order.
     */
    async setMyPlatformPaymentMethod(requestParameters: SetMyPlatformPaymentMethodRequest): Promise<OrderDTO> {
        const response = await this.setMyPlatformPaymentMethodRaw(requestParameters);
        return await response.value();
    }

    /**
     * Associates a shipping method defined per platform to the current customer\'s order.
     */
    async setMyPlatformShippingMethodRaw(requestParameters: SetMyPlatformShippingMethodRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.platformMethodUpdateDTO === null || requestParameters.platformMethodUpdateDTO === undefined) {
            throw new runtime.RequiredError('platformMethodUpdateDTO','Required parameter requestParameters.platformMethodUpdateDTO was null or undefined when calling setMyPlatformShippingMethod.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/my/cart/platform-shipping-method`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PlatformMethodUpdateDTOToJSON(requestParameters.platformMethodUpdateDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Associates a shipping method defined per platform to the current customer\'s order.
     */
    async setMyPlatformShippingMethod(requestParameters: SetMyPlatformShippingMethodRequest): Promise<OrderDTO> {
        const response = await this.setMyPlatformShippingMethodRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sets a shipping address for current customer\'s order.
     */
    async setMyShippingAddressRaw(requestParameters: SetMyShippingAddressRequest): Promise<runtime.ApiResponse<OrderDTO>> {
        if (requestParameters.shippingAddressDTO === null || requestParameters.shippingAddressDTO === undefined) {
            throw new runtime.RequiredError('shippingAddressDTO','Required parameter requestParameters.shippingAddressDTO was null or undefined when calling setMyShippingAddress.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/my/cart/shipping-address`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ShippingAddressDTOToJSON(requestParameters.shippingAddressDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderDTOFromJSON(jsonValue));
    }

    /**
     * Sets a shipping address for current customer\'s order.
     */
    async setMyShippingAddress(requestParameters: SetMyShippingAddressRequest): Promise<OrderDTO> {
        const response = await this.setMyShippingAddressRaw(requestParameters);
        return await response.value();
    }

}
