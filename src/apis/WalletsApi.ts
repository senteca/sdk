/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    WalletDTO,
    WalletDTOFromJSON,
    WalletDTOToJSON,
    WalletDraftDTO,
    WalletDraftDTOFromJSON,
    WalletDraftDTOToJSON,
} from '../models';

export interface CreateWalletRequest {
    walletDraftDTO: WalletDraftDTO;
}

export interface DeleteWalletByIdRequest {
    id: string;
}

export interface FilterWalletsRequest {
    filter: string;
    sort: string;
    expand: string;
    limit?: number;
    offset?: number;
}

export interface FindWalletByIdRequest {
    id: string;
}

export interface ImportWalletsRequest {
    requestBody: Array<string>;
}

export interface SearchWalletsRequest {
    filter: string;
    sort: string;
    expand: string;
    limit?: number;
    offset?: number;
}

export interface UpdateWalletByIdRequest {
    id: string;
    walletDraftDTO: WalletDraftDTO;
}

/**
 * 
 */
export class WalletsApi extends runtime.BaseAPI {

    /**
     * Creates a new wallet.
     */
    async createWalletRaw(requestParameters: CreateWalletRequest): Promise<runtime.ApiResponse<WalletDTO>> {
        if (requestParameters.walletDraftDTO === null || requestParameters.walletDraftDTO === undefined) {
            throw new runtime.RequiredError('walletDraftDTO','Required parameter requestParameters.walletDraftDTO was null or undefined when calling createWallet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/wallets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WalletDraftDTOToJSON(requestParameters.walletDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new wallet.
     */
    async createWallet(requestParameters: CreateWalletRequest): Promise<WalletDTO> {
        const response = await this.createWalletRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a wallet by id.
     */
    async deleteWalletByIdRaw(requestParameters: DeleteWalletByIdRequest): Promise<runtime.ApiResponse<WalletDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWalletById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/wallets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a wallet by id.
     */
    async deleteWalletById(requestParameters: DeleteWalletByIdRequest): Promise<WalletDTO> {
        const response = await this.deleteWalletByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all wallets.
     */
    async filterWalletsRaw(requestParameters: FilterWalletsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterWallets.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterWallets.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterWallets.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/wallets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all wallets.
     */
    async filterWallets(requestParameters: FilterWalletsRequest): Promise<void> {
        await this.filterWalletsRaw(requestParameters);
    }

    /**
     * Returns a wallet by id.
     */
    async findWalletByIdRaw(requestParameters: FindWalletByIdRequest): Promise<runtime.ApiResponse<WalletDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findWalletById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/wallets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletDTOFromJSON(jsonValue));
    }

    /**
     * Returns a wallet by id.
     */
    async findWalletById(requestParameters: FindWalletByIdRequest): Promise<WalletDTO> {
        const response = await this.findWalletByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Imports a list of wallets. Returns imported wallets with their ids.
     */
    async importWalletsRaw(requestParameters: ImportWalletsRequest): Promise<runtime.ApiResponse<Array<WalletDTO>>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling importWallets.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/wallets/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WalletDTOFromJSON));
    }

    /**
     * Imports a list of wallets. Returns imported wallets with their ids.
     */
    async importWallets(requestParameters: ImportWalletsRequest): Promise<Array<WalletDTO>> {
        const response = await this.importWalletsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Searches wallets by key or owner.
     */
    async searchWalletsRaw(requestParameters: SearchWalletsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling searchWallets.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling searchWallets.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling searchWallets.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/wallets/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Searches wallets by key or owner.
     */
    async searchWallets(requestParameters: SearchWalletsRequest): Promise<void> {
        await this.searchWalletsRaw(requestParameters);
    }

    /**
     * Updates a wallet by id.
     */
    async updateWalletByIdRaw(requestParameters: UpdateWalletByIdRequest): Promise<runtime.ApiResponse<WalletDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateWalletById.');
        }

        if (requestParameters.walletDraftDTO === null || requestParameters.walletDraftDTO === undefined) {
            throw new runtime.RequiredError('walletDraftDTO','Required parameter requestParameters.walletDraftDTO was null or undefined when calling updateWalletById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/wallets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WalletDraftDTOToJSON(requestParameters.walletDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WalletDTOFromJSON(jsonValue));
    }

    /**
     * Updates a wallet by id.
     */
    async updateWalletById(requestParameters: UpdateWalletByIdRequest): Promise<WalletDTO> {
        const response = await this.updateWalletByIdRaw(requestParameters);
        return await response.value();
    }

}
