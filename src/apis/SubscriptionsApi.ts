/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    SubscriptionDTO,
    SubscriptionDTOFromJSON,
    SubscriptionDTOToJSON,
} from '../models';

export interface CreateSubscriptionRequest {
    subscriptionDTO: SubscriptionDTO;
}

export interface DeleteSubscriptionByIdRequest {
    id: string;
}

export interface FindSubscriptionByIdRequest {
    id: string;
}

export interface FindSubscriptionByKeyRequest {
    key: string;
}

export interface UpdateSubscriptionByIdRequest {
    id: string;
    subscriptionDTO: SubscriptionDTO;
}

/**
 * 
 */
export class SubscriptionsApi extends runtime.BaseAPI {

    /**
     * Creates a new subscription.
     */
    async createSubscriptionRaw(requestParameters: CreateSubscriptionRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.subscriptionDTO === null || requestParameters.subscriptionDTO === undefined) {
            throw new runtime.RequiredError('subscriptionDTO','Required parameter requestParameters.subscriptionDTO was null or undefined when calling createSubscription.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/subscriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionDTOToJSON(requestParameters.subscriptionDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creates a new subscription.
     */
    async createSubscription(requestParameters: CreateSubscriptionRequest): Promise<object> {
        const response = await this.createSubscriptionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a subscription by id.
     */
    async deleteSubscriptionByIdRaw(requestParameters: DeleteSubscriptionByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSubscriptionById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Deletes a subscription by id.
     */
    async deleteSubscriptionById(requestParameters: DeleteSubscriptionByIdRequest): Promise<object> {
        const response = await this.deleteSubscriptionByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all subscriptions.
     */
    async filterSubscriptionsRaw(): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Lists all subscriptions.
     */
    async filterSubscriptions(): Promise<Array<object>> {
        const response = await this.filterSubscriptionsRaw();
        return await response.value();
    }

    /**
     * Returns a subscription by id.
     */
    async findSubscriptionByIdRaw(requestParameters: FindSubscriptionByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findSubscriptionById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a subscription by id.
     */
    async findSubscriptionById(requestParameters: FindSubscriptionByIdRequest): Promise<object> {
        const response = await this.findSubscriptionByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a subscription by key.
     */
    async findSubscriptionByKeyRaw(requestParameters: FindSubscriptionByKeyRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling findSubscriptionByKey.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/config/subscriptions/key={key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a subscription by key.
     */
    async findSubscriptionByKey(requestParameters: FindSubscriptionByKeyRequest): Promise<object> {
        const response = await this.findSubscriptionByKeyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a subscription by id.
     */
    async updateSubscriptionByIdRaw(requestParameters: UpdateSubscriptionByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSubscriptionById.');
        }

        if (requestParameters.subscriptionDTO === null || requestParameters.subscriptionDTO === undefined) {
            throw new runtime.RequiredError('subscriptionDTO','Required parameter requestParameters.subscriptionDTO was null or undefined when calling updateSubscriptionById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/config/subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionDTOToJSON(requestParameters.subscriptionDTO),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates a subscription by id.
     */
    async updateSubscriptionById(requestParameters: UpdateSubscriptionByIdRequest): Promise<object> {
        const response = await this.updateSubscriptionByIdRaw(requestParameters);
        return await response.value();
    }

}
