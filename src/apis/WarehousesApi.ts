/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    WarehouseDTO,
    WarehouseDTOFromJSON,
    WarehouseDTOToJSON,
    WarehouseDraftDTO,
    WarehouseDraftDTOFromJSON,
    WarehouseDraftDTOToJSON,
} from '../models';

export interface CreateWarehouseRequest {
    warehouseDraftDTO: WarehouseDraftDTO;
}

export interface DeleteWarehouseByIdRequest {
    id: string;
}

export interface FilterWarehousesRequest {
    filter: string;
    sort: string;
    expand: string;
    limit?: number;
    offset?: number;
}

export interface FindWarehouseByIdRequest {
    id: string;
}

export interface UpdateWarehouseByIdRequest {
    id: string;
    warehouseDraftDTO: WarehouseDraftDTO;
}

/**
 * 
 */
export class WarehousesApi extends runtime.BaseAPI {

    /**
     * Creates a new warehouse.
     */
    async createWarehouseRaw(requestParameters: CreateWarehouseRequest): Promise<runtime.ApiResponse<WarehouseDTO>> {
        if (requestParameters.warehouseDraftDTO === null || requestParameters.warehouseDraftDTO === undefined) {
            throw new runtime.RequiredError('warehouseDraftDTO','Required parameter requestParameters.warehouseDraftDTO was null or undefined when calling createWarehouse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/warehouses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WarehouseDraftDTOToJSON(requestParameters.warehouseDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WarehouseDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new warehouse.
     */
    async createWarehouse(requestParameters: CreateWarehouseRequest): Promise<WarehouseDTO> {
        const response = await this.createWarehouseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a warehouse by id.
     */
    async deleteWarehouseByIdRaw(requestParameters: DeleteWarehouseByIdRequest): Promise<runtime.ApiResponse<WarehouseDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteWarehouseById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/warehouses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WarehouseDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a warehouse by id.
     */
    async deleteWarehouseById(requestParameters: DeleteWarehouseByIdRequest): Promise<WarehouseDTO> {
        const response = await this.deleteWarehouseByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all warehouses.
     */
    async filterWarehousesRaw(requestParameters: FilterWarehousesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterWarehouses.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterWarehouses.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterWarehouses.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/warehouses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all warehouses.
     */
    async filterWarehouses(requestParameters: FilterWarehousesRequest): Promise<void> {
        await this.filterWarehousesRaw(requestParameters);
    }

    /**
     * Returns a warehouse by id.
     */
    async findWarehouseByIdRaw(requestParameters: FindWarehouseByIdRequest): Promise<runtime.ApiResponse<WarehouseDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findWarehouseById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/warehouses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WarehouseDTOFromJSON(jsonValue));
    }

    /**
     * Returns a warehouse by id.
     */
    async findWarehouseById(requestParameters: FindWarehouseByIdRequest): Promise<WarehouseDTO> {
        const response = await this.findWarehouseByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a warehouse by id.
     */
    async updateWarehouseByIdRaw(requestParameters: UpdateWarehouseByIdRequest): Promise<runtime.ApiResponse<WarehouseDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateWarehouseById.');
        }

        if (requestParameters.warehouseDraftDTO === null || requestParameters.warehouseDraftDTO === undefined) {
            throw new runtime.RequiredError('warehouseDraftDTO','Required parameter requestParameters.warehouseDraftDTO was null or undefined when calling updateWarehouseById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/warehouses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: WarehouseDraftDTOToJSON(requestParameters.warehouseDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WarehouseDTOFromJSON(jsonValue));
    }

    /**
     * Updates a warehouse by id.
     */
    async updateWarehouseById(requestParameters: UpdateWarehouseByIdRequest): Promise<WarehouseDTO> {
        const response = await this.updateWarehouseByIdRaw(requestParameters);
        return await response.value();
    }

}
