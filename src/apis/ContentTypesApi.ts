/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ContentTypeDTO,
    ContentTypeDTOFromJSON,
    ContentTypeDTOToJSON,
    ContentTypeDraftDTO,
    ContentTypeDraftDTOFromJSON,
    ContentTypeDraftDTOToJSON,
} from '../models';

export interface CreateContentTypeRequest {
    contentTypeDraftDTO: ContentTypeDraftDTO;
}

export interface DeleteContentTypeByIdRequest {
    id: string;
}

export interface FilterContentTypesRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface UpdateContentTypesRequest {
    id: string;
    contentTypeDraftDTO: ContentTypeDraftDTO;
}

/**
 * 
 */
export class ContentTypesApi extends runtime.BaseAPI {

    /**
     * Creates new record
     */
    async createContentTypeRaw(requestParameters: CreateContentTypeRequest): Promise<runtime.ApiResponse<ContentTypeDTO>> {
        if (requestParameters.contentTypeDraftDTO === null || requestParameters.contentTypeDraftDTO === undefined) {
            throw new runtime.RequiredError('contentTypeDraftDTO','Required parameter requestParameters.contentTypeDraftDTO was null or undefined when calling createContentType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cms/content-types`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContentTypeDraftDTOToJSON(requestParameters.contentTypeDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentTypeDTOFromJSON(jsonValue));
    }

    /**
     * Creates new record
     */
    async createContentType(requestParameters: CreateContentTypeRequest): Promise<ContentTypeDTO> {
        const response = await this.createContentTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a record by id
     */
    async deleteContentTypeByIdRaw(requestParameters: DeleteContentTypeByIdRequest): Promise<runtime.ApiResponse<ContentTypeDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteContentTypeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cms/content-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentTypeDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a record by id
     */
    async deleteContentTypeById(requestParameters: DeleteContentTypeByIdRequest): Promise<ContentTypeDTO> {
        const response = await this.deleteContentTypeByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Filters the collection
     */
    async filterContentTypesRaw(requestParameters: FilterContentTypesRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterContentTypes.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterContentTypes.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterContentTypes.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling filterContentTypes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cms/content-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Filters the collection
     */
    async filterContentTypes(requestParameters: FilterContentTypesRequest): Promise<void> {
        await this.filterContentTypesRaw(requestParameters);
    }

    /**
     * Updates a record
     */
    async updateContentTypesRaw(requestParameters: UpdateContentTypesRequest): Promise<runtime.ApiResponse<ContentTypeDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateContentTypes.');
        }

        if (requestParameters.contentTypeDraftDTO === null || requestParameters.contentTypeDraftDTO === undefined) {
            throw new runtime.RequiredError('contentTypeDraftDTO','Required parameter requestParameters.contentTypeDraftDTO was null or undefined when calling updateContentTypes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cms/content-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContentTypeDraftDTOToJSON(requestParameters.contentTypeDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContentTypeDTOFromJSON(jsonValue));
    }

    /**
     * Updates a record
     */
    async updateContentTypes(requestParameters: UpdateContentTypesRequest): Promise<ContentTypeDTO> {
        const response = await this.updateContentTypesRaw(requestParameters);
        return await response.value();
    }

}
