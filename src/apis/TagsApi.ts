/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TagDTO,
    TagDTOFromJSON,
    TagDTOToJSON,
    TagDraftDTO,
    TagDraftDTOFromJSON,
    TagDraftDTOToJSON,
} from '../models';

export interface CreateTagRequest {
    tagDraftDTO: TagDraftDTO;
}

export interface DeleteTagByIdRequest {
    id: string;
}

export interface FilterTagsRequest {
    filter?: Array<string>;
    sort?: Array<string>;
    expand?: Array<string>;
    project?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface UpdateTagRequest {
    id: string;
    tagDraftDTO: TagDraftDTO;
}

/**
 * 
 */
export class TagsApi extends runtime.BaseAPI {

    /**
     * Creates new record
     */
    async createTagRaw(requestParameters: CreateTagRequest): Promise<runtime.ApiResponse<TagDTO>> {
        if (requestParameters.tagDraftDTO === null || requestParameters.tagDraftDTO === undefined) {
            throw new runtime.RequiredError('tagDraftDTO','Required parameter requestParameters.tagDraftDTO was null or undefined when calling createTag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cms/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagDraftDTOToJSON(requestParameters.tagDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagDTOFromJSON(jsonValue));
    }

    /**
     * Creates new record
     */
    async createTag(requestParameters: CreateTagRequest): Promise<TagDTO> {
        const response = await this.createTagRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a record by id
     */
    async deleteTagByIdRaw(requestParameters: DeleteTagByIdRequest): Promise<runtime.ApiResponse<TagDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTagById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cms/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a record by id
     */
    async deleteTagById(requestParameters: DeleteTagByIdRequest): Promise<TagDTO> {
        const response = await this.deleteTagByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Filters the collection
     */
    async filterTagsRaw(requestParameters: FilterTagsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cms/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Filters the collection
     */
    async filterTags(requestParameters: FilterTagsRequest): Promise<void> {
        await this.filterTagsRaw(requestParameters);
    }

    /**
     * Updates a record
     */
    async updateTagRaw(requestParameters: UpdateTagRequest): Promise<runtime.ApiResponse<TagDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTag.');
        }

        if (requestParameters.tagDraftDTO === null || requestParameters.tagDraftDTO === undefined) {
            throw new runtime.RequiredError('tagDraftDTO','Required parameter requestParameters.tagDraftDTO was null or undefined when calling updateTag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/cms/tags/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagDraftDTOToJSON(requestParameters.tagDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TagDTOFromJSON(jsonValue));
    }

    /**
     * Updates a record
     */
    async updateTag(requestParameters: UpdateTagRequest): Promise<TagDTO> {
        const response = await this.updateTagRaw(requestParameters);
        return await response.value();
    }

}
