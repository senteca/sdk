/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CartDiscountDTO,
    CartDiscountDTOFromJSON,
    CartDiscountDTOToJSON,
    CartDiscountDraftDTO,
    CartDiscountDraftDTOFromJSON,
    CartDiscountDraftDTOToJSON,
} from '../models';

export interface CreateCartDiscountRequest {
    cartDiscountDraftDTO: CartDiscountDraftDTO;
}

export interface DeleteCartDiscountByIdRequest {
    id: string;
}

export interface FilterCartDiscountsRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface FindCartDiscountByIdRequest {
    id: string;
}

export interface ImportCartDiscountsRequest {
    requestBody: Array<string>;
}

export interface SearchCartDiscountsRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface UpdateCartDiscountByIdRequest {
    id: string;
    cartDiscountDraftDTO: CartDiscountDraftDTO;
}

/**
 * 
 */
export class CartDiscountsApi extends runtime.BaseAPI {

    /**
     * Creates a new cart discount.
     */
    async createCartDiscountRaw(requestParameters: CreateCartDiscountRequest): Promise<runtime.ApiResponse<CartDiscountDTO>> {
        if (requestParameters.cartDiscountDraftDTO === null || requestParameters.cartDiscountDraftDTO === undefined) {
            throw new runtime.RequiredError('cartDiscountDraftDTO','Required parameter requestParameters.cartDiscountDraftDTO was null or undefined when calling createCartDiscount.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/cart-discounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CartDiscountDraftDTOToJSON(requestParameters.cartDiscountDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CartDiscountDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new cart discount.
     */
    async createCartDiscount(requestParameters: CreateCartDiscountRequest): Promise<CartDiscountDTO> {
        const response = await this.createCartDiscountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a cart discount by id.
     */
    async deleteCartDiscountByIdRaw(requestParameters: DeleteCartDiscountByIdRequest): Promise<runtime.ApiResponse<CartDiscountDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCartDiscountById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/cart-discounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CartDiscountDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a cart discount by id.
     */
    async deleteCartDiscountById(requestParameters: DeleteCartDiscountByIdRequest): Promise<CartDiscountDTO> {
        const response = await this.deleteCartDiscountByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all cart discounts.
     */
    async filterCartDiscountsRaw(requestParameters: FilterCartDiscountsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterCartDiscounts.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterCartDiscounts.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterCartDiscounts.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling filterCartDiscounts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/cart-discounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all cart discounts.
     */
    async filterCartDiscounts(requestParameters: FilterCartDiscountsRequest): Promise<void> {
        await this.filterCartDiscountsRaw(requestParameters);
    }

    /**
     * Returns a cart discount by id.
     */
    async findCartDiscountByIdRaw(requestParameters: FindCartDiscountByIdRequest): Promise<runtime.ApiResponse<CartDiscountDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findCartDiscountById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/cart-discounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CartDiscountDTOFromJSON(jsonValue));
    }

    /**
     * Returns a cart discount by id.
     */
    async findCartDiscountById(requestParameters: FindCartDiscountByIdRequest): Promise<CartDiscountDTO> {
        const response = await this.findCartDiscountByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Imports multiple cart discounts. Returns imported cart discounts with their ids.
     */
    async importCartDiscountsRaw(requestParameters: ImportCartDiscountsRequest): Promise<runtime.ApiResponse<Array<CartDiscountDTO>>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling importCartDiscounts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/cart-discounts/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CartDiscountDTOFromJSON));
    }

    /**
     * Imports multiple cart discounts. Returns imported cart discounts with their ids.
     */
    async importCartDiscounts(requestParameters: ImportCartDiscountsRequest): Promise<Array<CartDiscountDTO>> {
        const response = await this.importCartDiscountsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Searches cart discounts by name.
     */
    async searchCartDiscountsRaw(requestParameters: SearchCartDiscountsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling searchCartDiscounts.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling searchCartDiscounts.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling searchCartDiscounts.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling searchCartDiscounts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/cart-discounts/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Searches cart discounts by name.
     */
    async searchCartDiscounts(requestParameters: SearchCartDiscountsRequest): Promise<void> {
        await this.searchCartDiscountsRaw(requestParameters);
    }

    /**
     * Updates a cart discount by id.
     */
    async updateCartDiscountByIdRaw(requestParameters: UpdateCartDiscountByIdRequest): Promise<runtime.ApiResponse<CartDiscountDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCartDiscountById.');
        }

        if (requestParameters.cartDiscountDraftDTO === null || requestParameters.cartDiscountDraftDTO === undefined) {
            throw new runtime.RequiredError('cartDiscountDraftDTO','Required parameter requestParameters.cartDiscountDraftDTO was null or undefined when calling updateCartDiscountById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/cart-discounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CartDiscountDraftDTOToJSON(requestParameters.cartDiscountDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CartDiscountDTOFromJSON(jsonValue));
    }

    /**
     * Updates a cart discount by id.
     */
    async updateCartDiscountById(requestParameters: UpdateCartDiscountByIdRequest): Promise<CartDiscountDTO> {
        const response = await this.updateCartDiscountByIdRaw(requestParameters);
        return await response.value();
    }

}
