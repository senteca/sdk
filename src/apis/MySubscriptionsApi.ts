/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CustomerSubscribeDTO,
    CustomerSubscribeDTOFromJSON,
    CustomerSubscribeDTOToJSON,
    CustomerSubscriptionDTO,
    CustomerSubscriptionDTOFromJSON,
    CustomerSubscriptionDTOToJSON,
} from '../models';

export interface SubscribeRequest {
    customerSubscribeDTO: CustomerSubscribeDTO;
}

export interface UnsubscribeRequest {
    customerSubscribeDTO: CustomerSubscribeDTO;
}

/**
 * 
 */
export class MySubscriptionsApi extends runtime.BaseAPI {

    /**
     * Returns all current customer\'s subscriptions.
     */
    async getMySubscriptionsRaw(): Promise<runtime.ApiResponse<CustomerSubscriptionDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/my-subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerSubscriptionDTOFromJSON(jsonValue));
    }

    /**
     * Returns all current customer\'s subscriptions.
     */
    async getMySubscriptions(): Promise<CustomerSubscriptionDTO> {
        const response = await this.getMySubscriptionsRaw();
        return await response.value();
    }

    /**
     * Current customer subscribes for a specific customer subscription type, e.g. newsletter
     */
    async subscribeRaw(requestParameters: SubscribeRequest): Promise<runtime.ApiResponse<CustomerSubscriptionDTO>> {
        if (requestParameters.customerSubscribeDTO === null || requestParameters.customerSubscribeDTO === undefined) {
            throw new runtime.RequiredError('customerSubscribeDTO','Required parameter requestParameters.customerSubscribeDTO was null or undefined when calling subscribe.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/my-subscriptions/subscribe`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerSubscribeDTOToJSON(requestParameters.customerSubscribeDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerSubscriptionDTOFromJSON(jsonValue));
    }

    /**
     * Current customer subscribes for a specific customer subscription type, e.g. newsletter
     */
    async subscribe(requestParameters: SubscribeRequest): Promise<CustomerSubscriptionDTO> {
        const response = await this.subscribeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Current customer unsubscribes for a specific customer subscription type, e.g. newsletter
     */
    async unsubscribeRaw(requestParameters: UnsubscribeRequest): Promise<runtime.ApiResponse<CustomerSubscriptionDTO>> {
        if (requestParameters.customerSubscribeDTO === null || requestParameters.customerSubscribeDTO === undefined) {
            throw new runtime.RequiredError('customerSubscribeDTO','Required parameter requestParameters.customerSubscribeDTO was null or undefined when calling unsubscribe.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/my-subscriptions/unsubscribe`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerSubscribeDTOToJSON(requestParameters.customerSubscribeDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerSubscriptionDTOFromJSON(jsonValue));
    }

    /**
     * Current customer unsubscribes for a specific customer subscription type, e.g. newsletter
     */
    async unsubscribe(requestParameters: UnsubscribeRequest): Promise<CustomerSubscriptionDTO> {
        const response = await this.unsubscribeRaw(requestParameters);
        return await response.value();
    }

}
