/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AssetDTO,
    AssetDTOFromJSON,
    AssetDTOToJSON,
    CollectionDTO,
    CollectionDTOFromJSON,
    CollectionDTOToJSON,
    CollectionDraftDTO,
    CollectionDraftDTOFromJSON,
    CollectionDraftDTOToJSON,
} from '../models';

export interface AddCollectionAssetRequest {
    collectionId: string;
    assetDTO: AssetDTO;
}

export interface CreateCollectionRequest {
    collectionDraftDTO: CollectionDraftDTO;
}

export interface DeleteCollectionByIdRequest {
    id: string;
}

export interface FilterCollectionsRequest {
    filter?: Array<string>;
    sort?: Array<string>;
    expand?: Array<string>;
    project?: Array<string>;
    limit?: number;
    offset?: number;
}

export interface FindCollectionByExternalIdRequest {
    externalId: string;
}

export interface FindCollectionByIdRequest {
    id: string;
}

export interface FindCollectionBySlugRequest {
    lang: string;
    slug: string;
}

export interface RemoveCollectionAssetRequest {
    collectionId: string;
    assetIndex: number;
}

export interface SearchCollectionRequest {
    expand: string;
    language: string;
    term: string;
    limit?: number;
    offset?: number;
}

export interface UpdateCollectionAssetRequest {
    collectionId: string;
    assetIndex: number;
    assetDTO: AssetDTO;
}

export interface UpdateCollectionByIdRequest {
    id: string;
    collectionDraftDTO: CollectionDraftDTO;
}

/**
 * 
 */
export class CollectionsApi extends runtime.BaseAPI {

    /**
     * Creates a new asset per collection id.
     */
    async addCollectionAssetRaw(requestParameters: AddCollectionAssetRequest): Promise<runtime.ApiResponse<CollectionDTO>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling addCollectionAsset.');
        }

        if (requestParameters.assetDTO === null || requestParameters.assetDTO === undefined) {
            throw new runtime.RequiredError('assetDTO','Required parameter requestParameters.assetDTO was null or undefined when calling addCollectionAsset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/collections/{collectionId}/assets`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetDTOToJSON(requestParameters.assetDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new asset per collection id.
     */
    async addCollectionAsset(requestParameters: AddCollectionAssetRequest): Promise<CollectionDTO> {
        const response = await this.addCollectionAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new collection.
     */
    async createCollectionRaw(requestParameters: CreateCollectionRequest): Promise<runtime.ApiResponse<CollectionDTO>> {
        if (requestParameters.collectionDraftDTO === null || requestParameters.collectionDraftDTO === undefined) {
            throw new runtime.RequiredError('collectionDraftDTO','Required parameter requestParameters.collectionDraftDTO was null or undefined when calling createCollection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/collections`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CollectionDraftDTOToJSON(requestParameters.collectionDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new collection.
     */
    async createCollection(requestParameters: CreateCollectionRequest): Promise<CollectionDTO> {
        const response = await this.createCollectionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a collection by id.
     */
    async deleteCollectionByIdRaw(requestParameters: DeleteCollectionByIdRequest): Promise<runtime.ApiResponse<CollectionDraftDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCollectionById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/collections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionDraftDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a collection by id.
     */
    async deleteCollectionById(requestParameters: DeleteCollectionByIdRequest): Promise<CollectionDraftDTO> {
        const response = await this.deleteCollectionByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all collections.
     */
    async filterCollectionsRaw(requestParameters: FilterCollectionsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/collections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all collections.
     */
    async filterCollections(requestParameters: FilterCollectionsRequest): Promise<void> {
        await this.filterCollectionsRaw(requestParameters);
    }

    /**
     * Returns a collection by external id.
     */
    async findCollectionByExternalIdRaw(requestParameters: FindCollectionByExternalIdRequest): Promise<runtime.ApiResponse<CollectionDTO>> {
        if (requestParameters.externalId === null || requestParameters.externalId === undefined) {
            throw new runtime.RequiredError('externalId','Required parameter requestParameters.externalId was null or undefined when calling findCollectionByExternalId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/collections/external/{externalId}`.replace(`{${"externalId"}}`, encodeURIComponent(String(requestParameters.externalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionDTOFromJSON(jsonValue));
    }

    /**
     * Returns a collection by external id.
     */
    async findCollectionByExternalId(requestParameters: FindCollectionByExternalIdRequest): Promise<CollectionDTO> {
        const response = await this.findCollectionByExternalIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a collection by id.
     */
    async findCollectionByIdRaw(requestParameters: FindCollectionByIdRequest): Promise<runtime.ApiResponse<CollectionDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findCollectionById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/collections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionDTOFromJSON(jsonValue));
    }

    /**
     * Returns a collection by id.
     */
    async findCollectionById(requestParameters: FindCollectionByIdRequest): Promise<CollectionDTO> {
        const response = await this.findCollectionByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a collection by slug and language code.
     */
    async findCollectionBySlugRaw(requestParameters: FindCollectionBySlugRequest): Promise<runtime.ApiResponse<CollectionDTO>> {
        if (requestParameters.lang === null || requestParameters.lang === undefined) {
            throw new runtime.RequiredError('lang','Required parameter requestParameters.lang was null or undefined when calling findCollectionBySlug.');
        }

        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling findCollectionBySlug.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/collections/slug/{lang}/{slug}`.replace(`{${"lang"}}`, encodeURIComponent(String(requestParameters.lang))).replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionDTOFromJSON(jsonValue));
    }

    /**
     * Returns a collection by slug and language code.
     */
    async findCollectionBySlug(requestParameters: FindCollectionBySlugRequest): Promise<CollectionDTO> {
        const response = await this.findCollectionBySlugRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an asset per collection id and asset index.
     */
    async removeCollectionAssetRaw(requestParameters: RemoveCollectionAssetRequest): Promise<runtime.ApiResponse<CollectionDTO>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling removeCollectionAsset.');
        }

        if (requestParameters.assetIndex === null || requestParameters.assetIndex === undefined) {
            throw new runtime.RequiredError('assetIndex','Required parameter requestParameters.assetIndex was null or undefined when calling removeCollectionAsset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/collections/{collectionId}/assets/{assetIndex}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"assetIndex"}}`, encodeURIComponent(String(requestParameters.assetIndex))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionDTOFromJSON(jsonValue));
    }

    /**
     * Deletes an asset per collection id and asset index.
     */
    async removeCollectionAsset(requestParameters: RemoveCollectionAssetRequest): Promise<CollectionDTO> {
        const response = await this.removeCollectionAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Searches collections by name.
     */
    async searchCollectionRaw(requestParameters: SearchCollectionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling searchCollection.');
        }

        if (requestParameters.language === null || requestParameters.language === undefined) {
            throw new runtime.RequiredError('language','Required parameter requestParameters.language was null or undefined when calling searchCollection.');
        }

        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling searchCollection.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.term !== undefined) {
            queryParameters['term'] = requestParameters.term;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/merchandise/collections/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Searches collections by name.
     */
    async searchCollection(requestParameters: SearchCollectionRequest): Promise<void> {
        await this.searchCollectionRaw(requestParameters);
    }

    /**
     * Updates an asset per collection id and asset index.
     */
    async updateCollectionAssetRaw(requestParameters: UpdateCollectionAssetRequest): Promise<runtime.ApiResponse<CollectionDTO>> {
        if (requestParameters.collectionId === null || requestParameters.collectionId === undefined) {
            throw new runtime.RequiredError('collectionId','Required parameter requestParameters.collectionId was null or undefined when calling updateCollectionAsset.');
        }

        if (requestParameters.assetIndex === null || requestParameters.assetIndex === undefined) {
            throw new runtime.RequiredError('assetIndex','Required parameter requestParameters.assetIndex was null or undefined when calling updateCollectionAsset.');
        }

        if (requestParameters.assetDTO === null || requestParameters.assetDTO === undefined) {
            throw new runtime.RequiredError('assetDTO','Required parameter requestParameters.assetDTO was null or undefined when calling updateCollectionAsset.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/collections/{collectionId}/assets/{assetIndex}`.replace(`{${"collectionId"}}`, encodeURIComponent(String(requestParameters.collectionId))).replace(`{${"assetIndex"}}`, encodeURIComponent(String(requestParameters.assetIndex))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssetDTOToJSON(requestParameters.assetDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionDTOFromJSON(jsonValue));
    }

    /**
     * Updates an asset per collection id and asset index.
     */
    async updateCollectionAsset(requestParameters: UpdateCollectionAssetRequest): Promise<CollectionDTO> {
        const response = await this.updateCollectionAssetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a collection by id.
     */
    async updateCollectionByIdRaw(requestParameters: UpdateCollectionByIdRequest): Promise<runtime.ApiResponse<CollectionDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCollectionById.');
        }

        if (requestParameters.collectionDraftDTO === null || requestParameters.collectionDraftDTO === undefined) {
            throw new runtime.RequiredError('collectionDraftDTO','Required parameter requestParameters.collectionDraftDTO was null or undefined when calling updateCollectionById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/merchandise/collections/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CollectionDraftDTOToJSON(requestParameters.collectionDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CollectionDTOFromJSON(jsonValue));
    }

    /**
     * Updates a collection by id.
     */
    async updateCollectionById(requestParameters: UpdateCollectionByIdRequest): Promise<CollectionDTO> {
        const response = await this.updateCollectionByIdRaw(requestParameters);
        return await response.value();
    }

}
