/* tslint:disable */
/* eslint-disable */
/**
 * Auth
 * Auth API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProductDiscountDTO,
    ProductDiscountDTOFromJSON,
    ProductDiscountDTOToJSON,
    ProductDiscountDraftDTO,
    ProductDiscountDraftDTOFromJSON,
    ProductDiscountDraftDTOToJSON,
} from '../models';

export interface CreateProductDiscountRequest {
    productDiscountDraftDTO: ProductDiscountDraftDTO;
}

export interface DeleteProductDiscountByIdRequest {
    id: string;
}

export interface FilterProductDiscountsRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface FindProductDiscountByIdRequest {
    id: string;
}

export interface SearchProductDiscountsRequest {
    filter: string;
    sort: string;
    expand: string;
    project: string;
    limit?: number;
    offset?: number;
}

export interface UpdateProductDiscountByIdRequest {
    id: string;
    productDiscountDraftDTO: ProductDiscountDraftDTO;
}

/**
 * 
 */
export class ProductDiscountsApi extends runtime.BaseAPI {

    /**
     * Creates a new product discount.
     */
    async createProductDiscountRaw(requestParameters: CreateProductDiscountRequest): Promise<runtime.ApiResponse<ProductDiscountDTO>> {
        if (requestParameters.productDiscountDraftDTO === null || requestParameters.productDiscountDraftDTO === undefined) {
            throw new runtime.RequiredError('productDiscountDraftDTO','Required parameter requestParameters.productDiscountDraftDTO was null or undefined when calling createProductDiscount.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/product-discounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProductDiscountDraftDTOToJSON(requestParameters.productDiscountDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDiscountDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new product discount.
     */
    async createProductDiscount(requestParameters: CreateProductDiscountRequest): Promise<ProductDiscountDTO> {
        const response = await this.createProductDiscountRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a product discount by id.
     */
    async deleteProductDiscountByIdRaw(requestParameters: DeleteProductDiscountByIdRequest): Promise<runtime.ApiResponse<ProductDiscountDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProductDiscountById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/product-discounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDiscountDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a product discount by id.
     */
    async deleteProductDiscountById(requestParameters: DeleteProductDiscountByIdRequest): Promise<ProductDiscountDTO> {
        const response = await this.deleteProductDiscountByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists all product discounts.
     */
    async filterProductDiscountsRaw(requestParameters: FilterProductDiscountsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling filterProductDiscounts.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling filterProductDiscounts.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling filterProductDiscounts.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling filterProductDiscounts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/product-discounts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Lists all product discounts.
     */
    async filterProductDiscounts(requestParameters: FilterProductDiscountsRequest): Promise<void> {
        await this.filterProductDiscountsRaw(requestParameters);
    }

    /**
     * Returns a product discount by id.
     */
    async findProductDiscountByIdRaw(requestParameters: FindProductDiscountByIdRequest): Promise<runtime.ApiResponse<ProductDiscountDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findProductDiscountById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/product-discounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDiscountDTOFromJSON(jsonValue));
    }

    /**
     * Returns a product discount by id.
     */
    async findProductDiscountById(requestParameters: FindProductDiscountByIdRequest): Promise<ProductDiscountDTO> {
        const response = await this.findProductDiscountByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Searches product discounts by name.
     */
    async searchProductDiscountsRaw(requestParameters: SearchProductDiscountsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.filter === null || requestParameters.filter === undefined) {
            throw new runtime.RequiredError('filter','Required parameter requestParameters.filter was null or undefined when calling searchProductDiscounts.');
        }

        if (requestParameters.sort === null || requestParameters.sort === undefined) {
            throw new runtime.RequiredError('sort','Required parameter requestParameters.sort was null or undefined when calling searchProductDiscounts.');
        }

        if (requestParameters.expand === null || requestParameters.expand === undefined) {
            throw new runtime.RequiredError('expand','Required parameter requestParameters.expand was null or undefined when calling searchProductDiscounts.');
        }

        if (requestParameters.project === null || requestParameters.project === undefined) {
            throw new runtime.RequiredError('project','Required parameter requestParameters.project was null or undefined when calling searchProductDiscounts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fulfillment/product-discounts/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Searches product discounts by name.
     */
    async searchProductDiscounts(requestParameters: SearchProductDiscountsRequest): Promise<void> {
        await this.searchProductDiscountsRaw(requestParameters);
    }

    /**
     * Updates a product discount by id.
     */
    async updateProductDiscountByIdRaw(requestParameters: UpdateProductDiscountByIdRequest): Promise<runtime.ApiResponse<ProductDiscountDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProductDiscountById.');
        }

        if (requestParameters.productDiscountDraftDTO === null || requestParameters.productDiscountDraftDTO === undefined) {
            throw new runtime.RequiredError('productDiscountDraftDTO','Required parameter requestParameters.productDiscountDraftDTO was null or undefined when calling updateProductDiscountById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fulfillment/product-discounts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductDiscountDraftDTOToJSON(requestParameters.productDiscountDraftDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductDiscountDTOFromJSON(jsonValue));
    }

    /**
     * Updates a product discount by id.
     */
    async updateProductDiscountById(requestParameters: UpdateProductDiscountByIdRequest): Promise<ProductDiscountDTO> {
        const response = await this.updateProductDiscountByIdRaw(requestParameters);
        return await response.value();
    }

}
